{"version":3,"sources":["../out/errors.js"],"names":["Object","defineProperty","exports","value","errors","argumentNull","parameterName","msg","Error","elementValidateRuleNotSet","element","name","fieldElementCanntNull","fieldIndex","elementNotExists","fieldResultExpectBooleanType"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB,C,CACA;;AACAF,OAAO,CAACE,MAAR,GAAiB;AACbC,EAAAA,YADa,wBACAC,aADA,EACe;AACxB,QAAIC,GAAG,uBAAgBD,aAAhB,+BAAP;AACA,WAAO,IAAIE,KAAJ,CAAUD,GAAV,CAAP;AACH,GAJY;AAKbE,EAAAA,yBALa,qCAKaC,OALb,EAKsB;AAC/B,QAAIH,GAAG,0BAASG,OAAO,CAACC,IAAjB,sDAAP;AACA,WAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH,GARY;AASbK,EAAAA,qBATa,iCASSC,UATT,EASqB;AAC9B;AACA,QAAIN,GAAG,GAAGM,UAAU,IAAI,IAAd,0EAC0DA,UAD1D,2CAAV;AAGA,WAAO,IAAIL,KAAJ,CAAUD,GAAV,CAAP;AACH,GAfY;AAgBbO,EAAAA,gBAhBa,4BAgBIH,IAhBJ,EAgBU;AACnB,QAAIJ,GAAG,qBAAcI,IAAd,+BAAP;AACA,WAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH,GAnBY;AAoBbQ,EAAAA,4BApBa,wCAoBgBJ,IApBhB,EAoBsB;AAC/B,QAAIJ,GAAG,uBAAgBI,IAAhB,gCAAP;AACA,WAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH;AAvBY,CAAjB,C,CAyBA","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.errors = void 0;\r\n// namespace dilu {\r\nexports.errors = {\r\n    argumentNull(parameterName) {\r\n        let msg = `Parameter ${parameterName} can not be null or empty.`;\r\n        return new Error(msg);\r\n    },\r\n    elementValidateRuleNotSet(element) {\r\n        let msg = `元素'${element.name}'没有设置验证规则`;\r\n        return new Error(msg);\r\n    },\r\n    fieldElementCanntNull(fieldIndex) {\r\n        // if (fieldIndex != null)\r\n        let msg = fieldIndex != null ?\r\n            `The element value in the field cannt be null, field index is ${fieldIndex}.` :\r\n            `The element in the field is null`;\r\n        return new Error(msg);\r\n    },\r\n    elementNotExists(name) {\r\n        let msg = `Element ${name} is not exits in the form.`;\r\n        return new Error(msg);\r\n    },\r\n    fieldResultExpectBooleanType(name) {\r\n        let msg = `Result of ${name} field is expected boolean.`;\r\n        return new Error(msg);\r\n    }\r\n};\r\n// }\r\n"],"file":"errors.js"}