{"version":3,"sources":["../out/rules.js"],"names":["Object","defineProperty","exports","value","rules","ruleRegex","numericRegex","integerRegex","decimalRegex","emailRegex","alphaRegex","alphaNumericRegex","alphaDashRegex","naturalRegex","naturalNoZeroRegex","ipRegex","base64Regex","numericDashRegex","urlRegex","mobileRegex","dateRegex","msgs","required","matches","equal","email","valid_emails","minLength","maxLength","exact_length","greater_than","less_than","alpha","alpha_numeric","alpha_dash","numeric","integer","decimal","is_natural","is_natural_no_zero","ip","valid_base64","valid_credit_card","is_file_type","valid_url","greater_than_date","less_than_date","greater_than_or_equal_date","less_than_or_equal_date","mobile","custom","createValidation","validate","error","calc","otherElement","test","length","greaterThan","o","elementValueCompare","lessThan","url","otherValue","elementValue","parseFloat","getValidDate","date","match","validDate","Date","validDateArray","split","setFullYear","setMonth","setDate"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rules = void 0;\r\n// namespace dilu {\r\nvar ruleRegex = /^(.+?)\\[(.+)\\]$/, numericRegex = /^[0-9]+$/, integerRegex = /^\\-?[0-9]+$/, decimalRegex = /^\\-?[0-9]*\\.?[0-9]+$/, emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/, alphaRegex = /^[a-z]+$/i, alphaNumericRegex = /^[a-z0-9]+$/i, alphaDashRegex = /^[a-z0-9_\\-]+$/i, naturalRegex = /^[0-9]+$/i, naturalNoZeroRegex = /^[1-9][0-9]*$/i, ipRegex = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i, base64Regex = /[^a-zA-Z0-9\\/\\+=]/i, numericDashRegex = /^[\\d\\-\\s]+$/, urlRegex = /^((http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)|)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/, mobileRegex = /^1[34578]\\d{9}$/, dateRegex = /\\d{4}-\\d{1,2}-\\d{1,2}/;\r\nlet msgs = {\r\n    required: '%s不能为空',\r\n    matches: '%s与%s不匹配',\r\n    \"default\": 'The %s field is still set to default, please change.',\r\n    equal: '%s和%s必须相同',\r\n    email: '不是有效的邮箱地址',\r\n    valid_emails: 'The %s field must contain all valid email addresses.',\r\n    minLength: '%s至少包含%s个字符',\r\n    maxLength: '%s不能超过%s字符',\r\n    exact_length: 'The %s field must be exactly %s characters in length.',\r\n    greater_than: 'The %s field must contain a number greater than %s.',\r\n    less_than: 'The %s field must contain a number less than %s.',\r\n    alpha: 'The %s field must only contain alphabetical characters.',\r\n    alpha_numeric: 'The %s field must only contain alpha-numeric characters.',\r\n    alpha_dash: 'The %s field must only contain alpha-numeric characters, underscores, and dashes.',\r\n    numeric: '请数入数字',\r\n    integer: 'The %s field must contain an integer.',\r\n    decimal: 'The %s field must contain a decimal number.',\r\n    is_natural: 'The %s field must contain only positive numbers.',\r\n    is_natural_no_zero: 'The %s field must contain a number greater than zero.',\r\n    ip: 'The %s field must contain a valid IP.',\r\n    valid_base64: 'The %s field must contain a base64 string.',\r\n    valid_credit_card: 'The %s field must contain a valid credit card number.',\r\n    is_file_type: 'The %s field must contain only %s files.',\r\n    valid_url: 'The %s field must contain a valid URL.',\r\n    greater_than_date: 'The %s field must contain a more recent date than %s.',\r\n    less_than_date: 'The %s field must contain an older date than %s.',\r\n    greater_than_or_equal_date: 'The %s field must contain a date that\\'s at least as recent as %s.',\r\n    less_than_or_equal_date: 'The %s field must contain a date that\\'s %s or older.',\r\n    mobile: '请输入正确的手机号码',\r\n    custom: '请输入正确制',\r\n};\r\nfunction createValidation(validate, error) {\r\n    return {\r\n        validate: validate,\r\n        error: error\r\n    };\r\n}\r\nfunction calc(value) {\r\n    if (typeof value == 'function') {\r\n        return value();\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * 表单验证规则\r\n */\r\nexports.rules = {\r\n    /**\r\n     * 验证必填字段\r\n     * @param error 错误提示文字\r\n     */\r\n    required(error) {\r\n        let validate = (value) => (value || \"\") != '';\r\n        return createValidation(validate, error || msgs.required);\r\n    },\r\n    /**\r\n     * 验证两个字段值是否相等\r\n     * @param otherElement 另外一个字段\r\n     * @param error 错误提示文字\r\n     */\r\n    matches(otherElement, error) {\r\n        var validate = (value) => value == otherElement.value;\r\n        return createValidation(validate, error || msgs.required);\r\n    },\r\n    /**\r\n     * 验证邮箱\r\n     * @param error 错误提示文字\r\n     */\r\n    email(error) {\r\n        var validate = (value) => emailRegex.test(value);\r\n        return createValidation(validate, error || msgs.required);\r\n    },\r\n    /**\r\n     * 验证字段最小长度\r\n     * @param length 最小长度\r\n     * @param error 错误提示文字\r\n     */\r\n    minLength(length, error) {\r\n        var validate = (value) => (value || '').length >= calc(length);\r\n        return createValidation(validate, error || msgs.minLength);\r\n    },\r\n    /**\r\n     * 验证字段的最大长度\r\n     * @param length 最大长度\r\n     * @param error 错误提示文字\r\n     */\r\n    maxLength(length, error) {\r\n        var validate = (value) => (value || '').length <= calc(length);\r\n        return createValidation(validate, error || msgs.matches);\r\n    },\r\n    /**\r\n     * 验证字段大于指定的值\r\n     * @param value 指定的值\r\n     * @param error 错误提示文字\r\n     */\r\n    greaterThan(value, error) {\r\n        var validate = (o) => elementValueCompare(o, calc(value)) == 'greaterThan';\r\n        return createValidation(validate, error || msgs.greater_than);\r\n    },\r\n    /**\r\n     * 验证字段小于指定的值\r\n     * @param value 指定的值\r\n     * @param error 错误提示文字\r\n     */\r\n    lessThan(value, error) {\r\n        var validate = (o) => elementValueCompare(o, calc(value)) == 'lessThan';\r\n        return createValidation(validate, error || msgs.less_than);\r\n    },\r\n    /**\r\n     * 验证字段等于指定的值\r\n     * @param value 指定的值\r\n     * @param error 错误提示文字\r\n     */\r\n    equal(value, error) {\r\n        var validate = (o) => elementValueCompare(o, calc(value)) == 'equal';\r\n        return createValidation(validate, error || msgs.equal);\r\n    },\r\n    /**\r\n     * 验证字段为 IP\r\n     * @param error 错误提示文字\r\n     */\r\n    ip(error) {\r\n        var validate = (value) => ipRegex.test(value);\r\n        return createValidation(validate, error || msgs.ip);\r\n    },\r\n    /**\r\n     * 验证字段为 URL\r\n     * @param error 错误提示文字\r\n     */\r\n    url(error) {\r\n        var validate = (value) => urlRegex.test(value);\r\n        return createValidation(validate, error || msgs.valid_url);\r\n    },\r\n    /**\r\n     * 验证字段为手机号码\r\n     * @param error 错误提示文字\r\n     */\r\n    mobile(error) {\r\n        var validate = (value) => mobileRegex.test(value);\r\n        return createValidation(validate, error || msgs.mobile);\r\n    },\r\n    /**\r\n     * 验证字段为数字\r\n     * @param error 错误提示文字\r\n     */\r\n    numeric(error) {\r\n        var validate = (value) => numericRegex.test(value);\r\n        return createValidation(validate, error || msgs.numeric);\r\n    },\r\n    /**\r\n     * 自定义验证\r\n     * @param validate 自定义验证的方法\r\n     * @param error 错误提示文字\r\n     */\r\n    custom(validate, error) {\r\n        return createValidation(validate, error || msgs.custom);\r\n    }\r\n};\r\nfunction elementValueCompare(value, otherValue) {\r\n    let elementValue;\r\n    if (typeof otherValue == 'number') {\r\n        elementValue = decimalRegex.test(value) ? parseFloat(value) : null;\r\n    }\r\n    else if (typeof otherValue == 'string') {\r\n        elementValue = value;\r\n    }\r\n    else {\r\n        elementValue = getValidDate(value);\r\n    }\r\n    if (elementValue < otherValue)\r\n        return 'lessThan';\r\n    else if (elementValue > otherValue)\r\n        return 'greaterThan';\r\n    else\r\n        return 'equal';\r\n}\r\n/**\r\n * private function _getValidDate: helper function to convert a string date to a Date object\r\n * @param date (String) must be in format yyyy-mm-dd or use keyword: today\r\n * @returns {Date} returns false if invalid\r\n */\r\nfunction getValidDate(date) {\r\n    if (!date.match('today') && !date.match(dateRegex)) {\r\n        return null;\r\n    }\r\n    var validDate = new Date(), validDateArray;\r\n    if (!date.match('today')) {\r\n        validDateArray = date.split('-');\r\n        validDate.setFullYear(validDateArray[0]);\r\n        validDate.setMonth(validDateArray[1] - 1);\r\n        validDate.setDate(validDateArray[2]);\r\n    }\r\n    return validDate;\r\n}\r\n;\r\n// }\r\n"],"file":"rules.js"}