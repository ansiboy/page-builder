"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _components;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = exports.PageContext = void 0;
const React = require("react");
const register_1 = require("../register");
// import { component } from "./decorators";
const parse_component_data_1 = require("../parse-component-data");
const callback_1 = require("maishu-toolkit/out/callback");
exports.PageContext = React.createContext({});
// @component({ type: Page.typeName })
class Page extends React.Component {
    constructor(props) {
        super(props);
        this.childComponentCreated = new callback_1.Callback();
        _components.set(this, {});
    }
    get components() {
        return __classPrivateFieldGet(this, _components);
    }
    render() {
        let pageStyle = {};
        let pageData = this.props.pageData;
        pageData.children.forEach(c => {
            c.props.ref = (e) => {
                if (e == null)
                    return;
                if (__classPrivateFieldGet(this, _components)[c.id] == null)
                    this.childComponentCreated.fire({ component: e, id: c.id });
                __classPrivateFieldGet(this, _components)[c.id] = e || __classPrivateFieldGet(this, _components)[c.id];
            };
        });
        let children = pageData.children.filter(o => o.parentId == pageData.id);
        let childComponents = children.map(o => React.createElement(React.Fragment, { key: o.id }, parse_component_data_1.parseComponentData(o)));
        return React.createElement("div", { className: `${Page.className}`, style: pageStyle },
            React.createElement(exports.PageContext.Provider, { value: { page: this, pageData } }, childComponents));
    }
}
exports.Page = Page;
_components = new WeakMap();
Page.typeName = "article";
Page.className = "page-view";
//========================================================
// 兼容旧代码
register_1.registerComponent("PageView", Page);
//========================================================
register_1.registerComponent(Page.typeName, Page);
//# sourceMappingURL=page.js.map