import * as React from "react";
import { PropEditorConstructor } from "./prop-editor";
import { ComponentData } from "maishu-jueying-core";
import { GroupedEditor } from "./property-editor";
import { ValidateField } from "maishu-dilu";
export interface PropEditorInfo {
    propName: string;
    displayName: string;
    editorType: PropEditorConstructor;
    group: GroupedEditor["group"];
    defaultValue: any;
    validation?: Omit<ValidateField, "name">;
}
interface SetPropEditorOptions {
    componentType: React.ComponentClass<any> | string;
    propName: string;
    editorType: PropEditorConstructor;
    group?: GroupedEditor["group"];
    display?: ComponentPropEditorDisplay;
    displayName?: string;
    defaultValue?: any;
    validation?: PropEditorInfo["validation"];
}
/** 组件是否显示回调函数 */
declare type ComponentPropEditorDisplay = (componentData: ComponentData) => boolean;
export declare class Component {
    static readonly Fragment = "";
    private static componentPropEditors;
    private static componentPropEditorDisplay;
    static getPropEditors(componentData: ComponentData): PropEditorInfo[];
    static getPropEditor<T, K extends keyof T, K1 extends keyof T[K]>(controlClassName: string, propName: K, propName1: K1): PropEditorInfo;
    static getPropEditor<T, K extends keyof T>(controlClassName: string, propName: string): PropEditorInfo;
    /** 通过属性数组获取属性的编辑器 */
    private static getPropEditorByArray;
    static setPropEditor(options: SetPropEditorOptions): void;
    static register(typeName: string, componentType: React.ComponentClass<any>): void;
}
export {};
