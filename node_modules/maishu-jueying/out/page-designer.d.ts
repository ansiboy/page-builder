import * as React from "react";
import { ComponentData } from "maishu-jueying-core";
export interface PageDesignerProps extends React.Props<PageDesigner> {
    pageData: ComponentData;
    className?: string;
    style?: React.CSSProperties;
}
export interface PageDesignerState {
    pageData: ComponentData;
}
export declare let DesignerContext: React.Context<{
    designer: PageDesigner | null;
}>;
export declare class PageDesigner extends React.Component<PageDesignerProps, PageDesignerState> {
    private _element;
    private components;
    constructor(props: PageDesignerProps);
    private setComponetRefProp;
    private initPageData;
    /**
     * 对组件及其子控件进行命名
     * @param component
     */
    private fillComponent;
    allComponents(): React.Component[];
    /** 页面数据 */
    get pageData(): ComponentData;
    /** 获取已选择了的组件编号 */
    get selectedComponentIds(): string[];
    /** 获取已选择了的组件 */
    get selectedComponents(): ComponentData[];
    get element(): HTMLElement;
    updateComponentProp(componentId: string, propName: string, value: any): any;
    updateComponentProps(componentProps: {
        componentId: string;
        propName: string;
        value: any;
    }[]): any;
    /**
     * 添加控件
     * @param parentId 父控件编号
     * @param componentData 控件数据
     * @param componentIndex 新添加组件在子组件中的次序
     */
    appendComponent(parentId: string, componentData: ComponentData, componentIndex?: number): void;
    /**
     * 选择指定的控件
     * @param control 指定的控件
     */
    selectComponent(componentIds: string[] | string): void;
    /**
     * 选择指定的控件，一个或多个。已经选择的控件取消选择。
     * @param control 指定的控件
     */
    selectComponents(componentIds: string[] | string): void;
    /** 判断两个字符串数组是否相等 */
    private isSame;
    /** 移除控件 */
    removeComponent(...componentIds: string[]): void;
    removeComponents(componentIds: string[]): void;
    /**
     * 移动控件到另外一个控件容器
     * @param componentId 要移动的组件编号
     * @param parentId 目标组件编号
     * @param childComponentIndex 组件位置
     */
    moveComponent(componentId: string, parentId: string, childComponentIndex?: number): void;
    private removeComponentFrom;
    private static travelComponentData;
    /**
     * 通过组件编号获取组件的数据
     * @param componentId 组件编号
     */
    findComponentData(componentId: string): ComponentData | null;
    private onKeyDown;
    /**
     * 通过组件名称获取组件实例
     * @param typeName 组件名称
     */
    findComponetsByTypeName(typeName: string): void;
    render(): JSX.Element;
}
