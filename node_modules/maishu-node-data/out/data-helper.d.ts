import { Repository, ConnectionOptions } from "typeorm";
import { ConnectionConfig } from "mysql";
import { DataContext, DataContextClass } from "./data-context";
import { DataSourceSelectArguments, DataSourceSelectResult } from "maishu-toolkit";
export declare type SelectArguments = DataSourceSelectArguments;
export declare type SelectResult<T> = DataSourceSelectResult<T>;
export declare class DataHelper {
    static list<T>(repository: Repository<T>, options?: {
        selectArguments?: SelectArguments;
        relations?: string[];
        fields?: Extract<keyof T, string>[];
    }): Promise<SelectResult<T>>;
    static createDataContext<T extends DataContext>(type: DataContextClass<T>, connConfig: ConnectionOptions): Promise<T>;
}
export declare function createDatabaseIfNotExists(connConfig: ConnectionConfig, initDatabase?: (conn: ConnectionConfig) => void): Promise<boolean>;
