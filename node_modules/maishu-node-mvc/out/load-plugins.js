"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPlugins = void 0;
const path = __importStar(require("path"));
function loadPlugins(rootDirectory, logger, webServer) {
    let nodeModulesDir = rootDirectory.findDirectory("node_modules");
    if (nodeModulesDir == null) {
        logger.warn(`Node_modules directory is not exists in the root directory '${rootDirectory.physicalPath}'.`);
        return;
    }
    let pluginNameRegex = new RegExp("\\S+-nws-");
    let dirs = nodeModulesDir.directories();
    for (let name in dirs) {
        if (!pluginNameRegex.test(name)) {
            continue;
        }
        let packagePhysicalPath = dirs[name].findFile("package.json");
        if (!packagePhysicalPath) {
            logger.warn(`File package.json is not exists in the directory ${packagePhysicalPath}.`);
            continue;
        }
        let pkg = require(packagePhysicalPath);
        let mainPath = pkg.main || "index.js";
        if (!path.isAbsolute(mainPath))
            mainPath = path.join(dirs[name].physicalPath, mainPath);
        let mod = require(mainPath);
        if (mod == null) {
            logger.warn(`Load package '${pkg.name}' fail.`);
            continue;
        }
        if (mod.default == null) {
            logger.warn(`Package '${pkg.name}' has not a default field, is has a default export?.`);
            continue;
        }
        if (typeof mod.default != "function") {
            logger.warn(`Package '${pkg.name}' default export is not a function, require a function.`);
            continue;
        }
        mod.default(webServer, rootDirectory);
    }
}
exports.loadPlugins = loadPlugins;
