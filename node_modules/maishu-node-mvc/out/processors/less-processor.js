"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LessProcessor = void 0;
const less = require("less");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const errors = __importStar(require("../errors"));
const scss = __importStar(require("node-sass"));
let cssExtNames = [".css", ".less", ".scss"];
class LessProcessor {
    constructor() {
        this.options = {};
    }
    async execute(ctx) {
        let ext = path.extname(ctx.virtualPath);
        if (cssExtNames.indexOf(ext) < 0)
            return null;
        let fileName = this.cutExtName(ctx.virtualPath);
        let lessFilePath = fileName + ".less";
        let cssFilePath = fileName + ".css";
        let scssFilePath = fileName + ".scss";
        let dir = ctx.rootDirectory;
        if (this.options.directoryPath != null) {
            dir = ctx.rootDirectory.findDirectory(this.options.directoryPath);
            if (dir == null)
                throw errors.pageNotFound(this.options.directoryPath);
        }
        let physicalPath = dir.findFile(cssFilePath);
        if (physicalPath == null)
            physicalPath = dir.findFile(lessFilePath);
        if (physicalPath == null)
            physicalPath = dir.findFile(scssFilePath);
        if (physicalPath == null)
            throw errors.pageNotFound(`${cssFilePath} or ${lessFilePath} or ${scssFilePath}`);
        let buffer = fs.readFileSync(physicalPath);
        let originalCode = buffer.toString();
        let content;
        let extname = path.extname(physicalPath);
        switch (extname) {
            case ".less":
                let output = await this.parseLess(originalCode, physicalPath);
                content = output.css;
                break;
            case ".scss":
                let out = originalCode ? this.parseScss(originalCode, physicalPath, ctx.rootDirectory) : "";
                content = typeof out == "string" ? out : out.css.toString();
                break;
            default:
                content = originalCode;
        }
        return {
            content: content,
            headers: { "Content-Type": "text/css; charset=UTF-8" }
        };
    }
    cutExtName(filePath) {
        let ext = path.extname(filePath);
        while (cssExtNames.indexOf(ext) >= 0) {
            filePath = filePath.substr(0, filePath.length - ext.length);
            ext = path.extname(filePath);
        }
        return filePath;
    }
    async parseLess(originalCode, physicalPath) {
        let output = await less.render(originalCode, {
            paths: [path.dirname(physicalPath)]
        });
        return output;
    }
    parseScss(originalCode, physicalPath, rootDirectory) {
        let dirPath = null;
        if (this.options.directoryPath) {
            let dir = rootDirectory.findDirectory(this.options.directoryPath);
            if (dir)
                dirPath = dir.physicalPath;
        }
        else {
            dirPath = rootDirectory.physicalPath;
        }
        let options = { data: originalCode, includePaths: [] };
        if (dirPath != null) {
            options.includePaths?.push(dirPath);
        }
        let dir = path.dirname(physicalPath);
        options.includePaths?.push(dir);
        let output = scss.renderSync(options);
        return output;
    }
}
exports.LessProcessor = LessProcessor;
