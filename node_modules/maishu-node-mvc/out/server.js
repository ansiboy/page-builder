"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const maishu_node_web_server_1 = require("maishu-node-web-server");
const maishu_nws_js_1 = require("maishu-nws-js");
const json5_processor_1 = require("./processors/json5-processor");
const less_processor_1 = require("./processors/less-processor");
const errors = __importStar(require("./errors"));
const fs = __importStar(require("fs"));
const load_plugins_1 = require("./load-plugins");
const maishu_nws_mvc_1 = require("maishu-nws-mvc");
function startServer(settings, mode) {
    let packagePath = "../package.json";
    let pkg = require(packagePath);
    let logger = maishu_node_web_server_1.getLogger(pkg.name, settings.log?.level);
    mode = mode || "mvc";
    logger.info(`${startServer.name}: Current mode is ${mode}.`);
    if (settings.websiteDirectory == null)
        throw errors.arugmentFieldNull("rootDirectory", "settings");
    if (typeof settings.websiteDirectory == "string" && !fs.existsSync(settings.websiteDirectory))
        throw errors.physicalPathNotExists(settings.websiteDirectory);
    let server = new maishu_node_web_server_1.WebServer(settings);
    let rootDirectory = server.websiteDirectory;
    let staticFileProcessor = server.requestProcessors.find(maishu_node_web_server_1.StaticFileProcessor);
    console.assert(staticFileProcessor != null);
    staticFileProcessor.contentTypes[".svg"] = "image/svg+xml";
    staticFileProcessor.contentTypes[".webp"] = "image/webp";
    logger.info(staticFileProcessor.contentTypes);
    var javaScriptProcessor = new maishu_nws_js_1.JavaScriptProcessor();
    server.requestProcessors.add(javaScriptProcessor);
    var json5Processor = new json5_processor_1.Json5Processor();
    server.requestProcessors.add(json5Processor);
    var lessProcessor = new less_processor_1.LessProcessor();
    server.requestProcessors.add(lessProcessor);
    javaScriptProcessor.options.babel = {
        "\\S+.js$": {
            "presets": [
                ["@babel/preset-env", {
                        "targets": { chrome: 58 }
                    }],
            ],
            plugins: [
                ["@babel/plugin-transform-modules-amd", { noInterop: true }]
            ]
        },
        "\\S+.ts$": {
            "presets": [
                ["@babel/preset-env", {
                        "targets": { chrome: 58 }
                    }]
            ],
            plugins: [
                ["@babel/plugin-proposal-decorators", { legacy: true }],
                ["@babel/plugin-transform-typescript", { isTSX: false }],
                ["@babel/plugin-transform-react-jsx", { "pragma": "React.createElement", "pragmaFrag": "React.Fragment" }],
                ["@babel/plugin-transform-modules-amd", { noInterop: true }],
            ]
        },
        "\\S+.tsx$": {
            "presets": [
                ["@babel/preset-env", {
                        "targets": { chrome: 58 }
                    }]
            ],
            plugins: [
                ["@babel/plugin-proposal-decorators", { legacy: true }],
                ["@babel/plugin-transform-typescript", { isTSX: true }],
                ["@babel/plugin-transform-react-jsx", { "pragma": "React.createElement", "pragmaFrag": "React.Fragment" }],
                ["@babel/plugin-transform-modules-amd", { noInterop: true }],
            ]
        },
    };
    if (settings.headers) {
        var headersProcessor = server.requestProcessors.find(maishu_node_web_server_1.HeadersProcessor);
        console.assert(headersProcessor != null, "Can not find headers processor.");
        headersProcessor.headers = headersProcessor.headers || {};
        for (let key in settings.headers) {
            headersProcessor.headers[key] = settings.headers[key];
        }
    }
    if (settings.virtualPaths) {
        for (let virtualPath in settings.virtualPaths) {
            let physicalPath = settings.virtualPaths[virtualPath];
            if (virtualPath[0] != "/")
                virtualPath = "/" + virtualPath;
            server.websiteDirectory.setPath(virtualPath, physicalPath);
        }
    }
    if (settings.proxy) {
        let proxyProcessor = server.requestProcessors.find(maishu_node_web_server_1.ProxyProcessor);
        proxyProcessor.proxyTargets = settings.proxy;
    }
    let mvcProcessor = new maishu_nws_mvc_1.MVCRequestProcessor();
    mvcProcessor.priority = maishu_node_web_server_1.processorPriorities.ProxyRequestProcessor + 10;
    server.requestProcessors.add(mvcProcessor);
    settings.controllerDirectory = settings.controllerDirectory || "controllers";
    mvcProcessor.controllerDirectories = [settings.controllerDirectory];
    mvcProcessor.contextData = settings.contextData || settings.serverContextData;
    load_plugins_1.loadPlugins(rootDirectory, logger, server);
    if (settings.processors != null) {
        for (let i = 0; i < server.requestProcessors.length; i++) {
            let requestProcessor = server.requestProcessors.item(i);
            let name = requestProcessor.constructor.name;
            let processorProperties = settings.processors[name];
            for (let prop in processorProperties) {
                if (requestProcessor[prop]) {
                    requestProcessor[prop] = processorProperties[prop];
                }
            }
        }
    }
    if (mode == "mvc") {
        let staticDir = rootDirectory.findDirectory("public") || rootDirectory.findDirectory("static");
        let nodeModulesDir = rootDirectory.findDirectory("node_modules");
        if (staticDir != null && nodeModulesDir != null) {
            staticDir.setPath("node_modules", nodeModulesDir.physicalPath);
        }
        staticFileProcessor.staticPath = rootDirectory.findDirectory("public") != null ? "public" : "static";
        javaScriptProcessor.options.directoryPath = staticFileProcessor.staticPath === null ? undefined : staticFileProcessor.staticPath;
        lessProcessor.options.directoryPath = staticFileProcessor.staticPath;
    }
    return server;
}
exports.startServer = startServer;
