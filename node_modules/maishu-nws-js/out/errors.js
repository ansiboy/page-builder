"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function postDataNotJSON(data) {
    let msg = `提交的数据不是 JSON 格式。提交数据为：${data}`;
    let err = new Error(msg);
    err.name = postDataNotJSON.name;
    return err;
}
exports.postDataNotJSON = postDataNotJSON;
function argumentNull(name) {
    let error = new Error(`Argument ${name} can not be null or empty.`);
    error.name = argumentNull.name;
    return error;
}
exports.argumentNull = argumentNull;
function arugmentFieldNull(fieldName, argumentName) {
    let error = new Error(`Field '${fieldName}' of argument ${argumentName} can not be null or empty.`);
    error.name = arugmentFieldNull.name;
    return error;
}
exports.arugmentFieldNull = arugmentFieldNull;
function controllerDirectoryNotExists(dir) {
    let error = new Error(`Controller directory ${dir} is not exists.`);
    error.name = controllerDirectoryNotExists.name;
    return error;
}
exports.controllerDirectoryNotExists = controllerDirectoryNotExists;
function controllerDirectoriesNull() {
    let msg = `Controller directories can not null or empty.`;
    let error = new Error(msg);
    error.name = controllerDirectoriesNull.name;
    return error;
}
exports.controllerDirectoriesNull = controllerDirectoriesNull;
function unexpectedNullValue(name) {
    let msg = `Unexpected null value.`;
    let error = new Error(msg);
    error.name = unexpectedNullValue.name;
    return error;
}
exports.unexpectedNullValue = unexpectedNullValue;
function onlyOneAction(methodName) {
    let msg = `Method can only define one action, method '${methodName}' is deined.`;
    let error = new Error(msg);
    error.name = onlyOneAction.name;
    return error;
}
exports.onlyOneAction = onlyOneAction;
function rootPathNull() {
    let msg = `Root path of config is null or emtpy.`;
    let error = new Error(msg);
    error.name = rootPathNull.name;
    return error;
}
exports.rootPathNull = rootPathNull;
function rootPathNotAbsolute(path) {
    let msg = `Root path '${path}' is not a absolute path.`;
    let error = new Error(msg);
    error.name = rootPathNotAbsolute.name;
    return error;
}
exports.rootPathNotAbsolute = rootPathNotAbsolute;
function authenticateResultNull() {
    let msg = `Authenticate result cannt null`;
    let error = new Error(msg);
    error.name = authenticateResultNull.name;
    return error;
}
exports.authenticateResultNull = authenticateResultNull;
function notAbsolutePath(path) {
    let msg = `Path '${path}' is not a absolute path.`;
    let error = new Error(msg);
    error.name = rootPathNotAbsolute.name;
    return error;
}
exports.notAbsolutePath = notAbsolutePath;
function pageNotFound(path, dir) {
    let msg = `Path '${path}' not found in directory '${dir}'.`;
    let error = new Error(msg);
    error.name = pageNotFound.name;
    error.statusCode = 404;
    return error;
}
exports.pageNotFound = pageNotFound;
function requestNotReadable() {
    let msg = `The request is not readable.`;
    let error = new Error(msg);
    error.name = requestNotReadable.name;
    return error;
}
exports.requestNotReadable = requestNotReadable;
function connectionClose() {
    let msg = `Connection close.`;
    let error = new Error(msg);
    error.name = connectionClose.name;
    return error;
}
exports.connectionClose = connectionClose;
function physicalPathNotExists(physicalPath) {
    let msg = `Physical path '${physicalPath}' is not exists`;
    let error = new Error(msg);
    error.name = physicalPathNotExists.name;
    return error;
}
exports.physicalPathNotExists = physicalPathNotExists;
function virtualPathConfigError(virtualPath, physicalPath) {
    let msg = `Virtual path '${virtualPath}' config error, physical path ${physicalPath} is not exists.`;
    let error = new Error(msg);
    error.name = virtualPathConfigError.name;
    return error;
}
exports.virtualPathConfigError = virtualPathConfigError;
