"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticFileRequestProcessor = void 0;
const path_concat_1 = require("../path-concat");
// import { defaultFileProcessors } from "../file-processors";
const errors_1 = require("../errors");
const path = require("path");
const status_code_1 = require("../status-code");
const error_pages_1 = require("../error-pages");
const fs = require("fs");
const content_types_1 = require("../content-types");
const priority_1 = require("./priority");
const cgi_1 = require("./cgi");
class StaticFileRequestProcessor {
    constructor() {
        this.priority = priority_1.processorPriorities.StaticFileRequestProcessor;
        this._contentTypes = {};
        this._ignorePaths = [`${cgi_1.defaultDynamicPath}/\\S*`];
    }
    /** 获取内容类型 */
    get contentTypes() {
        return this._contentTypes;
    }
    /** 设置内容类型 */
    set contentTypes(value) {
        this._contentTypes = value || {};
    }
    /** 获取静态文件夹路径 */
    get staticPath() {
        return this._staticPath;
    }
    /** 设置静态文件夹路径，如果路径位空，则位网站根目录 */
    set staticPath(value) {
        this._staticPath = value;
    }
    /** 获取忽略的路径 */
    get ignorePaths() {
        return this._ignorePaths;
    }
    /** 设置忽略的路径（正则表达式），如果某些请求的路径不需要处理，设置此参数。 */
    set ignorePaths(value) {
        if (value == null)
            throw errors_1.errors.argumentNull("value");
        if (!Array.isArray(value))
            throw errors_1.errors.argumentTypeIncorrect("value", "Array");
        this._ignorePaths = value;
    }
    async execute(ctx) {
        let virtualPath = ctx.virtualPath;
        if (virtualPath.indexOf(".") < 0) {
            virtualPath = path_concat_1.pathConcat(virtualPath, "index.html");
        }
        console.assert(this.ignorePaths != null && Array.isArray(this.ignorePaths));
        for (let i = 0; i < this.ignorePaths.length; i++) {
            let reg = new RegExp(this.ignorePaths[i]);
            if (reg.test(virtualPath))
                return null;
        }
        var dir = this.staticPath ? ctx.rootDirectory.findDirectory(this.staticPath) : ctx.rootDirectory;
        let physicalPath = null;
        if (dir != null) {
            physicalPath = dir.findFile(virtualPath);
        }
        if (physicalPath == null) {
            return null;
        }
        let p = this.processStaticFile(physicalPath);
        if (p.then == null) {
            p = Promise.resolve(p);
        }
        let r = await p;
        let headers = r.headers || {};
        if (ctx.logLevel == "all") {
            Object.assign(headers, { "physical-path": physicalPath || "" });
        }
        return {
            statusCode: r.statusCode, content: r.content, headers: r.headers
        };
    }
    processStaticFile(physicalPath) {
        return new Promise((resolve, reject) => {
            if (!physicalPath) {
                return resolve({ statusCode: status_code_1.StatusCode.NotFound, content: Buffer.from(error_pages_1.errorPages.NotFound) });
            }
            if (!fs.existsSync(physicalPath)) {
                let text = `Path ${physicalPath} is not exists.`;
                return resolve({ statusCode: 404, content: Buffer.from(text) });
            }
            var ext = path.extname(physicalPath);
            if (!ext)
                return null;
            console.assert(ext.startsWith("."));
            let contentType = this.contentTypes[ext] || content_types_1.defaultContentTypes[ext];
            if (!contentType)
                throw errors_1.errors.fileTypeNotSupport(ext);
            let stat = fs.statSync(physicalPath);
            let data = fs.createReadStream(physicalPath);
            let mtime = stat.mtime.valueOf();
            let headers = {
                "Content-Type": contentType,
                "Etag": JSON.stringify([stat.ino, stat.size, mtime].join('-')),
                "Last-Modified": stat.mtime.toDateString(),
            };
            resolve({ statusCode: status_code_1.StatusCode.OK, content: data, headers });
        });
    }
}
exports.StaticFileRequestProcessor = StaticFileRequestProcessor;
