"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.MVCRequestProcessor = void 0;
const maishu_node_web_server_1 = require("maishu-node-web-server");
const controller_loader_1 = require("./controller-loader");
const errors = require("./errors");
const attributes_1 = require("./attributes");
const action_results_1 = require("./action-results");
class MVCRequestProcessor {
    constructor() {
        this.priority = MVCRequestProcessor.priority;
        // #serverContextData: any;
        this._controllerLoaders = {};
        this.options = {};
    }
    /** 获取控制器文件夹物理路径 */
    get controllerDirectories() {
        return this.options.controllersDirectories;
    }
    /** 设置控制器文件夹物理路径 */
    set controllerDirectories(value) {
        this.options.controllersDirectories = value;
    }
    get contextData() {
        return this.options.contextData;
    }
    set contextData(value) {
        this.options.contextData = value;
    }
    getControllerLoaders(rootDir, logger) {
        // let controllerDirectories = (this.controllerDirectories || []).map(o => new VirtualDirectory(o));
        // let defaultDir = rootDir.findDirectory("controllers");
        // if (controllerDirectories.length == 0 && defaultDir != null) {
        //     controllerDirectories.push(defaultDir);
        // }
        // for (let i in controllerDirectories) {
        //     let physicalPath = controllerDirectories[i].physicalPath;
        //     if (this.#controllerLoaders[physicalPath] != null)
        //         continue;
        //     var dir = controllerDirectories[i];
        //     this.#controllerLoaders[physicalPath] = new ControllerLoader(dir);
        // }
        let controllerDirectories = this.controllerDirectories || [];
        for (let i = 0; i < controllerDirectories.length; i++) {
            let dir = rootDir.findDirectory(controllerDirectories[i]);
            if (dir == null) {
                logger.info(`Virtual path ${controllerDirectories[i]} is not exists.`);
                continue;
            }
            if (this._controllerLoaders[dir.physicalPath] != null)
                continue;
            this._controllerLoaders[dir.physicalPath] = new controller_loader_1.ControllerLoader(dir);
        }
        return this._controllerLoaders;
    }
    execute(args) {
        let pkg = require("../package.json");
        let logger = maishu_node_web_server_1.getLogger(pkg.name, args.logLevel);
        let controllerLoaders = this.getControllerLoaders(args.rootDirectory, logger);
        if (controllerLoaders == null)
            return null;
        let result;
        for (let key in controllerLoaders) {
            result = controllerLoaders[key].findAction(args.virtualPath);
            if (result != null)
                break;
        }
        if (result == null)
            return null;
        let context = args;
        context.data = this.contextData || {};
        return this.executeAction(context, result.controller, result.action, result.routeData)
            .then(r => {
            let StatusCode = "statusCode";
            let Headers = "headers";
            let Content = "content";
            // if (r == null)
            //     return Promise.reject(errors.actionResultNull(context.req.url || ""));
            if (r != null && r[Content] != null && (r[StatusCode] != null || r[Headers] != null)) {
                return r;
            }
            if (typeof r == "string")
                return { content: r };
            r = r === undefined ? null : r;
            return { content: JSON.stringify(r), headers: { "Content-Type": action_results_1.contentTypes.applicationJSON } };
        })
            .then(r => {
            if (context.logLevel == "all") {
                r.headers = r.headers || {};
                r.headers["controller-physical-path"] = result?.controllerPhysicalPath || "";
                if (typeof result?.action == "function")
                    r.headers["member-name"] = result?.action.name;
            }
            return r;
        });
    }
    executeAction(context, controller, action, routeData) {
        if (!controller)
            throw errors.arugmentNull("controller");
        if (!action)
            throw errors.arugmentNull("action");
        routeData = routeData || {};
        let parameterDecoders = [];
        parameterDecoders = Reflect.getMetadata(attributes_1.metaKeys.parameter, controller, action.name) || [];
        parameterDecoders.sort((a, b) => a.parameterIndex < b.parameterIndex ? -1 : 1);
        let parameters = [];
        return Promise.all(parameterDecoders.map(p => p.createParameter(context, routeData))).then(r => {
            parameters = r;
            let actionResult = action.apply(controller, parameters);
            let p = actionResult;
            if (p == null || p.then == null) {
                p = Promise.resolve(actionResult);
            }
            return p;
        }).finally(() => {
            for (let i = 0; i < parameterDecoders.length; i++) {
                let d = parameterDecoders[i];
                if (d.disposeParameter) {
                    d.disposeParameter(parameters[d.parameterIndex]);
                }
            }
        });
    }
}
exports.MVCRequestProcessor = MVCRequestProcessor;
MVCRequestProcessor.priority = maishu_node_web_server_1.processorPriorities.ProxyRequestProcessor + 1;
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function register(type, arg1, actions) {
    let controllerName = undefined;
    if (typeof arg1 == "string")
        controllerName = arg1;
    __decorate([attributes_1.controller(controllerName)], type);
    actions = actions || {};
    for (let key in actions) {
        __decorate([attributes_1.action(actions[key] || key)], type.prototype, key);
    }
}
exports.register = register;
