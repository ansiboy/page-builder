/*!
 * WUZHUI-HELPER v1.9.4
 * https://github.com/ansiboy/wuzhui-helper
 * 
 * Copyright (c) 2016-2018, shu mai <ansiboy@163.com>
 * Licensed under the MIT License.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("maishu-dilu"), require("maishu-ui-toolkit"));
	else if(typeof define === 'function' && define.amd)
		define(["maishu-dilu", "maishu-ui-toolkit"], factory);
	else if(typeof exports === 'object')
		exports["wuzhui-helper"] = factory(require("maishu-dilu"), require("maishu-ui-toolkit"));
	else
		root["wuzhui-helper"] = factory(root["maishu-dilu"], root["maishu-ui-toolkit"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_maishu_dilu__, __WEBPACK_EXTERNAL_MODULE_maishu_ui_toolkit__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./out-es5/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/maishu-wuzhui/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/maishu-wuzhui/dist/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * 
 *  maishu-wuzhui v1.17.74
 *  https://github.com/ansiboy/wuzhui
 *  
 *  Copyright (c) 2016-2018, shu mai <ansiboy@163.com>
 *  Licensed under the MIT License.
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! maishu-toolkit */ "./node_modules/maishu-wuzhui/node_modules/maishu-toolkit/dist/index.js"));
	else {}
})(window, function(__WEBPACK_EXTERNAL_MODULE_maishu_toolkit__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./out/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./out/Control.js":
/*!************************!*\
  !*** ./out/Control.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
const Utility_1 = __webpack_require__(/*! ./Utility */ "./out/Utility.js");
// namespace wuzhui {
const CONTROL_DATA_NAME = 'Control';
class Control {
    constructor(element) {
        if (!element)
            throw Errors_1.Errors.argumentNull('element');
        this._element = element;
        Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME, this);
    }
    get visible() {
        return Utility_1.ElementHelper.isVisible(this._element);
    }
    set visible(value) {
        if (value) {
            Utility_1.ElementHelper.showElement(this._element);
        }
        else {
            Utility_1.ElementHelper.hideElement(this._element);
        }
    }
    get element() {
        return this._element;
    }
    appendChild(child, index) {
        if (child == null)
            throw Errors_1.Errors.argumentNull('child');
        let childElement;
        if (child.tagName != null) {
            childElement = child;
        }
        else {
            childElement = child.element;
        }
        let placeChild;
        if (index != null) {
            placeChild = this.element.children[index];
        }
        if (placeChild == null) {
            this.element.appendChild(childElement);
        }
        else {
            this.element.insertBefore(childElement, placeChild);
        }
    }
    style(value) {
        Utility_1.applyStyle(this.element, value);
    }
    static getControlByElement(element) {
        return Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME);
    }
}
exports.Control = Control;
// }


/***/ }),

/***/ "./out/DropDown.js":
/*!*************************!*\
  !*** ./out/DropDown.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _dataSource, _options, _nameField, _valueField;
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
class Dropdown extends Control_1.Control {
    constructor(params) {
        super(params.element);
        _dataSource.set(this, void 0);
        _options.set(this, {});
        _nameField.set(this, void 0);
        _valueField.set(this, void 0);
        if (params == null)
            throw Errors_1.Errors.argumentNull('params');
        if (params.dataSource == null)
            throw Errors_1.Errors.argumentFieldNull('params', 'dataSource');
        if (params.element == null)
            throw Errors_1.Errors.argumentFieldNull('params', 'element');
        if (params.nameField == null)
            throw Errors_1.Errors.argumentFieldNull("params", "nameField");
        if (params.valueField == null)
            throw Errors_1.Errors.argumentFieldNull("params", "valueField");
        __classPrivateFieldSet(this, _nameField, params.nameField);
        __classPrivateFieldSet(this, _valueField, params.valueField);
        this.init(params);
    }
    get dataSource() {
        return __classPrivateFieldGet(this, _dataSource);
    }
    init(params) {
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldSet(this, _dataSource, params.dataSource);
            let r = yield params.dataSource.select({});
            r.dataItems.forEach(dataItem => {
                this.addOptionElement(dataItem);
            });
            __classPrivateFieldGet(this, _dataSource).inserted.add(args => {
                this.addOptionElement(args.dataItem);
            });
            __classPrivateFieldGet(this, _dataSource).deleted.add(args => {
                let pk = this.primaryKeyValue(args.dataItem);
                let option = __classPrivateFieldGet(this, _options)[pk];
                if (option) {
                    this.element.removeChild(option);
                }
            });
            __classPrivateFieldGet(this, _dataSource).updated.add(args => {
                let pk = this.primaryKeyValue(args.dataItem);
                let option = __classPrivateFieldGet(this, _options)[pk];
                if (option && args.dataItem[__classPrivateFieldGet(this, _nameField)] != null) {
                    option.innerHTML = args.dataItem[__classPrivateFieldGet(this, _nameField)];
                }
            });
        });
    }
    addOptionElement(dataItem) {
        console.assert(__classPrivateFieldGet(this, _nameField) != null);
        console.assert(__classPrivateFieldGet(this, _valueField) != null);
        let name = dataItem[__classPrivateFieldGet(this, _nameField)];
        let value = dataItem[__classPrivateFieldGet(this, _valueField)];
        let option = document.createElement('option');
        option.innerHTML = name || "";
        option.value = value || "";
        this.element.appendChild(option);
        let pk = this.primaryKeyValue(dataItem);
        __classPrivateFieldGet(this, _options)[pk] = option;
        return option;
    }
    primaryKeyValue(dataItem) {
        let r = __classPrivateFieldGet(this, _dataSource).primaryKeys.map(pk => dataItem[pk]).join("-");
        return r;
    }
}
exports.Dropdown = Dropdown;
_dataSource = new WeakMap(), _options = new WeakMap(), _nameField = new WeakMap(), _valueField = new WeakMap();


/***/ }),

/***/ "./out/ElementProvider.js":
/*!********************************!*\
  !*** ./out/ElementProvider.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultElementProvider = {
    createRowElement: () => document.createElement("tr"),
    createCellElement: (type = "body") => type == "header" ? document.createElement("th") : document.createElement('td'),
    // createViewElement: () => document.createElement("table"),
    createHeaderElement: () => document.createElement("thead"),
    createFooterElement: () => document.createElement("tfoot"),
    createBodyElement: () => document.createElement("tbody"),
};


/***/ }),

/***/ "./out/Errors.js":
/*!***********************!*\
  !*** ./out/Errors.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// namespace wuzhui {
// export class Errors {
//     static notImplemented(message?: string) {
//         message = message || "Not implemented";
//         return new Error(message);
//     }
//     static argumentNull(paramName) {
//         return new Error("Argument '" + paramName + "' can not be null.");
//     }
//     static controllBelonsAnother() {
//         return new Error("The control is belongs another control.");
//     }
//     static columnsCanntEmpty() {
//         return new Error("Columns cannt empty.");
//     }
//     static dataSourceCanntInsert() {
//         return new Error("DataSource can not insert.");
//     }
//     static dataSourceCanntUpdate() {
//         return new Error("DataSource can not update.");
//     }
//     static dataSourceCanntDelete() {
//         return new Error("DataSource can not delete.");
//     }
//     static primaryKeyNull(key: string) {
//         let msg = `Primary key named '${key}' value is null.`;
//         return new Error(msg);
//     }
//     static queryResultTypeError() {
//         let msg = 'Type of the query result is expected as Array or DataSourceSelectResult.';
//         return new Error(msg);
//     }
//     static argumentFieldNull(argumentName: string, fieldName: string) {
//         let msg = `Argument ${argumentName} ${fieldName} field can not be null or empty.`
//         return new Error(msg);
//     }
// }
// }
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
exports.Errors = Object.assign(maishu_toolkit_1.errors, {
    columnsCanntEmpty() {
        return new Error("Columns cannt empty.");
    },
    notImplemented(message) {
        message = message || "Not implemented";
        return new Error(message);
    },
    gridViewNull() {
        let msg = "Grid view is null.";
        return new Error(msg);
    }
});


/***/ }),

/***/ "./out/GridView.js":
/*!*************************!*\
  !*** ./out/GridView.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
const NumberPagingBar_1 = __webpack_require__(/*! ./NumberPagingBar */ "./out/NumberPagingBar.js");
const Utility_1 = __webpack_require__(/*! ./Utility */ "./out/Utility.js");
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
const index_1 = __webpack_require__(/*! ./cells/index */ "./out/cells/index.js");
const index_2 = __webpack_require__(/*! ./rows/index */ "./out/rows/index.js");
const ElementProvider_1 = __webpack_require__(/*! ./ElementProvider */ "./out/ElementProvider.js");
const maishu_toolkit_2 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class GridView extends Control_1.Control {
    constructor(params, elementProvider = ElementProvider_1.defaultElementProvider) {
        super(params.element);
        this.emptyDataHTML = '暂无记录';
        this.initDataHTML = '数据正在加载中...';
        this.loadFailHTML = '加载数据失败，点击重新加载。';
        //========================================================
        // 样式
        // headerStyle: string;
        // footerStyle: string;
        // rowStyle: string;
        // alternatingRowStyle: string;
        //private emptyDataRowStyle: string;
        //========================================================
        this.rowCreated = new maishu_toolkit_1.Callback(); //callbacks<GridView<T>, { row: GridViewRow }>();
        this.elementProvider = elementProvider;
        params = Object.assign({
            showHeader: true, showFooter: false,
            showPagingBar: true
        }, params);
        this.selectArguments = new maishu_toolkit_1.DataSourceSelectArguments();
        if (params.pageSize)
            this.selectArguments.maximumRows = params.pageSize;
        this._params = params;
        this._columns = params.columns || [];
        if (this._columns.length == 0)
            throw Errors_1.Errors.columnsCanntEmpty();
        for (var i = 0; i < this._columns.length; i++) {
            var column = this._columns[i];
            column.gridView = this;
        }
        this._dataSource = params.dataSource;
        this._dataSource.selected.add(args => this.on_selectedExecuted(args.selectResult));
        this._dataSource.updated.add(args => this.on_updateExecuted(args.dataItem));
        this._dataSource.inserted.add(args => this.on_insertExecuted(args.dataItem, args.index));
        this._dataSource.deleted.add(args => this.on_deleteExecuted(args.dataItem));
        this._dataSource.selecting.add(args => {
            let display = this._emtpyRow.element.style.display;
            if (display != 'none') {
                this._emtpyRow.element.children[0].innerHTML = this.initDataHTML;
            }
        });
        this._dataSource.error.add(args => {
            if (args.error.method == 'select') {
                this.renderDataItems([]);
                var element = this._emtpyRow.cells[0].element;
                element.innerHTML = this.loadFailHTML;
                element.onclick = () => {
                    this._dataSource.select(this.selectArguments);
                };
                args.error.handled = true;
                console.error(args.error.message);
                console.log(args.error.stack);
            }
        });
        if (params.showHeader) {
            this._header = new Control_1.Control(this.elementProvider.createHeaderElement());
            this.appendChild(this._header);
            this.appendHeaderRow();
        }
        this.emptyDataHTML = params.emptyDataHTML || this.emptyDataHTML;
        this.initDataHTML = params.initDataHTML || this.initDataHTML;
        this._body = new Control_1.Control(this.elementProvider.createBodyElement());
        this.appendChild(this._body);
        this.appendEmptyRow();
        let showPagingBar = params.showPagingBar;
        if (params.showFooter || showPagingBar) {
            this._footer = new Control_1.Control(this.elementProvider.createFooterElement());
            this.appendChild(this._footer);
            if (params.showFooter)
                this.appendFooterRow();
            if (showPagingBar) {
                this.createPagingBar(params.pagerSettings);
                // this.pagingBar.selectArguments.maximumRows = params.pageSize;
            }
        }
        // this.selectArguments = this.pagingBar ? this.pagingBar.selectArguments : new DataSourceSelectArguments();
        // if (params.pageSize)
        //     this.selectArguments.maximumRows = params.pageSize;
        this.dataSource.select(this.selectArguments);
    }
    createPagingBar(pagerSettings) {
        var pagingBarContainer = this.elementProvider.createRowElement(); //document.createElement('tr');
        var pagingBarElement = this.elementProvider.createCellElement("footer"); //document.createElement('td');
        // pagingBarElement.className = GridView.pagingBarClassName;
        maishu_toolkit_2.HTML.addClassName(pagingBarElement, GridView.pagingBarClassName);
        if (pagingBarElement.tagName == "TD")
            pagingBarElement.setAttribute("colspan", `${this.columns.length}`); // pagingBarElement.colSpan = this.columns.length;
        pagingBarContainer.appendChild(pagingBarElement);
        console.assert(this._footer != null);
        this._footer.appendChild(pagingBarContainer);
        this.pagingBar = new NumberPagingBar_1.DataSourcePagingBar({ dataSource: this.dataSource, element: pagingBarElement, pagerSettings });
    }
    get columns() {
        return this._columns;
    }
    get dataSource() {
        return this._dataSource;
    }
    appendEmptyRow() {
        this._emtpyRow = new index_2.GridViewRow(index_2.GridViewRowType.Empty, this.elementProvider.createRowElement(), this);
        this._emtpyRow.element.className = GridView.emptyRowClassName;
        let cell = new index_1.GridViewCell(this.elementProvider.createCellElement("body"));
        cell.element.setAttribute("colspan", this.columns.length.toString());
        if (this._params.emptyDataRowStyle) {
            Utility_1.applyStyle(cell.element, this._params.emptyDataRowStyle);
        }
        this._emtpyRow.appendChild(cell);
        this._body.appendChild(this._emtpyRow);
        this.rowCreated.fire({ row: this._emtpyRow });
    }
    appendDataRow(dataItem, index) {
        var row = new index_2.GridViewDataRow(this, dataItem, this.elementProvider.createRowElement());
        maishu_toolkit_2.HTML.addClassName(row.element, GridView.dataRowClassName);
        this._body.appendChild(row, index);
        let cells = row.cells;
        for (let j = 0; j < cells.length; j++) {
            let cell = cells[j];
            if (cell.render != null) {
                cell.render(dataItem);
            }
        }
        this.rowCreated.fire({ row });
        if (this._emtpyRow.element.style.display != 'none')
            this.hideEmptyRow();
        return row;
    }
    on_sort(sender, args) {
        if (this._currentSortCell != null && this._currentSortCell != sender) {
            this._currentSortCell.clearSortIcon();
        }
        this._currentSortCell = sender;
    }
    appendHeaderRow() {
        var row = new index_2.GridViewRow(index_2.GridViewRowType.Header, this.elementProvider.createRowElement(), this);
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            let cell = column.createHeaderCell(this.elementProvider.createCellElement("header"));
            if (cell.type == "GridViewHeaderCell") {
                cell.sorting.add(a => this.on_sort(cell, a));
            }
            row.appendChild(cell);
            cell.visible = this.columns[i].visible;
        }
        this._header.appendChild(row);
    }
    appendFooterRow() {
        var row = new index_2.GridViewRow(index_2.GridViewRowType.Footer, this.elementProvider.createRowElement(), this);
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            let cell = column.createFooterCell(this.elementProvider.createCellElement("footer"));
            row.appendChild(cell);
            cell.visible = column.visible;
        }
        this._footer.appendChild(row);
    }
    renderDataItems(items) {
        var rows = this._body.element.querySelectorAll(`.${GridView.dataRowClassName}`);
        for (let i = 0; i < rows.length; i++)
            this._body.element.removeChild(rows[i]);
        if (items.length == 0) {
            this.showEmptyRow();
            return;
        }
        for (let i = 0; i < items.length; i++) {
            this.appendDataRow(items[i]);
        }
    }
    on_selectedExecuted(e) {
        let dataItems = e.dataItems;
        if (this._params.translate) {
            dataItems = this._params.translate(dataItems);
        }
        this.renderDataItems(dataItems);
    }
    on_updateExecuted(item) {
        console.assert(item != null);
        let dataItems = [];
        for (let i = 0; i < this._body.element.children.length; i++) {
            let row_element = this._body.element.children[i];
            let row = Control_1.Control.getControlByElement(row_element);
            ;
            if (row.rowType != index_2.GridViewRowType.Data)
                continue;
            let dataItem = row.dataItem;
            dataItems.push(dataItem);
            if (!this.dataSource.isSameItem(dataItem, item))
                continue;
            if (dataItem != item) {
                Object.assign(dataItem, item);
            }
            let cells = row.cells;
            for (let j = 0; j < cells.length; j++) {
                let cell = cells[j];
                if (cell.type == "GridViewDataCell") {
                    cell.render(dataItem);
                }
                else if (cell.type == "GridViewEditableCell") {
                    cell.render(dataItem);
                }
            }
        }
        if (this._params.translate) {
            dataItems = this._params.translate(dataItems);
            this.renderDataItems(dataItems);
        }
    }
    on_insertExecuted(item, index) {
        if (index == null)
            index = 0;
        if (!this._params.translate) {
            this.appendDataRow(item, index);
            return;
        }
        let dataItems = [item];
        for (let i = 0; i < this._body.element.children.length; i++) {
            let row_element = this._body.element.children[i];
            let row = Control_1.Control.getControlByElement(row_element);
            ;
            if (row.rowType != index_2.GridViewRowType.Data)
                continue;
            let dataItem = row.dataItem;
            dataItems.push(dataItem);
        }
        dataItems = this._params.translate(dataItems);
        this.renderDataItems(dataItems);
    }
    on_deleteExecuted(item) {
        let rows = this._body.element.children;
        let dataRows = new Array();
        for (let i = 0; i < rows.length; i++) {
            let row = Control_1.Control.getControlByElement(rows[i]);
            if ((row.rowType == index_2.GridViewRowType.Data))
                dataRows.push(row);
        }
        if (this._params.translate) {
            let dataItems = dataRows.map(o => o.dataItem)
                .filter(o => !this.dataSource.isSameItem(o, item));
            dataItems = this._params.translate(dataItems);
            this.renderDataItems(dataItems);
            return;
        }
        for (let i = 0; i < dataRows.length; i++) {
            let dataRow = dataRows[i];
            if (!this.dataSource.isSameItem(item, dataRow.dataItem))
                continue;
            dataRow.element.remove();
            if (dataRows.length == 1)
                this.showEmptyRow();
        }
    }
    showEmptyRow() {
        this._emtpyRow.element.children[0].innerHTML = this.emptyDataHTML;
        this._emtpyRow.element.style.removeProperty('display');
    }
    hideEmptyRow() {
        this._emtpyRow.element.style.display = 'none';
    }
}
exports.GridView = GridView;
GridView.emptyRowClassName = 'empty';
GridView.dataRowClassName = 'data';
GridView.pagingBarClassName = 'pagingBar';
// }


/***/ }),

/***/ "./out/NumberPagingBar.js":
/*!********************************!*\
  !*** ./out/NumberPagingBar.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
// namespace wuzhui {
var PagerPosition;
(function (PagerPosition) {
    PagerPosition[PagerPosition["Bottom"] = 0] = "Bottom";
    PagerPosition[PagerPosition["Top"] = 1] = "Top";
    PagerPosition[PagerPosition["TopAndBottom"] = 2] = "TopAndBottom";
})(PagerPosition = exports.PagerPosition || (exports.PagerPosition = {}));
;
class PagingBar {
    init(dataSource) {
        this._pageIndex = 0;
        var pagingBar = this;
        pagingBar.totalRowCount = 1000000;
        if (dataSource) {
            dataSource.selected.add(args => {
                this._selectArguments = args.selectArguments;
                pagingBar.pageSize = args.selectArguments.maximumRows;
                var totalRowCount = args.selectResult.totalRowCount;
                if (totalRowCount != null && totalRowCount >= 0) {
                    pagingBar.totalRowCount = totalRowCount;
                }
                var startRowIndex = this._selectArguments.startRowIndex;
                if (startRowIndex == null || startRowIndex <= 0)
                    startRowIndex = 0;
                pagingBar.pageIndex = Math.floor(startRowIndex / pagingBar.pageSize);
                pagingBar.render();
            });
            dataSource.deleted.add(function () {
                pagingBar.totalRowCount = pagingBar.totalRowCount - 1;
                pagingBar.render();
            });
            dataSource.inserted.add(function () {
                pagingBar.totalRowCount = pagingBar.totalRowCount + 1;
                pagingBar.render();
            });
        }
    }
    get selectArguments() {
        console.assert(this._selectArguments != null);
        return this._selectArguments;
    }
    get pageCount() {
        var pageCount = Math.ceil(this.totalRowCount / this.pageSize);
        return pageCount;
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
    }
    get pageIndex() {
        return this._pageIndex;
    }
    set pageIndex(value) {
        this._pageIndex = value;
    }
    get totalRowCount() {
        return this._totalRowCount;
    }
    set totalRowCount(value) {
        this._totalRowCount = value;
    }
    // Virtual Method
    render() {
        throw Errors_1.Errors.notImplemented('The table-row render method is not implemented.');
    }
}
exports.PagingBar = PagingBar;
class DataSourcePagingBar extends PagingBar {
    constructor(params) {
        if (!params.dataSource)
            throw Errors_1.Errors.argumentNull('dataSource');
        if (!params.element)
            throw Errors_1.Errors.argumentNull('element');
        let pagerSettings = Object.assign(DataSourcePagingBar.defaultPagerSettings, params.pagerSettings || {});
        super();
        this.dataSource = params.dataSource;
        this.pagerSettings = pagerSettings;
        this.element = params.element;
        this.numberButtons = new Array();
        this.createButton = this.createPagingButton;
        this.createLabel = this.createTotalLabel;
        let buttonContainer = pagerSettings.buttonContainerWraper ?
            document.createElement(pagerSettings.buttonContainerWraper) :
            document.createElement('div');
        buttonContainer.className = pagerSettings.buttonContainerClassName || "buttons";
        this.element.appendChild(buttonContainer);
        this.createPreviousButtons(buttonContainer);
        this.createNumberButtons(buttonContainer);
        this.createNextButtons(buttonContainer);
        if (this.pagerSettings.showTotal) {
            this.totalElement = this.createLabel();
            this.totalElement.visible = false;
        }
        this.init(params.dataSource);
    }
    createPagingButton(container) {
        var pagerSettings = this.pagerSettings;
        let button = document.createElement('a');
        button.href = 'javascript:';
        if (this.pagerSettings.buttonWrapper) {
            let w = document.createElement(this.pagerSettings.buttonWrapper);
            w.appendChild(button);
            container.appendChild(w);
        }
        else {
            container.appendChild(button);
        }
        let result = {
            _button: button,
            get visible() {
                let button = this._button;
                return button.style.display != 'none';
            },
            set visible(value) {
                let button = this._button;
                let element = pagerSettings.buttonWrapper ? button.parentElement : button;
                if (value) {
                    element.style.removeProperty('display');
                }
                else {
                    element.style.display = 'none';
                }
            },
            get pageIndex() {
                let button = this._button;
                return new Number(button.getAttribute('pageIndex')).valueOf();
            },
            set pageIndex(value) {
                let button = this._button;
                button.setAttribute('pageIndex', value);
            },
            get text() {
                let button = this._button;
                return button.innerHTML;
            },
            set text(value) {
                let button = this._button;
                button.innerHTML = value;
            },
            get active() {
                let button = this._button;
                return button.href != null;
            },
            set active(value) {
                let button = this._button;
                if (value == true) {
                    button.removeAttribute('href');
                    if (pagerSettings.activeButtonClassName) {
                        // button.className = pagerSettings.activeButtonClassName;
                        this.setClassName(pagerSettings.activeButtonClassName);
                    }
                    return;
                }
                button.href = 'javascript:';
                if (pagerSettings.buttonClassName)
                    this.setClassName(pagerSettings.buttonClassName);
                else
                    this.setClassName(null);
            },
            setClassName(value) {
                let button = this._button;
                let element = pagerSettings.buttonWrapper ? button.parentElement : button;
                if (value)
                    element.className = value;
                else
                    element.removeAttribute('class');
            },
            onclick: null
        };
        button.onclick = () => {
            if (result.onclick) {
                result.onclick(result, this);
            }
        };
        return result;
    }
    createTotalLabel() {
        let totalElement = document.createElement('div');
        totalElement.className = 'total';
        let textElement = document.createElement('span');
        textElement.className = 'text';
        textElement.innerHTML = '总记录：';
        totalElement.appendChild(textElement);
        let numberElement = document.createElement('span');
        numberElement.className = 'number';
        totalElement.appendChild(numberElement);
        this.element.appendChild(totalElement);
        return {
            get text() {
                return numberElement.innerHTML;
            },
            set text(value) {
                numberElement.innerHTML = value;
            },
            get visible() {
                let display = totalElement.style.display;
                return display != 'none';
            },
            set visible(value) {
                if (value == true)
                    totalElement.style.display = 'block';
                else
                    totalElement.style.display = 'node';
            }
        };
    }
    createPreviousButtons(buttonContainer) {
        this.firstPageButton = this.createButton(buttonContainer);
        this.firstPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.firstPageButton.text = this.pagerSettings.firstPageText;
        this.firstPageButton.visible = false;
        this.previousPageButton = this.createButton(buttonContainer);
        this.previousPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.previousPageButton.text = this.pagerSettings.previousPageText;
        this.previousPageButton.visible = false;
    }
    createNextButtons(buttonContainer) {
        this.nextPageButton = this.createButton(buttonContainer);
        this.nextPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.nextPageButton.text = this.pagerSettings.nextPageText;
        this.nextPageButton.visible = false;
        this.lastPageButton = this.createButton(buttonContainer);
        this.lastPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.lastPageButton.text = this.pagerSettings.lastPageText;
        this.lastPageButton.visible = false;
    }
    createNumberButtons(buttonContainer) {
        let pagingBar = this;
        let buttonCount = this.pagerSettings.pageButtonCount;
        for (let i = 0; i < buttonCount; i++) {
            let button = this.createButton(buttonContainer);
            button.onclick = DataSourcePagingBar.on_buttonClick;
            this.numberButtons[i] = button;
        }
        this.numberButtons.forEach(btn => {
            btn.onclick = () => DataSourcePagingBar.on_buttonClick(btn, pagingBar);
        });
    }
    static on_buttonClick(button, pagingBar) {
        let pageIndex = button.pageIndex;
        if (!pageIndex == null) {
            return;
        }
        let args = pagingBar.selectArguments;
        args.maximumRows = pagingBar.pageSize;
        args.startRowIndex = pageIndex * pagingBar.pageSize;
        pagingBar.pageIndex = pageIndex;
        pagingBar.dataSource.select(pagingBar.selectArguments);
    }
    render() {
        var pagerSettings = this.pagerSettings;
        var buttonCount = pagerSettings.pageButtonCount;
        let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);
        let pagingBarCount = Math.ceil(this.pageCount / buttonCount);
        this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount;
        this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;
        this.firstPageButton.pageIndex = 0;
        this.lastPageButton.pageIndex = this.pageCount - 1;
        for (let i = 0; i < this.numberButtons.length; i++) {
            let pageIndex = pagingBarIndex * buttonCount + i;
            if (pageIndex < this.pageCount) {
                this.numberButtons[i].pageIndex = pageIndex;
                this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();
                this.numberButtons[i].visible = true;
                this.numberButtons[i].active = pageIndex == this.pageIndex;
            }
            else {
                this.numberButtons[i].visible = false;
            }
        }
        if (this.totalElement) {
            this.totalElement.text = this.totalRowCount;
            this.totalElement.visible = true;
        }
        this.firstPageButton.visible = false;
        this.previousPageButton.visible = false;
        this.lastPageButton.visible = false;
        this.nextPageButton.visible = false;
        if (pagingBarIndex > 0) {
            this.firstPageButton.visible = true;
            this.previousPageButton.visible = true;
        }
        if (pagingBarIndex < pagingBarCount - 1) {
            this.lastPageButton.visible = true;
            this.nextPageButton.visible = true;
        }
    }
}
exports.DataSourcePagingBar = DataSourcePagingBar;
DataSourcePagingBar.defaultPagerSettings = {
    pageButtonCount: 10,
    firstPageText: '<<',
    lastPageText: '>>',
    nextPageText: '...',
    previousPageText: '...',
    showTotal: true,
};
// export class NumberPagingBar extends PagingBar {
//     // private dataSource: DataSource<{}>;
//     private pagerSettings: PagerSettings;
//     private element: HTMLElement;
//     private totalElement: PagingTotalLabel;
//     private numberButtons: Array<NumberPagingButton<NumberPagingBar>>;
//     private firstPageButton: NumberPagingButton<NumberPagingBar>;
//     private previousPageButton: NumberPagingButton<NumberPagingBar>;
//     private nextPageButton: NumberPagingButton<NumberPagingBar>;
//     private lastPageButton: NumberPagingButton<NumberPagingBar>;
//     private createLabel: () => PagingTotalLabel;
//     private createButton: (container: HTMLElement) => NumberPagingButton<NumberPagingBar>;
//     private loadData: (pageIndex: number) => void;
//     constructor(params: {
//         loadData: (pageIndex: number) => void, element: HTMLElement, pagerSettings?: PagerSettings,
//         selectArguments?: DataSourceSelectArguments
//     }) {
//         if (!params.loadData) throw Errors.argumentNull('loadData');
//         if (!params.element) throw Errors.argumentNull('element');
//         let pagerSettings = Object.assign(<PagerSettings>{
//             pageButtonCount: 10,
//             firstPageText: '<<',
//             lastPageText: '>>',
//             nextPageText: '...',
//             previousPageText: '...',
//             showTotal: true,
//         }, params.pagerSettings || {});
//         super();
//         this.loadData = params.loadData;
//         this.pagerSettings = pagerSettings;
//         this.element = params.element;
//         this.numberButtons = new Array<NumberPagingButton<NumberPagingBar>>();
//         this.createButton = this.createPagingButton;
//         this.createLabel = this.createTotalLabel;
//         let buttonContainer = pagerSettings.buttonContainerWraper ?
//             document.createElement(pagerSettings.buttonContainerWraper) :
//             document.createElement('div');
//         buttonContainer.className = pagerSettings.buttonContainerClassName || "buttons";
//         this.element.appendChild(buttonContainer);
//         this.createPreviousButtons(buttonContainer);
//         this.createNumberButtons(buttonContainer);
//         this.createNextButtons(buttonContainer);
//         if (this.pagerSettings.showTotal) {
//             this.totalElement = this.createLabel();
//             this.totalElement.visible = false;
//         }
//         this.init(null, params.selectArguments);
//     }
//     private createPagingButton(container: HTMLElement): NumberPagingButton<NumberPagingBar> {
//         var pagerSettings = this.pagerSettings;
//         let button = document.createElement('a');
//         button.href = 'javascript:';
//         if (this.pagerSettings.buttonWrapper) {
//             let w = document.createElement(this.pagerSettings.buttonWrapper);
//             w.appendChild(button);
//             container.appendChild(w);
//         }
//         else {
//             container.appendChild(button);
//         }
//         let result = {
//             _button: button,
//             get visible(): boolean {
//                 let button = this._button as HTMLAnchorElement;
//                 return button.style.display != 'none';
//             },
//             set visible(value: boolean) {
//                 let button = this._button as HTMLAnchorElement;
//                 let element = pagerSettings.buttonWrapper ? button.parentElement : button;
//                 if (value) {
//                     element.style.removeProperty('display');
//                 }
//                 else {
//                     element.style.display = 'none';
//                 }
//             },
//             get pageIndex(): number {
//                 let button = this._button as HTMLAnchorElement;
//                 return new Number(button.getAttribute('pageIndex')).valueOf();
//             },
//             set pageIndex(value: number) {
//                 let button = this._button as HTMLAnchorElement;
//                 button.setAttribute('pageIndex', value as any);
//             },
//             get text(): string {
//                 let button = this._button as HTMLAnchorElement;
//                 return button.innerHTML;
//             },
//             set text(value) {
//                 let button = this._button as HTMLAnchorElement;
//                 button.innerHTML = value;
//             },
//             get active(): boolean {
//                 let button = this._button as HTMLAnchorElement;
//                 return button.href != null;
//             },
//             set active(value: boolean) {
//                 let button = this._button as HTMLAnchorElement;
//                 if (value == true) {
//                     button.removeAttribute('href');
//                     if (pagerSettings.activeButtonClassName) {
//                         // button.className = pagerSettings.activeButtonClassName;
//                         this.setClassName(pagerSettings.activeButtonClassName)
//                     }
//                     return;
//                 }
//                 button.href = 'javascript:';
//                 if (pagerSettings.buttonClassName)
//                     this.setClassName(pagerSettings.buttonClassName);
//                 else
//                     this.setClassName(null);
//             },
//             setClassName(value: string) {
//                 let button = this._button as HTMLAnchorElement;
//                 let element = pagerSettings.buttonWrapper ? button.parentElement : button;
//                 if (value)
//                     element.className = value;
//                 else
//                     element.removeAttribute('class');
//             },
//             onclick: null as NumberPagingButtonClickEvent<NumberPagingBar> | null
//         };
//         button.onclick = () => {
//             if (result.onclick) {
//                 result.onclick(result, this);
//             }
//         };
//         return result;
//     }
//     private createTotalLabel() {
//         let totalElement = document.createElement('div');
//         totalElement.className = 'total';
//         let textElement = document.createElement('span');
//         textElement.className = 'text';
//         textElement.innerHTML = '总记录：';
//         totalElement.appendChild(textElement);
//         let numberElement = document.createElement('span');
//         numberElement.className = 'number';
//         totalElement.appendChild(numberElement);
//         this.element.appendChild(totalElement);
//         return <PagingTotalLabel>{
//             get text(): string {
//                 return numberElement.innerHTML;
//             },
//             set text(value: string) {
//                 numberElement.innerHTML = value;
//             },
//             get visible(): boolean {
//                 let display = totalElement.style.display;
//                 return display != 'none';
//             },
//             set visible(value: boolean) {
//                 if (value == true)
//                     totalElement.style.display = 'block';
//                 else
//                     totalElement.style.display = 'node';
//             }
//         }
//     }
//     private createPreviousButtons(buttonContainer: HTMLElement) {
//         this.firstPageButton = this.createButton(buttonContainer);
//         this.firstPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.firstPageButton.text = this.pagerSettings.firstPageText;
//         this.firstPageButton.visible = false;
//         this.previousPageButton = this.createButton(buttonContainer);
//         this.previousPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.previousPageButton.text = this.pagerSettings.previousPageText;
//         this.previousPageButton.visible = false;
//     }
//     private createNextButtons(buttonContainer: HTMLElement) {
//         this.nextPageButton = this.createButton(buttonContainer);
//         this.nextPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.nextPageButton.text = this.pagerSettings.nextPageText;
//         this.nextPageButton.visible = false;
//         this.lastPageButton = this.createButton(buttonContainer);
//         this.lastPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.lastPageButton.text = this.pagerSettings.lastPageText;
//         this.lastPageButton.visible = false;
//     }
//     private createNumberButtons(buttonContainer: HTMLElement) {
//         let pagingBar = this;
//         let buttonCount = this.pagerSettings.pageButtonCount;
//         for (let i = 0; i < buttonCount; i++) {
//             let button = this.createButton(buttonContainer);
//             button.onclick = NumberPagingBar.on_buttonClick;
//             this.numberButtons[i] = button;
//         }
//         this.numberButtons.forEach(btn => {
//             btn.onclick = () => NumberPagingBar.on_buttonClick(btn, pagingBar);
//         })
//     }
//     private static on_buttonClick(button: NumberPagingButton<NumberPagingBar>, pagingBar: NumberPagingBar) {
//         let pageIndex = button.pageIndex;
//         if (!pageIndex == null) {
//             return;
//         }
//         let args = pagingBar.selectArguments;
//         args.maximumRows = pagingBar.pageSize;
//         args.startRowIndex = pageIndex * pagingBar.pageSize;
//         pagingBar.pageIndex = pageIndex;
//         //pagingBar.dataSource.select(pagingBar.selectArguments);
//         pagingBar.loadData(pageIndex)
//     }
//     render() {
//         var pagerSettings = this.pagerSettings;
//         var buttonCount = pagerSettings.pageButtonCount;
//         let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);
//         let pagingBarCount = Math.ceil(this.pageCount / buttonCount);
//         this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount
//         this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;
//         this.firstPageButton.pageIndex = 0;
//         this.lastPageButton.pageIndex = this.pageCount - 1;
//         for (let i = 0; i < this.numberButtons.length; i++) {
//             let pageIndex = pagingBarIndex * buttonCount + i;
//             if (pageIndex < this.pageCount) {
//                 this.numberButtons[i].pageIndex = pageIndex;
//                 this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();
//                 this.numberButtons[i].visible = true;
//                 this.numberButtons[i].active = pageIndex == this.pageIndex;
//             }
//             else {
//                 this.numberButtons[i].visible = false;
//             }
//         }
//         if (this.totalElement) {
//             this.totalElement.text = this.totalRowCount as any;
//             this.totalElement.visible = true;
//         }
//         this.firstPageButton.visible = false;
//         this.previousPageButton.visible = false;
//         this.lastPageButton.visible = false;
//         this.nextPageButton.visible = false;
//         if (pagingBarIndex > 0) {
//             this.firstPageButton.visible = true;
//             this.previousPageButton.visible = true;
//         }
//         if (pagingBarIndex < pagingBarCount - 1) {
//             this.lastPageButton.visible = true;
//             this.nextPageButton.visible = true;
//         }
//     }
// }
// }


/***/ }),

/***/ "./out/TextBox.js":
/*!************************!*\
  !*** ./out/TextBox.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
class TextBox extends Control_1.Control {
    constructor(params) {
        if (params == null)
            throw Errors_1.Errors.argumentNull("params");
        if (!params.element)
            throw Errors_1.Errors.argumentFieldNull("params", "element");
        if (!params.dataField)
            throw Errors_1.Errors.argumentFieldNull("params", "dataField");
        if (!params.dataItem)
            throw Errors_1.Errors.argumentFieldNull("params", "dataItem");
        if (!params.valueType)
            throw Errors_1.Errors.argumentFieldNull("params", "valuetype");
        super(params.element);
        let { element, dataField, dataItem, valueType } = params;
        let value = dataItem[dataField];
        element.value = `${value}`;
        element.onchange = () => {
            if (valueType == 'int') {
                dataItem[dataField] = Number.parseInt(element.value);
            }
            else if (valueType == 'float') {
                dataItem[dataField] = Number.parseFloat(element.value);
            }
            else {
                dataItem[dataField] = (element.value || "");
            }
        };
    }
}
exports.TextBox = TextBox;


/***/ }),

/***/ "./out/Utility.js":
/*!************************!*\
  !*** ./out/Utility.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class ElementHelper {
    static showElement(element) {
        if (!element)
            throw maishu_toolkit_1.errors.argumentNull('element');
        element.style.removeProperty('display');
    }
    static hideElement(element) {
        if (!element)
            throw maishu_toolkit_1.errors.argumentNull('element');
        element.style.display = 'none';
    }
    static isVisible(element) {
        let { display } = element.style;
        return !display || display != 'none';
    }
    static data(e, name, value) {
        let element = e;
        element['data'] = element['data'] || {};
        if (value == null)
            return element['data'].name;
        element['data'].name = value;
    }
    static findFirstParentByTagName(element, tagName) {
        if (element == null)
            throw maishu_toolkit_1.errors.argumentNull("element");
        if (!tagName)
            throw maishu_toolkit_1.errors.argumentNull('tagName');
        let parent = element.parentElement;
        while (parent != null) {
            if (parent.tagName.toLowerCase() == tagName.toLowerCase()) {
                return parent;
            }
            parent = parent.parentElement;
        }
        return null;
    }
}
exports.ElementHelper = ElementHelper;
function applyStyle(element, value) {
    if (typeof value == 'string') {
        element.setAttribute('style', value);
        return;
    }
    for (let key in value) {
        element.style[key] = value[key];
    }
}
exports.applyStyle = applyStyle;


/***/ }),

/***/ "./out/cells/GridViewCell.js":
/*!***********************************!*\
  !*** ./out/cells/GridViewCell.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ../Control */ "./out/Control.js");
class GridViewCell extends Control_1.Control {
    constructor(element, type = "GridViewCell") {
        super(element);
        this.type = type;
    }
}
exports.GridViewCell = GridViewCell;


/***/ }),

/***/ "./out/cells/GridViewCommandCell.js":
/*!******************************************!*\
  !*** ./out/cells/GridViewCommandCell.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
class GridViewCommandCell extends GridViewCell_1.GridViewCell {
    constructor(field, cellElement) {
        super(cellElement, "GridViewCommandCell");
    }
}
exports.GridViewCommandCell = GridViewCommandCell;


/***/ }),

/***/ "./out/cells/GridViewDataCell.js":
/*!***************************************!*\
  !*** ./out/cells/GridViewDataCell.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
/**
 * 表格视图数据单元格
 * 用于渲染数据
 */
class GridViewDataCell extends GridViewCell_1.GridViewCell {
    constructor(params, cellElement) {
        super(cellElement, "GridViewDataCell");
        let p = params;
        this.nullText = p.nullText != null ? p.nullText : '';
        this.dataFormatString = p.dataFormatString;
        this.dataField = p.dataField;
        if (p.render) {
            this.render = (dataItem) => p.render.apply(this, [dataItem, this.element]);
        }
    }
    /** 渲染数据 */
    render(dataItem) {
        let value = dataItem[this.dataField];
        var text;
        if (value == null)
            text = this.nullText;
        else
            text = this.formatValue(value, this.dataFormatString);
        this.element.innerHTML = text;
    }
    /** 格式化数据 */
    formatValue(value, format) {
        if (!format)
            return `${value}`;
        var result = '';
        for (var i = 0;;) {
            var open = format.indexOf('{', i);
            var close = format.indexOf('}', i);
            if ((open < 0) && (close < 0)) {
                result += format.slice(i);
                break;
            }
            if ((close > 0) && ((close < open) || (open < 0))) {
                if (format.charAt(close + 1) !== '}') {
                    throw new Error('Sys.Res.stringFormatBraceMismatch');
                }
                result += format.slice(i, close + 1);
                i = close + 2;
                continue;
            }
            result += format.slice(i, open);
            i = open + 1;
            if (format.charAt(i) === '{') {
                result += '{';
                i++;
                continue;
            }
            if (close < 0)
                throw new Error('Sys.Res.stringFormatBraceMismatch');
            var brace = format.substring(i, close);
            var argFormat = brace;
            if (typeof (value) === "undefined" || value === null) {
                value = '';
            }
            if (value instanceof Date)
                result = result + this.formatDate(value, argFormat);
            else if (value instanceof Number || typeof value == 'number')
                result = result + this.formatNumber(value, argFormat);
            else
                result = result + value.toString();
            i = close + 1;
        }
        return result;
    }
    formatDate(value, format) {
        let y = value.getFullYear();
        let m = value.getMonth() + 1;
        let d = value.getDate();
        let h = value.getHours();
        let M = value.getMinutes();
        let s = value.getSeconds();
        let twoDigit = function (value) {
            const TEN = 10;
            if (value < TEN)
                return `0` + value;
            return value.toString();
        };
        switch (format) {
            case 'd':
                return `${y}-${m}-${d}`;
            case 'g':
                return `${y}-${m}-${d} ${h}:${M}`;
            case 'gg':
                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}`;
            case 'G':
                return `${y}-${m}-${d} ${h}:${M}:${s}`;
            case 'GG':
                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}:${twoDigit(s)}`;
            case 't':
                return `${h}:${M}`;
            case 'T':
                return `${h}:${M}:${s}`;
        }
        return value.toString();
    }
    formatNumber(value, format) {
        let reg = new RegExp('^C[0-9]+');
        if (reg.test(format)) {
            let num = format.substr(1);
            return value.toFixed(num);
        }
        return value.toString();
    }
}
exports.GridViewDataCell = GridViewDataCell;


/***/ }),

/***/ "./out/cells/GridViewEditableCell.js":
/*!*******************************************!*\
  !*** ./out/cells/GridViewEditableCell.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
const Utility_1 = __webpack_require__(/*! ../Utility */ "./out/Utility.js");
const index_1 = __webpack_require__(/*! ./index */ "./out/cells/index.js");
class GridViewEditableCell extends index_1.GridViewDataCell {
    constructor(field, dataItem, cellElement) {
        if (field == null)
            throw Errors_1.Errors.argumentNull('field');
        if (dataItem == null)
            throw Errors_1.Errors.argumentNull('dataItem');
        super({
            dataField: field.dataField,
            nullText: field.nullText, dataFormatString: field.dataFormatString,
        }, cellElement);
        this._field = field;
        this._dataItem = dataItem;
        this._mode = 'read';
        this.type = "GridViewEditableCell";
    }
    get dataItem() {
        return this._dataItem;
    }
    get field() {
        return this._field;
    }
    get mode() {
        return this._mode;
    }
    beginEdit() {
        if (this._field.readOnly) {
            return;
        }
        this._mode = 'edit';
        this.render(this._dataItem, "edit");
    }
    endEdit() {
        if (this._field.readOnly) {
            return;
        }
        this._mode = 'read';
        this.render(this._dataItem, "read");
    }
    cancelEdit() {
        if (this._field.readOnly) {
            return;
        }
        this._mode = 'read';
        this.render(this._dataItem, "read");
    }
    render(dataItem, mode) {
        if (mode == 'edit') {
            this.element.innerHTML = "";
            this.createControl();
            console.assert(this.control != null);
            let value = dataItem[this.field.dataField];
            this.control.value = value;
            Utility_1.applyStyle(this.control.element, this._field.controlStyle);
            this.element.appendChild(this.control.element);
            return;
        }
        // this.control = null;
        super.render(dataItem);
    }
    createControl() {
        this.control = this.field.createControl();
        return this.control.element;
    }
    get controlValue() {
        if (this.control == null)
            return null;
        return this.control.value;
    }
}
exports.GridViewEditableCell = GridViewEditableCell;


/***/ }),

/***/ "./out/cells/GridViewHeaderCell.js":
/*!*****************************************!*\
  !*** ./out/cells/GridViewHeaderCell.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
const GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
class GridViewHeaderCell extends GridViewCell_1.GridViewCell {
    constructor(field, cellElement) {
        super(cellElement, "GridViewHeaderCell");
        this.ascHTML = '↑';
        this.descHTML = '↓';
        this.sortingHTML = '...';
        this.toSortHTML = '↕';
        this.field = field;
        this.sorting = new maishu_toolkit_1.Callback();
        this.sorted = new maishu_toolkit_1.Callback();
        if (field.sortExpression) {
            let labelElement = document.createElement('a');
            labelElement.href = 'javascript:';
            labelElement.innerHTML = this.defaultHeaderText();
            labelElement.onclick = () => this.handleSort();
            this._iconElement = document.createElement('span');
            this._iconElement.innerHTML = this.toSortHTML;
            this.appendChild(labelElement);
            this.appendChild(this._iconElement);
            this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);
            this.sorted.add(() => this.updateSortIcon());
        }
        else {
            this.element.innerHTML = this.defaultHeaderText();
        }
        this.style(field.headerStyle);
    }
    handleSort() {
        return __awaiter(this, void 0, void 0, function* () {
            let selectArguments = this.field.gridView.selectArguments;
            if (this.field.gridView == null)
                throw Errors_1.Errors.gridViewNull();
            let sortType = this.sortType == 'asc' ? 'desc' : 'asc';
            // fireCallback(this.sorting, this, { sortType });
            this.sorting.fire({ sortType });
            selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;
            yield this.field.gridView.dataSource.select(selectArguments);
            this.sortType = sortType;
            // fireCallback(this.sorted, this, { sortType });
            this.sorted.fire({ sortType });
        });
    }
    defaultHeaderText() {
        return this.field.headerText || this.field.dataField || '';
    }
    get sortType() {
        return this._sortType;
    }
    set sortType(value) {
        this._sortType = value;
    }
    clearSortIcon() {
        this._iconElement.innerHTML = this.toSortHTML;
    }
    updateSortIcon() {
        if (this.sortType == 'asc') {
            this._iconElement.innerHTML = this.ascHTML;
        }
        else if (this.sortType == 'desc') {
            this._iconElement.innerHTML = this.descHTML;
        }
        else {
            this._iconElement.innerHTML = this.toSortHTML;
        }
    }
}
exports.GridViewHeaderCell = GridViewHeaderCell;


/***/ }),

/***/ "./out/cells/index.js":
/*!****************************!*\
  !*** ./out/cells/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
exports.GridViewCell = GridViewCell_1.GridViewCell;
var GridViewDataCell_1 = __webpack_require__(/*! ./GridViewDataCell */ "./out/cells/GridViewDataCell.js");
exports.GridViewDataCell = GridViewDataCell_1.GridViewDataCell;
var GridViewHeaderCell_1 = __webpack_require__(/*! ./GridViewHeaderCell */ "./out/cells/GridViewHeaderCell.js");
exports.GridViewHeaderCell = GridViewHeaderCell_1.GridViewHeaderCell;


/***/ }),

/***/ "./out/data-source/ArrayDataSource.js":
/*!********************************************!*\
  !*** ./out/data-source/ArrayDataSource.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var _dataItems;
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class ArrayDataSource extends maishu_toolkit_1.DataSource {
    constructor(dataItems, primaryKeys) {
        super({
            primaryKeys,
            select: (args) => __awaiter(this, void 0, void 0, function* () {
                let arr = this.dataItems;
                if (args.maximumRows == null || args.maximumRows <= arr.length)
                    return { dataItems: arr, totalRowCount: arr.length };
                args.startRowIndex = args.startRowIndex || 0;
                let dataItems = arr.slice(args.startRowIndex, args.startRowIndex + args.maximumRows);
                let result = { dataItems, totalRowCount: arr.length };
                return result;
            }),
            update: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let item = this.findDataItem(dataItem);
                if (item != null) {
                    Object.assign(item, dataItem);
                }
                return item;
            }),
            insert: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let items = this.dataItems;
                items.push(dataItem);
            }),
            delete: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let item = this.findDataItem(dataItem);
                if (item == null) {
                    console.assert(__classPrivateFieldGet(this, _dataItems) != null);
                    __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != item));
                }
                return item;
            })
        });
        _dataItems.set(this, void 0);
        __classPrivateFieldSet(this, _dataItems, dataItems);
    }
    get dataItems() {
        return __classPrivateFieldGet(this, _dataItems);
    }
    set dataItems(value) {
        __classPrivateFieldSet(this, _dataItems, value);
    }
    findDataItem(pks) {
        let items = this.dataItems;
        for (let i = 0; i < items.length; i++) {
            if (this.samePrimaryKeyValues(items[i], pks)) {
                return items[i];
            }
        }
        return null;
    }
    samePrimaryKeyValues(item1, item2) {
        for (let j = 0; j < this.primaryKeys.length; j++) {
            if (item1[this.primaryKeys[j]] != item2[this.primaryKeys[j]]) {
                return false;
            }
        }
        return true;
    }
}
exports.ArrayDataSource = ArrayDataSource;
_dataItems = new WeakMap();


/***/ }),

/***/ "./out/data-source/index.js":
/*!**********************************!*\
  !*** ./out/data-source/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ArrayDataSource_1 = __webpack_require__(/*! ./ArrayDataSource */ "./out/data-source/ArrayDataSource.js");
exports.ArrayDataSource = ArrayDataSource_1.ArrayDataSource;


/***/ }),

/***/ "./out/fields/BoundField.js":
/*!**********************************!*\
  !*** ./out/fields/BoundField.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = __webpack_require__(/*! ./DataControlField */ "./out/fields/DataControlField.js");
const GridViewEditableCell_1 = __webpack_require__(/*! ../cells/GridViewEditableCell */ "./out/cells/GridViewEditableCell.js");
class BoundField extends DataControlField_1.DataControlField {
    /**
     * Gets the caption displayed for a field when the field's value is null.
     */
    get nullText() {
        return this.params.nullText || "";
    }
    createItemCell(dataItem, cellElement) {
        cellElement = cellElement || this.elementProvider.createCellElement("body");
        let cell = new GridViewEditableCell_1.GridViewEditableCell(this, dataItem, cellElement);
        cell.style(this.itemStyle);
        return cell;
    }
    /**
     * Gets the field for the value.
     */
    get dataField() {
        return this.params.dataField;
    }
    /**
     * Gets the string that specifies the display format for the value of the field.
     */
    get dataFormatString() {
        return this.params.dataFormatString;
    }
    get controlStyle() {
        return this.params.controlStyle;
    }
    get readOnly() {
        return this.params.readOnly;
    }
    get validateRules() {
        return this.params.validateRules;
    }
    //===============================================
    // Virutal Methods
    createControl() {
        let element = document.createElement("input");
        let valueType = this.params.valueType;
        let field = this;
        let control = {
            element,
            get value() {
                let it = this;
                let input = it.element;
                let text = input.value;
                input.name = `${field.dataField}`;
                if (field.params.emptyText) {
                    input.placeholder = field.params.emptyText;
                }
                switch (valueType) {
                    case 'number':
                        return new Number(text).valueOf();
                    case 'date':
                        return new Date(text);
                    default:
                        return text;
                }
            },
            set value(value) {
                let it = this;
                let input = it.element;
                input.value = value == null ? "" : value;
            }
        };
        return control;
    }
}
exports.BoundField = BoundField;


/***/ }),

/***/ "./out/fields/CommandField.js":
/*!************************************!*\
  !*** ./out/fields/CommandField.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="DataControlField.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = __webpack_require__(/*! ./DataControlField */ "./out/fields/DataControlField.js");
const Control_1 = __webpack_require__(/*! ../Control */ "./out/Control.js");
const Utility_1 = __webpack_require__(/*! ../Utility */ "./out/Utility.js");
const GridViewCommandCell_1 = __webpack_require__(/*! ../cells/GridViewCommandCell */ "./out/cells/GridViewCommandCell.js");
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class CommandField extends DataControlField_1.DataControlField {
    constructor(params) {
        super(params);
        if (!this.params.cancelButtonHTML)
            this.params.cancelButtonHTML = '取消';
        if (!this.params.deleteButtonHTML)
            this.params.deleteButtonHTML = '删除';
        if (!this.params.editButtonHTML)
            this.params.editButtonHTML = '编辑';
        if (!this.params.updateButtonHTML)
            this.params.updateButtonHTML = '更新';
        if (!this.params.newButtonHTML)
            this.params.newButtonHTML = '新增';
        if (!this.params.insertButtonHTML)
            this.params.insertButtonHTML = '添加';
    }
    // private params(): CommandFieldParams {
    //     return this.params;
    // }
    get cancelButtonHTML() {
        return this.params.cancelButtonHTML;
    }
    get deleteButtonHTML() {
        return this.params.deleteButtonHTML;
    }
    get editButtonHTML() {
        return this.params.editButtonHTML;
    }
    get updateButtonHTML() {
        return this.params.updateButtonHTML;
    }
    get newButtonHTML() {
        return this.params.newButtonHTML;
    }
    get insertButtonHTML() {
        return this.params.insertButtonHTML;
    }
    get cancelButtonClass() {
        return this.params.cancelButtonClass;
    }
    get deleteButtonClass() {
        return this.params.deleteButtonClass;
    }
    get editButtonClass() {
        return this.params.editButtonClass;
    }
    get newButtonClass() {
        return this.params.newButtonClass;
    }
    get updateButtonClass() {
        return this.params.updateButtonClass;
    }
    get insertButtonClass() {
        return this.params.insertButtonClass;
    }
    createItemCell(dataItem) {
        let cell = new GridViewCommandCell_1.GridViewCommandCell(this, this.elementProvider.createCellElement("body"));
        cell.style(this.itemStyle);
        if (this.params.showEditButton) {
            let editButton = this.createEditButton();
            editButton.style.marginRight = '4px';
            if (this.editButtonClass)
                maishu_toolkit_1.HTML.addClassName(editButton, this.editButtonClass); //editButton.className = this.editButtonClass;
            cell.editButton = editButton;
            editButton.addEventListener('click', (e) => this.on_editButtonClick(e));
            cell.appendChild(editButton);
            let updateButton = this.createUpdateButton();
            updateButton.style.display = 'none';
            updateButton.style.marginRight = '4px';
            if (this.updateButtonClass)
                maishu_toolkit_1.HTML.addClassName(updateButton, this.updateButtonClass); //updateButton.className = this.updateButtonClass;
            cell.updateButton = updateButton;
            updateButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));
            cell.appendChild(updateButton);
            let cancelButton = this.createCancelButton();
            cancelButton.style.display = 'none';
            cancelButton.style.marginRight = '4px';
            if (this.cancelButtonClass)
                maishu_toolkit_1.HTML.addClassName(cancelButton, this.cancelButtonClass); //cancelButton.className = this.cancelButtonClass;
            cell.cacelButton = cancelButton;
            cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));
            cell.appendChild(cancelButton);
        }
        if (this.params.showDeleteButton) {
            let deleteButton = this.createDeleteButton();
            deleteButton.style.marginRight = '4px';
            if (this.deleteButtonClass)
                maishu_toolkit_1.HTML.addClassName(deleteButton, this.deleteButtonClass); //deleteButton.className = this.deleteButtonClass;
            cell.deleteButton = deleteButton;
            deleteButton.onclick = (e) => this.on_deleteButtonClick(e);
            cell.appendChild(deleteButton);
        }
        if (this.params.showNewButton) {
            let newButton = this.createNewButton();
            newButton.style.marginRight = '4px';
            if (this.newButtonClass)
                maishu_toolkit_1.HTML.addClassName(newButton, this.newButtonClass); //newButton.className = this.newButtonClass;
            newButton.onclick = (e) => this.on_newButtonClick(e);
            cell.newButton = newButton;
            cell.appendChild(newButton);
            let insertButton = this.createInsertButton();
            insertButton.style.display = 'none';
            insertButton.style.marginRight = '4px';
            insertButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));
            if (this.insertButtonClass)
                maishu_toolkit_1.HTML.addClassName(insertButton, this.insertButtonClass); // insertButton.className = this.updateButtonClass;
            cell.insertButton = insertButton;
            cell.appendChild(insertButton);
            let cancelButton = this.createCancelButton();
            cancelButton.style.display = 'none';
            cancelButton.style.marginRight = '4px';
            cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));
            if (this.cancelButtonClass)
                maishu_toolkit_1.HTML.addClassName(cancelButton, this.cancelButtonClass); // cancelButton.className = this.cancelButtonClass;
            cell.cacelButton = cancelButton;
            cell.appendChild(cancelButton);
        }
        return cell;
    }
    showReadStatusButtons(cell) {
        if (cell.newButton) {
            this.showButton(cell.newButton);
            this.hideButton(cell.insertButton);
        }
        if (cell.editButton) {
            this.showButton(cell.editButton);
            this.hideButton(cell.updateButton);
        }
        if (cell.deleteButton)
            this.showButton(cell.deleteButton);
        this.hideButton(cell.cacelButton);
    }
    createEditButton() {
        let button = document.createElement('a');
        button.innerHTML = this.editButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createDeleteButton() {
        let button = document.createElement('a');
        button.innerHTML = this.deleteButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createInsertButton() {
        let button = document.createElement('a');
        button.innerHTML = this.insertButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createUpdateButton() {
        let button = document.createElement('a');
        button.innerHTML = this.updateButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createCancelButton() {
        let button = document.createElement('a');
        button.innerHTML = this.cancelButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createNewButton() {
        let button = document.createElement('a');
        button.innerHTML = this.newButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    hideButton(button) {
        button.style.display = 'none';
    }
    showButton(button) {
        button.style.removeProperty('display');
    }
    findParentCell(element) {
        let cellElement;
        let p = element.parentElement;
        while (p) {
            if (p.tagName == 'TD') {
                cellElement = p;
                break;
            }
            p = p.parentElement;
        }
        return cellElement;
    }
    on_editButtonClick(e) {
        let cellElement = this.findParentCell(e.target);
        console.assert(cellElement != null);
        let rowElement = cellElement.parentElement;
        for (let i = 0; i < rowElement.cells.length; i++) {
            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);
            if (cell.type == "GridViewEditableCell") {
                cell.beginEdit();
            }
        }
        let cell = Control_1.Control.getControlByElement(cellElement);
        this.showButton(cell.cacelButton);
        this.showButton(cell.updateButton);
        this.hideButton(cell.editButton);
        if (cell.deleteButton)
            this.hideButton(cell.deleteButton);
        if (cell.newButton)
            this.hideButton(cell.newButton);
    }
    on_cancelButtonClick(e) {
        let cellElement = this.findParentCell(e.target);
        console.assert(cellElement != null);
        let rowElement = cellElement.parentElement;
        var row = Control_1.Control.getControlByElement(rowElement);
        if (row["isNew"] == true) {
            rowElement.remove();
            return;
        }
        for (let i = 0; i < rowElement.cells.length; i++) {
            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);
            if (cell.type == "GridViewEditableCell") {
                cell.cancelEdit();
            }
        }
        let cell = Control_1.Control.getControlByElement(cellElement);
        this.hideButton(cell.cacelButton);
        this.hideButton(cell.updateButton);
        this.showButton(cell.editButton);
        if (cell.deleteButton)
            this.showButton(cell.deleteButton);
        if (cell.newButton)
            this.showButton(cell.newButton);
    }
    on_insertOrUpdateButtonClick(e) {
        if (e.target['_updating'])
            e.target['_updating'] = true;
        let cellElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, 'td');
        let rowElement = cellElement.parentElement;
        let cell = Control_1.Control.getControlByElement(cellElement);
        let row = Control_1.Control.getControlByElement(rowElement);
        //==========================================================
        // 复制 dataItem 副本
        let dataItem = Object.assign({}, row.dataItem || {});
        //==========================================================
        let dataSource = row.gridView.dataSource;
        let editableCells = new Array();
        for (let i = 0; i < rowElement.cells.length; i++) {
            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);
            if (cell.type == "GridViewEditableCell" && cell.mode == 'edit') {
                let field = cell.field;
                dataItem[field.dataField] = cell.controlValue;
                editableCells.push(cell);
            }
        }
        let isInsert = e.target == cell.insertButton;
        let p = isInsert ? dataSource.insert(dataItem, rowElement.rowIndex) : dataSource.update(dataItem);
        return p.then(() => {
            if (isInsert) {
                rowElement.remove();
                return;
            }
            editableCells.forEach((item) => item.endEdit());
            let cell = Control_1.Control.getControlByElement(cellElement);
            this.showReadStatusButtons(cell);
            e.target['_updating'] = false;
        }).catch(() => e.target['_updating'] = false);
    }
    on_deleteButtonClick(e) {
        let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, "tr");
        let row = Control_1.Control.getControlByElement(rowElement);
        let dataSource = row.gridView.dataSource;
        dataSource.delete(row.dataItem)
            .then(() => {
            rowElement.remove();
        });
    }
    on_newButtonClick(e) {
        let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, "tr"); //cellElement.parentElement as HTMLTableRowElement;
        let row = Control_1.Control.getControlByElement(rowElement);
        let gridView = row.gridView;
        let newRow = gridView.appendDataRow({}, rowElement.rowIndex);
        newRow["isNew"] = true;
        let commandCells = newRow.cells.filter(o => o.type == "GridViewCommandCell"); //GridViewCommandCell
        newRow.cells.filter(o => o.type == "GridViewEditableCell") //GridViewEditableCell
            .forEach(c => c.beginEdit());
        commandCells.forEach(c => {
            let cell = c;
            if (cell.deleteButton)
                this.hideButton(cell.deleteButton);
            if (cell.editButton)
                this.hideButton(cell.editButton);
            this.hideButton(cell.newButton);
            this.showButton(cell.insertButton);
            this.showButton(cell.cacelButton);
        });
    }
}
exports.CommandField = CommandField;


/***/ }),

/***/ "./out/fields/CustomBoundField.js":
/*!****************************************!*\
  !*** ./out/fields/CustomBoundField.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BoundField_1 = __webpack_require__(/*! ./BoundField */ "./out/fields/BoundField.js");
class CustomBoundField extends BoundField_1.BoundField {
    constructor(params) {
        super(params);
    }
    createItemCell(dataItem, cellElement) {
        let cell = super.createItemCell(dataItem, cellElement);
        let cellRender = cell.render;
        cell.render = function (dataItem) {
            let it = this;
            let params = it.field.params;
            if (it.mode == "read" && params.cellRender != null) {
                params.cellRender.apply(cell, [dataItem, it.element]);
                return;
            }
            cellRender.apply(cell, [dataItem]);
        };
        return cell;
    }
}
exports.CustomBoundField = CustomBoundField;


/***/ }),

/***/ "./out/fields/CustomField.js":
/*!***********************************!*\
  !*** ./out/fields/CustomField.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = __webpack_require__(/*! ./DataControlField */ "./out/fields/DataControlField.js");
class CustomField extends DataControlField_1.DataControlField {
    createHeaderCell(cellElement) {
        if (this.params.createHeaderCell) {
            let cell = this.params.createHeaderCell(cellElement);
            cell.style(this.headerStyle);
            return cell;
        }
        return super.createHeaderCell(cellElement);
    }
    createFooterCell(cellElement) {
        if (this.params.createFooterCell) {
            let cell = this.params.createFooterCell(cellElement);
            if (this.params.footerStyle)
                cell.style(this.params.footerStyle);
            return cell;
        }
        return super.createFooterCell(cellElement);
    }
    createItemCell(dataItem, cellElement) {
        if (this.params.createItemCell) {
            let cell = this.params.createItemCell.apply(this, [dataItem, cellElement]);
            cell.style(this.params.itemStyle);
            return cell;
        }
        return super.createItemCell(dataItem, cellElement);
    }
}
exports.CustomField = CustomField;


/***/ }),

/***/ "./out/fields/DataControlField.js":
/*!****************************************!*\
  !*** ./out/fields/DataControlField.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _gridView, _elementProvider;
Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
const index_1 = __webpack_require__(/*! ../cells/index */ "./out/cells/index.js");
class DataControlField {
    constructor(params, elementProvider) {
        _gridView.set(this, void 0);
        _elementProvider.set(this, void 0);
        if (params.visible == null)
            params.visible = true;
        this.params = params;
        __classPrivateFieldSet(this, _elementProvider, elementProvider);
    }
    /**
     * Gets the text that is displayed in the footer item of a data control field.
     */
    get footerText() {
        return this.params.footerText;
    }
    /**
     * Sets the text that is displayed in the footer item of a data control field.
     */
    set footerText(value) {
        this.params.footerText = value;
    }
    /**
     * Gets the text that is displayed in the header item of a data control field.
     */
    get headerText() {
        return this.params.headerText;
    }
    /**
     * Sets the text that is displayed in the header item of a data control field.
     */
    set headerText(value) {
        this.params.headerText = value;
    }
    get elementProvider() {
        if (__classPrivateFieldGet(this, _elementProvider) != null)
            return __classPrivateFieldGet(this, _elementProvider);
        if (this.gridView != null)
            return this.gridView.elementProvider;
        return null;
    }
    get itemStyle() {
        return this.params.itemStyle;
    }
    set itemStyle(value) {
        this.params.itemStyle = value;
    }
    get footerStyle() {
        return this.params.footerStyle;
    }
    set footerStyle(value) {
        this.params.footerStyle = value;
    }
    get headerStyle() {
        return this.params.headerStyle;
    }
    set headerStyle(value) {
        this.params.headerStyle = value;
    }
    get visible() {
        return this.params.visible;
    }
    get gridView() {
        return __classPrivateFieldGet(this, _gridView);
    }
    set gridView(value) {
        __classPrivateFieldSet(this, _gridView, value);
    }
    /**
     * Gets a sort expression that is used by a data source control to sort data.
     */
    get sortExpression() {
        return this.params.sortExpression;
    }
    /**
     * Sets a sort expression that is used by a data source control to sort data.
     */
    set sortExpression(value) {
        this.params.sortExpression = value;
    }
    createHeaderCell(cellElement) {
        let cell = new index_1.GridViewHeaderCell(this, cellElement);
        return cell;
    }
    createFooterCell(cellElement) {
        let cell = new index_1.GridViewCell(cellElement);
        cell.element.innerHTML = this.footerText || '';
        cell.style(this.footerStyle);
        return cell;
    }
    /**
     * 创建数据项单元格对象
     * @param dataItem 数据项
     * @param cellElement 单元格元素
     */
    createItemCell(dataItem, cellElement) {
        if (!dataItem)
            throw Errors_1.Errors.argumentNull('dataItem');
        let cell = new index_1.GridViewCell(cellElement);
        cell.style(this.itemStyle);
        return cell;
    }
}
exports.DataControlField = DataControlField;
_gridView = new WeakMap(), _elementProvider = new WeakMap();


/***/ }),

/***/ "./out/fields/DropdownField.js":
/*!*************************************!*\
  !*** ./out/fields/DropdownField.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _dataItems, _dataSource;
Object.defineProperty(exports, "__esModule", { value: true });
const BoundField_1 = __webpack_require__(/*! ./BoundField */ "./out/fields/BoundField.js");
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
const DropDown_1 = __webpack_require__(/*! ../DropDown */ "./out/DropDown.js");
const emptyValue = "";
class DropdownField extends BoundField_1.BoundField {
    constructor(params) {
        super(params);
        _dataItems.set(this, void 0);
        _dataSource.set(this, void 0);
        if (!params.dataSource)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "dataSource");
        if (!params.nameField)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "nameField");
        if (!params.valueField)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "valueField");
        __classPrivateFieldSet(this, _dataSource, params.dataSource);
        params.dataSource.deleted.add(args => {
            let dataItem = this.findDataItem(args.dataItem);
            if (dataItem != null) {
                __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != dataItem));
            }
        });
        params.dataSource.inserted.add(args => {
            if (__classPrivateFieldGet(this, _dataItems)) {
                __classPrivateFieldGet(this, _dataItems).push(args.dataItem);
            }
        });
        params.dataSource.updated.add(args => {
            let dataItem = this.findDataItem(args.dataItem);
            if (dataItem != null) {
                dataItem = Object.assign(dataItem, args.dataItem);
            }
        });
    }
    findDataItem(pks) {
        let items = __classPrivateFieldGet(this, _dataItems) || [];
        for (let i = 0; i < items.length; i++) {
            if (this.samePrimaryKeyValues(items[i], pks)) {
                return items[i];
            }
        }
        return null;
    }
    samePrimaryKeyValues(item1, item2) {
        let primaryKeys = __classPrivateFieldGet(this, _dataSource).primaryKeys;
        for (let j = 0; j < __classPrivateFieldGet(this, _dataSource).primaryKeys.length; j++) {
            if (item1[primaryKeys[j]] != item2[primaryKeys[j]]) {
                return false;
            }
        }
        return true;
    }
    getDataItems() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _dataItems)) {
                let r = yield __classPrivateFieldGet(this, _dataSource).select({ startRowIndex: 0, maximumRows: 1000 });
                __classPrivateFieldSet(this, _dataItems, r.dataItems);
            }
            return __classPrivateFieldGet(this, _dataItems);
        });
    }
    createControl() {
        let element = document.createElement("select");
        element.className = "form-control";
        if (this.params.emptyText) {
            let o = document.createElement("option");
            let emptyText = this.params.emptyText;
            if (emptyText != null)
                o.innerText = emptyText;
            o.value = emptyValue;
            element.append(o);
        }
        new DropDown_1.Dropdown({
            element, dataSource: this.params.dataSource,
            nameField: this.params.nameField,
            valueField: this.params.valueField,
        });
        return {
            element,
            get value() {
                return element.value;
            },
            set value(value) {
                if (value == null) {
                    element.value = emptyValue;
                    return;
                }
                element.value = value;
            }
        };
    }
    createItemCell(dataItem, cellElement) {
        let cell = super.createItemCell(dataItem, cellElement);
        let cellRender = cell.render;
        let field = this;
        cell.render = function (dataItem, mode) {
            mode = mode || "read";
            let it = this;
            let params = it.field.params;
            if (mode == "read") {
                field.getDataItems().then(dataItems => {
                    let item = dataItems.filter(o => o[params.valueField] == dataItem[params.dataField])[0];
                    let content = "";
                    if (item != null && item[params.nameField] != null) {
                        content = `${item[params.nameField]}`;
                    }
                    cellElement.innerHTML = content;
                });
                return;
            }
            cellRender.apply(cell, [dataItem, mode]);
        };
        return cell;
    }
}
exports.DropdownField = DropdownField;
_dataItems = new WeakMap(), _dataSource = new WeakMap();


/***/ }),

/***/ "./out/index.js":
/*!**********************!*\
  !*** ./out/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridView_1 = __webpack_require__(/*! ./GridView */ "./out/GridView.js");
exports.GridView = GridView_1.GridView;
var BoundField_1 = __webpack_require__(/*! ./fields/BoundField */ "./out/fields/BoundField.js");
exports.BoundField = BoundField_1.BoundField;
var CommandField_1 = __webpack_require__(/*! ./fields/CommandField */ "./out/fields/CommandField.js");
exports.CommandField = CommandField_1.CommandField;
var CustomField_1 = __webpack_require__(/*! ./fields/CustomField */ "./out/fields/CustomField.js");
exports.CustomField = CustomField_1.CustomField;
var CustomBoundField_1 = __webpack_require__(/*! ./fields/CustomBoundField */ "./out/fields/CustomBoundField.js");
exports.CustomBoundField = CustomBoundField_1.CustomBoundField;
var DataControlField_1 = __webpack_require__(/*! ./fields/DataControlField */ "./out/fields/DataControlField.js");
exports.DataControlField = DataControlField_1.DataControlField;
var DropdownField_1 = __webpack_require__(/*! ./fields/DropdownField */ "./out/fields/DropdownField.js");
exports.DropdownField = DropdownField_1.DropdownField;
var GridViewEditableCell_1 = __webpack_require__(/*! ./cells/GridViewEditableCell */ "./out/cells/GridViewEditableCell.js");
exports.GridViewEditableCell = GridViewEditableCell_1.GridViewEditableCell;
var DropDown_1 = __webpack_require__(/*! ./DropDown */ "./out/DropDown.js");
exports.DropDown = DropDown_1.Dropdown;
var TextBox_1 = __webpack_require__(/*! ./TextBox */ "./out/TextBox.js");
exports.TextBox = TextBox_1.TextBox;
var index_1 = __webpack_require__(/*! ./data-source/index */ "./out/data-source/index.js");
exports.ArrayDataSource = index_1.ArrayDataSource;
var NumberPagingBar_1 = __webpack_require__(/*! ./NumberPagingBar */ "./out/NumberPagingBar.js");
exports.DataSourcePagingBar = NumberPagingBar_1.DataSourcePagingBar;
var Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
exports.Control = Control_1.Control;
var maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
exports.DataSource = maishu_toolkit_1.DataSource;
exports.DataSourceSelectArguments = maishu_toolkit_1.DataSourceSelectArguments;
var index_2 = __webpack_require__(/*! ./cells/index */ "./out/cells/index.js");
exports.GridViewCell = index_2.GridViewCell;
exports.GridViewDataCell = index_2.GridViewDataCell;
var index_3 = __webpack_require__(/*! ./rows/index */ "./out/rows/index.js");
exports.GridViewDataRow = index_3.GridViewDataRow;
exports.GridViewRowType = index_3.GridViewRowType;


/***/ }),

/***/ "./out/rows/GridViewDataRow.js":
/*!*************************************!*\
  !*** ./out/rows/GridViewDataRow.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GridViewRow_1 = __webpack_require__(/*! ./GridViewRow */ "./out/rows/GridViewRow.js");
const GridViewRowType_1 = __webpack_require__(/*! ./GridViewRowType */ "./out/rows/GridViewRowType.js");
class GridViewDataRow extends GridViewRow_1.GridViewRow {
    constructor(gridView, dataItem, rowElement) {
        super(GridViewRowType_1.GridViewRowType.Data, rowElement, gridView);
        this._dataItem = dataItem;
        for (var i = 0; i < gridView.columns.length; i++) {
            var column = gridView.columns[i];
            var cell = column.createItemCell(dataItem, this.gridView.elementProvider.createCellElement("body"));
            cell.visible = column.visible;
            this.appendChild(cell);
        }
    }
    get dataItem() {
        return this._dataItem;
    }
}
exports.GridViewDataRow = GridViewDataRow;


/***/ }),

/***/ "./out/rows/GridViewRow.js":
/*!*********************************!*\
  !*** ./out/rows/GridViewRow.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _rowType, _gridView;
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ../Control */ "./out/Control.js");
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
class GridViewRow extends Control_1.Control {
    constructor(rowType, rowElement, gridView) {
        super(rowElement);
        _rowType.set(this, void 0);
        _gridView.set(this, void 0);
        if (gridView == null)
            throw Errors_1.Errors.argumentNull("gridView");
        __classPrivateFieldSet(this, _gridView, gridView);
        __classPrivateFieldSet(this, _rowType, rowType);
    }
    get rowType() {
        return __classPrivateFieldGet(this, _rowType);
    }
    get gridView() {
        return __classPrivateFieldGet(this, _gridView);
    }
    get cells() {
        let cells = new Array();
        for (let i = 0; i < this.element.children.length; i++) {
            let cell = Control_1.Control.getControlByElement(this.element.children[i]);
            console.assert(cell != null);
            cells[i] = cell;
        }
        return cells;
    }
}
exports.GridViewRow = GridViewRow;
_rowType = new WeakMap(), _gridView = new WeakMap();
// function findParentElement(element: HTMLElement, parentTagName: string) {
//     console.assert(element != null);
//     console.assert(parentTagName != null);
//     parentTagName = parentTagName.toUpperCase();
//     let p = element.parentElement;
//     while (p) {
//         if (p.tagName == parentTagName)
//             return p;
//         p = p.parentElement;
//     }
// }


/***/ }),

/***/ "./out/rows/GridViewRowType.js":
/*!*************************************!*\
  !*** ./out/rows/GridViewRowType.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridViewRowType;
(function (GridViewRowType) {
    GridViewRowType[GridViewRowType["Header"] = 0] = "Header";
    GridViewRowType[GridViewRowType["Footer"] = 1] = "Footer";
    GridViewRowType[GridViewRowType["Data"] = 2] = "Data";
    GridViewRowType[GridViewRowType["Paging"] = 3] = "Paging";
    GridViewRowType[GridViewRowType["Empty"] = 4] = "Empty";
})(GridViewRowType = exports.GridViewRowType || (exports.GridViewRowType = {}));


/***/ }),

/***/ "./out/rows/index.js":
/*!***************************!*\
  !*** ./out/rows/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridViewRow_1 = __webpack_require__(/*! ./GridViewRow */ "./out/rows/GridViewRow.js");
exports.GridViewRow = GridViewRow_1.GridViewRow;
var GridViewRowType_1 = __webpack_require__(/*! ./GridViewRowType */ "./out/rows/GridViewRowType.js");
exports.GridViewRowType = GridViewRowType_1.GridViewRowType;
var GridViewDataRow_1 = __webpack_require__(/*! ./GridViewDataRow */ "./out/rows/GridViewDataRow.js");
exports.GridViewDataRow = GridViewDataRow_1.GridViewDataRow;


/***/ }),

/***/ "maishu-toolkit":
/*!*********************************!*\
  !*** external "maishu-toolkit" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_toolkit__;

/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/maishu-wuzhui/node_modules/maishu-toolkit/dist/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/maishu-wuzhui/node_modules/maishu-toolkit/dist/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*!
 * ~
 *  maishu-toolkit v1.4.13
 *  https://github.com/ansiboy/toolkit
 *  
 *  Copyright (c) 2016-2018, shu mai <ansiboy@163.com>
 *  Licensed under the MIT License.
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(typeof window === 'undefined' ? global : window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./out/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./out/assign-deep.js":
/*!****************************!*\
  !*** ./out/assign-deep.js ***!
  \****************************/
/*! exports provided: objectAssignDeep, objectAssignDeepInto, withOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectAssignDeep", function() { return objectAssignDeep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectAssignDeepInto", function() { return objectAssignDeepInto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withOptions", function() { return withOptions; });

/*
 * OBJECT ASSIGN DEEP
 * Allows deep cloning of plain objects that contain primitives, nested plain objects, or nested plain arrays.
 */
/*
 * A unified way of returning a string that describes the type of the given variable.
 */
function getTypeOf(input) {
    if (input === null) {
        return 'null';
    }
    else if (typeof input === 'undefined') {
        return 'undefined';
    }
    else if (typeof input === 'object') {
        return (Array.isArray(input) ? 'array' : 'object');
    }
    return typeof input;
}
/*
 * Branching logic which calls the correct function to clone the given value base on its type.
 */
function cloneValue(value) {
    // The value is an object so lets clone it.
    if (getTypeOf(value) === 'object') {
        return quickCloneObject(value);
    }
    // The value is an array so lets clone it.
    else if (getTypeOf(value) === 'array') {
        return quickCloneArray(value);
    }
    // Any other value can just be copied.
    return value;
}
/*
 * Enumerates the given array and returns a new array, with each of its values cloned (i.e. references broken).
 */
function quickCloneArray(input) {
    return input.map(cloneValue);
}
/*
 * Enumerates the properties of the given object (ignoring the prototype chain) and returns a new object, with each of
 * its values cloned (i.e. references broken).
 */
function quickCloneObject(input) {
    const output = {};
    for (const key in input) {
        if (!input.hasOwnProperty(key)) {
            continue;
        }
        output[key] = cloneValue(input[key]);
    }
    return output;
}
/*
 * Does the actual deep merging.
 */
function executeDeepMerge(target, _objects = [], _options = {}) {
    const options = {
        arrayBehaviour: _options.arrayBehaviour || 'replace',
    };
    // Ensure we have actual objects for each.
    const objects = _objects.map(object => object || {});
    const output = target || {};
    // Enumerate the objects and their keys.
    for (let oindex = 0; oindex < objects.length; oindex++) {
        const object = objects[oindex];
        const keys = Object.keys(object);
        for (let kindex = 0; kindex < keys.length; kindex++) {
            const key = keys[kindex];
            const value = object[key];
            const type = getTypeOf(value);
            const existingValueType = getTypeOf(output[key]);
            if (type === 'object') {
                if (existingValueType !== 'undefined') {
                    const existingValue = (existingValueType === 'object' ? output[key] : {});
                    output[key] = executeDeepMerge({}, [existingValue, quickCloneObject(value)], options);
                }
                else {
                    output[key] = quickCloneObject(value);
                }
            }
            else if (type === 'array') {
                if (existingValueType === 'array') {
                    const newValue = quickCloneArray(value);
                    output[key] = (options.arrayBehaviour === 'merge' ? output[key].concat(newValue) : newValue);
                }
                else {
                    output[key] = quickCloneArray(value);
                }
            }
            else {
                output[key] = value;
            }
        }
    }
    return output;
}
/*
 * Merge all the supplied objects into the target object, breaking all references, including those of nested objects
 * and arrays, and even objects nested inside arrays. The first parameter is not mutated unlike Object.assign().
 * Properties in later objects will always overwrite.
 */
function objectAssignDeep(target, ...objects) {
    return executeDeepMerge(target, objects);
}
;
/*
 * Same as objectAssignDeep() except it doesn't mutate the target object and returns an entirely new object.
 */
function objectAssignDeepInto(...objects) {
    return executeDeepMerge({}, objects);
}
;
/*
 * Allows an options object to be passed in to customise the behaviour of the function.
 */
let withOptions = function objectAssignDeepInto(target, objects, options) {
    return executeDeepMerge(target, objects, options);
};


/***/ }),

/***/ "./out/callback.js":
/*!*************************!*\
  !*** ./out/callback.js ***!
  \*************************/
/*! exports provided: Callback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Callback", function() { return Callback; });
class Callback {
    constructor() {
        this.funcs = new Array();
    }
    add(func) {
        this.funcs.push(func);
    }
    remove(func) {
        this.funcs = this.funcs.filter(o => o != func);
    }
    fire(args) {
        this.funcs.forEach(o => o(args));
    }
    static create() {
        return new Callback();
    }
}


/***/ }),

/***/ "./out/data.js":
/*!*********************!*\
  !*** ./out/data.js ***!
  \*********************/
/*! exports provided: DataSource, DataSourceSelectArguments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataSource", function() { return DataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataSourceSelectArguments", function() { return DataSourceSelectArguments; });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ "./out/errors.js");
/* harmony import */ var _callback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callback */ "./out/callback.js");


let errors = Object.assign(_errors__WEBPACK_IMPORTED_MODULE_0__["errors"], {
    dataSourceCanntInsert() {
        return new Error("DataSource can not insert.");
    },
    dataSourceCanntDelete() {
        return new Error("DataSource can not delete.");
    },
    dataSourceCanntUpdate() {
        return new Error("DataSource can not update.");
    },
    primaryKeyNull(key) {
        let msg = `Primary key named '${key}' value is null.`;
        return new Error(msg);
    },
    queryResultTypeError() {
        let msg = `Query result type error.`;
        return new Error(msg);
    }
});
class DataSource {
    constructor(args) {
        this.inserting = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"](); //callbacks1<DataSource<T>, T, number>();
        this.inserted = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"]();
        this.deleting = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"](); //callbacks<DataSource<T>, T>();
        this.deleted = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"](); //callbacks<DataSource<T>, T>();
        this.updating = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"]();
        this.updated = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"]();
        this.selecting = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"]();
        this.selected = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"](); //callbacks<DataSource<T>, DataSourceSelectResult<T>>();
        this.error = new _callback__WEBPACK_IMPORTED_MODULE_1__["Callback"](); //callbacks<this, DataSourceError>();
        this.args = args;
        this.primaryKeys = args.primaryKeys || [];
    }
    ; //callbacks<DataSource<T>, DataSourceSelectArguments>();
    get canDelete() {
        return this.args.delete != null && this.primaryKeys.length > 0;
    }
    get canInsert() {
        return this.args.insert != null && this.primaryKeys.length > 0;
    }
    get canUpdate() {
        return this.args.update != null && this.primaryKeys.length > 0;
    }
    executeInsert(item, args) {
        return this.args.insert(item, args);
    }
    executeDelete(item, args) {
        return this.args.delete(item, args);
    }
    executeUpdate(item, args) {
        return this.args.update(item, args);
    }
    executeSelect(args) {
        args = args || {};
        return this.args.select(args);
    }
    insert(item, args, index) {
        if (!this.canInsert)
            throw errors.dataSourceCanntInsert();
        if (!item)
            throw errors.argumentNull("item");
        if (typeof args == 'number') {
            index = args;
            args = null;
        }
        this.inserting.fire({ sender: this, dataItem: item, index });
        return this.executeInsert(item, args).then((data) => {
            Object.assign(item, data);
            this.inserted.fire({ sender: this, dataItem: item, index });
            return data;
        }).catch(exc => {
            this.processError(exc, 'insert');
            throw exc;
        });
    }
    delete(item, args) {
        if (!this.canDelete)
            throw errors.dataSourceCanntDelete();
        if (!item)
            throw errors.argumentNull("item");
        this.checkPrimaryKeys(item);
        this.deleting.fire({ sender: this, dataItem: item });
        return this.executeDelete(item, args).then((data) => {
            this.deleted.fire({ sender: this, dataItem: item });
            return data;
        }).catch(exc => {
            this.processError(exc, 'delete');
            throw exc;
        });
    }
    update(item, args) {
        if (!this.canUpdate)
            throw errors.dataSourceCanntUpdate();
        if (!item)
            throw errors.argumentNull("item");
        this.checkPrimaryKeys(item);
        this.updating.fire({ sender: this, dataItem: item });
        return this.executeUpdate(item, args).then((data) => {
            Object.assign(item, data);
            this.updated.fire({ sender: this, dataItem: item });
            return data;
        }).catch((exc) => {
            this.processError(exc, 'update');
            throw exc;
        });
    }
    isSameItem(theItem, otherItem) {
        if (theItem == null)
            throw errors.argumentNull('theItem');
        if (otherItem == null)
            throw errors.argumentNull('otherItem');
        if (this.primaryKeys.length == 0)
            return theItem == otherItem;
        this.checkPrimaryKeys(theItem);
        this.checkPrimaryKeys(otherItem);
        for (let pk of this.primaryKeys) {
            if (theItem[pk] != otherItem[pk])
                return false;
        }
        return true;
    }
    checkPrimaryKeys(item) {
        for (let key in item) {
            if (item[key] == null && this.primaryKeys.indexOf(key) >= 0)
                throw errors.primaryKeyNull(key);
        }
    }
    select(args) {
        args = args || {};
        // fireCallback(this.selecting, this, args);
        this.selecting.fire({ sender: this, selectArguments: args });
        return this.executeSelect(args).then((data) => {
            let dataItems;
            let totalRowCount;
            if (Array.isArray(data)) {
                dataItems = data;
                totalRowCount = data.length;
            }
            else if (data.dataItems !== undefined && data.totalRowCount !== undefined) {
                dataItems = data.dataItems;
                totalRowCount = data.totalRowCount;
            }
            else {
                throw errors.queryResultTypeError();
            }
            this.selected.fire({ sender: this, selectResult: { totalRowCount, dataItems }, selectArguments: args });
            return { totalRowCount, dataItems };
        }).catch(exc => {
            this.processError(exc, 'select');
            throw exc;
        });
    }
    processError(exc, method) {
        exc.method = method;
        this.error.fire({ sender: this, error: exc });
        if (!exc.handled)
            throw exc;
    }
}
class DataSourceSelectArguments {
    constructor() {
        this.startRowIndex = 0;
        this.maximumRows = 2147483647;
    }
}


/***/ }),

/***/ "./out/deep-equal.js":
/*!***************************!*\
  !*** ./out/deep-equal.js ***!
  \***************************/
/*! exports provided: deepEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deepEqual", function() { return deepEqual; });
function deepEqual(x, y) {
    if (x === y) {
        return true;
    }
    if ((typeof x == "object" && x != null) && (typeof y == "object" && y != null)) {
        if (Object.keys(x).length != Object.keys(y).length)
            return false;
        for (var prop in x) {
            if (y.hasOwnProperty(prop)) {
                if (!deepEqual(x[prop], y[prop]))
                    return false;
            }
            else
                return false;
        }
        return true;
    }
    return false;
}


/***/ }),

/***/ "./out/errors.js":
/*!***********************!*\
  !*** ./out/errors.js ***!
  \***********************/
/*! exports provided: Errors, errors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Errors", function() { return Errors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errors", function() { return errors; });
class Errors {
    argumentNull(argumentName) {
        let error = new Error(`Argument ${argumentName} cannt be null or emtpy.`);
        let name = "argumentNull";
        error.name = name;
        return error;
    }
    routeDataFieldNull(fieldName) {
        let msg = `The ${fieldName} field of route data cannt be null.`;
        let error = new Error(msg);
        let name = "routeDataFieldNull";
        error.name = name;
        return error;
    }
    argumentFieldNull(fieldName, argumentName) {
        let msg = `The ${fieldName} field of ${argumentName} cannt be null.`;
        let error = new Error(msg);
        let name = "argumentFieldNull";
        error.name = name;
        return error;
    }
    argumentTypeIncorrect(argumentName, expectedType) {
        let msg = `Argument ${argumentName} type error, expected type is ${expectedType}.`;
        let error = new Error(msg);
        let name = "argumentTypeIncorrect";
        error.name = name;
        return error;
    }
}
let errors = new Errors();


/***/ }),

/***/ "./out/format-date.js":
/*!****************************!*\
  !*** ./out/format-date.js ***!
  \****************************/
/*! exports provided: formatDate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return formatDate; });
function formatDate(date, showHourMinutes) {
    if (typeof date == "string")
        return date;
    let d = date;
    if (showHourMinutes)
        return `${d.getFullYear()}-${d.getMonth()}-${d.getDate()} ${d.getHours() + 1}:${d.getMinutes()}`;
    return `${d.getFullYear()}-${d.getMonth()}-${d.getDate()}`;
}


/***/ }),

/***/ "./out/guid.js":
/*!*********************!*\
  !*** ./out/guid.js ***!
  \*********************/
/*! exports provided: guid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guid", function() { return guid; });
function guid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
}


/***/ }),

/***/ "./out/html.js":
/*!*********************!*\
  !*** ./out/html.js ***!
  \*********************/
/*! exports provided: HTML */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTML", function() { return HTML; });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ "./out/errors.js");

class HTML {
    static addClassName(element, addonClassName) {
        if (element == null)
            throw _errors__WEBPACK_IMPORTED_MODULE_0__["errors"].argumentNull('element');
        if (!addonClassName)
            throw _errors__WEBPACK_IMPORTED_MODULE_0__["errors"].argumentNull('addonClassName');
        let sourceClassName;
        if (typeof element == 'string')
            sourceClassName = element;
        else
            sourceClassName = element.className;
        sourceClassName = sourceClassName || '';
        console.assert(addonClassName != null);
        if (sourceClassName.indexOf(addonClassName) >= 0)
            return sourceClassName;
        let className = `${sourceClassName} ${addonClassName}`;
        if (typeof element != 'string')
            element.className = className;
        return className;
    }
    static removeClassName(element, targetClassName) {
        let sourceClassName;
        if (typeof element == 'string')
            sourceClassName = element;
        else
            sourceClassName = element.className || '';
        if (sourceClassName.indexOf(targetClassName) < 0)
            return sourceClassName;
        sourceClassName = sourceClassName || '';
        sourceClassName = sourceClassName.replace(new RegExp(targetClassName, 'g'), '');
        sourceClassName = sourceClassName.trim();
        if (typeof element != 'string')
            element.className = sourceClassName;
        return sourceClassName;
    }
}


/***/ }),

/***/ "./out/index.js":
/*!**********************!*\
  !*** ./out/index.js ***!
  \**********************/
/*! exports provided: guid, pathContact, Errors, errors, Callback, DataSource, DataSourceSelectArguments, parseUrl, deepEqual, objectAssignDeep, formatDate, HTML */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./guid */ "./out/guid.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "guid", function() { return _guid__WEBPACK_IMPORTED_MODULE_0__["guid"]; });

/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./path */ "./out/path.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pathContact", function() { return _path__WEBPACK_IMPORTED_MODULE_1__["pathContact"]; });

/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ "./out/errors.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Errors", function() { return _errors__WEBPACK_IMPORTED_MODULE_2__["Errors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "errors", function() { return _errors__WEBPACK_IMPORTED_MODULE_2__["errors"]; });

/* harmony import */ var _callback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./callback */ "./out/callback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Callback", function() { return _callback__WEBPACK_IMPORTED_MODULE_3__["Callback"]; });

/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data */ "./out/data.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataSource", function() { return _data__WEBPACK_IMPORTED_MODULE_4__["DataSource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataSourceSelectArguments", function() { return _data__WEBPACK_IMPORTED_MODULE_4__["DataSourceSelectArguments"]; });

/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./url */ "./out/url.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return _url__WEBPACK_IMPORTED_MODULE_5__["parseUrl"]; });

/* harmony import */ var _deep_equal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deep-equal */ "./out/deep-equal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deepEqual", function() { return _deep_equal__WEBPACK_IMPORTED_MODULE_6__["deepEqual"]; });

/* harmony import */ var _assign_deep__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./assign-deep */ "./out/assign-deep.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectAssignDeep", function() { return _assign_deep__WEBPACK_IMPORTED_MODULE_7__["objectAssignDeep"]; });

/* harmony import */ var _format_date__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./format-date */ "./out/format-date.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return _format_date__WEBPACK_IMPORTED_MODULE_8__["formatDate"]; });

/* harmony import */ var _html__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./html */ "./out/html.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HTML", function() { return _html__WEBPACK_IMPORTED_MODULE_9__["HTML"]; });













/***/ }),

/***/ "./out/path.js":
/*!*********************!*\
  !*** ./out/path.js ***!
  \*********************/
/*! exports provided: pathContact */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pathContact", function() { return pathContact; });
/** 连接多个路径 */
function pathContact(...paths) {
    paths = paths || [];
    if (paths.length == 0)
        return "";
    if (paths.length == 1) {
        return paths[0];
    }
    let str = paths.join("/");
    // 将一个或多个的 / 或者 变为一个 /，例如：/shop/test// 转换为 /shop/test/
    // 或者 D:\shop\test\  转换为 D:/shop/test/
    str = str.replace(/(\/+|\\+)/g, '/');
    //======================================================
    // fixed 把 http:// https:// 变为 http:/ https:/ 的 BUG
    str = str.replace("http:/", "http://");
    str = str.replace("https:/", "https://");
    //======================================================
    return str;
}


/***/ }),

/***/ "./out/url.js":
/*!********************!*\
  !*** ./out/url.js ***!
  \********************/
/*! exports provided: parseUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return parseUrl; });
function parseUrl(url) {
    let i = url.indexOf("?");
    if (i < 0)
        return {};
    let query = url.substr(i + 1);
    return pareeUrlQuery(query);
}
function pareeUrlQuery(query) {
    let match, pl = /\+/g, // Regex for replacing addition symbol with a space
    search = /([^&=]+)=?([^&]*)/g, decode = function (s) {
        return decodeURIComponent(s.replace(pl, " "));
    };
    let urlParams = {};
    while (match = search.exec(query))
        urlParams[decode(match[1])] = decode(match[2]);
    return urlParams;
}


/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./out-es5/controls/checkbox-list.js":
/*!*******************************************!*\
  !*** ./out-es5/controls/checkbox-list.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkboxList = void 0;

var errors_1 = __webpack_require__(/*! ../errors */ "./out-es5/errors.js");

function checkboxList(params) {
  return __awaiter(this, void 0, void 0,
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var dataSource, element, nameField, valueField, dataField, dataItem, r, elementDataItems;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (params) {
              _context.next = 2;
              break;
            }

            throw errors_1.errors.argumentNull('params');

          case 2:
            if (params.element) {
              _context.next = 4;
              break;
            }

            throw errors_1.errors.argumentFieldNull('params', 'element');

          case 4:
            if (params.dataSource) {
              _context.next = 6;
              break;
            }

            throw errors_1.errors.argumentFieldNull('params', 'dataSource');

          case 6:
            dataSource = params.dataSource, element = params.element, nameField = params.nameField, valueField = params.valueField, dataField = params.dataField, dataItem = params.dataItem;
            _context.next = 9;
            return dataSource.select({});

          case 9:
            r = _context.sent;
            elementDataItems = [];
            r.dataItems.map(function (o) {
              var label = document.createElement('label');
              var input = document.createElement('input');
              input.type = "checkbox";
              var span = document.createElement('span');
              label.appendChild(input);
              label.appendChild(span);
              var name = nameField ? o[nameField] : o;
              var value = valueField ? o[valueField] : o;
              input.value = "".concat(value);
              span.innerHTML = "".concat(name);

              if (dataItem[dataField] && !Array.isArray(dataItem[dataField])) {
                throw errors_1.errors.dataFieldValueNotArray(dataField);
              }

              if (value == dataItem[dataField]) {
                input.checked = true;
              }

              elementDataItems.push({
                element: input,
                dataItem: o
              });

              input.onchange = function (e) {
                dataItem[dataField] = elementDataItems.filter(function (o) {
                  return o.element.checked;
                }).map(function (o) {
                  return o.dataItem[valueField];
                });
              };

              element.appendChild(label);
            });

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}

exports.checkboxList = checkboxList;
//# sourceMappingURL=checkbox-list.js.map


/***/ }),

/***/ "./out-es5/controls/dropdown.js":
/*!**************************************!*\
  !*** ./out-es5/controls/dropdown.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropdown = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

function dropdown(args) {
  return new w.DropDown(args);
}

exports.dropdown = dropdown;
//# sourceMappingURL=dropdown.js.map


/***/ }),

/***/ "./out-es5/controls/radio-list.js":
/*!****************************************!*\
  !*** ./out-es5/controls/radio-list.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.radioList = void 0;

var errors_1 = __webpack_require__(/*! ../errors */ "./out-es5/errors.js");

function radioList(params) {
  return __awaiter(this, void 0, void 0,
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var dataSource, element, nameField, valueField, dataField, r, getDataSourceItemName, getDataSourceItemValue;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            getDataSourceItemValue = function _ref2(item) {
              if (!valueField) return item;
              return item[valueField];
            };

            getDataSourceItemName = function _ref(item) {
              if (!nameField) return item;
              return item[nameField];
            };

            if (params) {
              _context.next = 4;
              break;
            }

            throw errors_1.errors.argumentNull('params');

          case 4:
            if (params.element) {
              _context.next = 6;
              break;
            }

            throw errors_1.errors.argumentFieldNull('params', 'element');

          case 6:
            if (params.dataSource) {
              _context.next = 8;
              break;
            }

            throw errors_1.errors.argumentFieldNull('params', 'dataSource');

          case 8:
            dataSource = params.dataSource, element = params.element, nameField = params.nameField, valueField = params.valueField, dataField = params.dataField;
            _context.next = 11;
            return dataSource.select({});

          case 11:
            r = _context.sent;
            element.innerHTML = "";
            r.dataItems.map(function (o) {
              var label = document.createElement('label');
              label.className = "radio-inline";
              var controlElement = document.createElement('input');
              controlElement.type = "radio";
              controlElement.name = dataField;
              var nameElement = document.createElement('span');
              label.appendChild(controlElement);
              label.appendChild(nameElement);
              var itemName = getDataSourceItemName(o);
              var itemValue = getDataSourceItemValue(o);
              controlElement.value = "".concat(itemValue);
              nameElement.innerHTML = "".concat(itemName);

              controlElement.onchange = function (e) {
                params.dataItem[dataField] = itemValue;
              };

              var value = params.dataItem[dataField] || params.defaultValue;

              if (value == itemValue) {
                controlElement.checked = true;
              }

              element.appendChild(label);
            });

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}

exports.radioList = radioList;
//# sourceMappingURL=radio-list.js.map


/***/ }),

/***/ "./out-es5/data-item-dialog.js":
/*!*************************************!*\
  !*** ./out-es5/data-item-dialog.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _element;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataItemDialog = exports.DataItemDialog = void 0;

var maishu_ui_toolkit_1 = __webpack_require__(/*! maishu-ui-toolkit */ "maishu-ui-toolkit");

var maishu_dilu_1 = __webpack_require__(/*! maishu-dilu */ "maishu-dilu");

var DataItemDialog =
/*#__PURE__*/
function () {
  function DataItemDialog(params) {
    _classCallCheck(this, DataItemDialog);

    _element.set(this, void 0);

    this.params = Object.assign({
      cancelButtonText: "取消",
      confirmButtonText: "确定"
    }, params);
    this.dataCells = [];
    params.fields.forEach(function (c) {
      var headerStyle = c.headerStyle || {};
      headerStyle.textAlign = "right";
      delete headerStyle.width;
      var itemStyle = c.itemStyle || {};
      delete itemStyle.width;
    });
    var validateFiels = params.fields.filter(function (c) {
      return c.validateRules != null && c.dataField != null;
    }).map(function (o) {
      return {
        name: o.dataField,
        rules: o.validateRules
      };
    });
    this.validator = _construct(maishu_dilu_1.FormValidator, [params.element].concat(_toConsumableArray(validateFiels)));

    __classPrivateFieldSet(this, _element, this.createDialogElement());
  }

  _createClass(DataItemDialog, [{
    key: "show",
    value: function show(dataItem) {
      dataItem = dataItem || {};

      for (var i = 0; i < this.dataCells.length; i++) {
        if (this.dataCells[i].type == "GridViewEditableCell") {
          var cell = this.dataCells[i];
          cell.render(dataItem, "edit");
        }
      }

      maishu_ui_toolkit_1.showDialog(this.params.element);
    }
  }, {
    key: "hide",
    value: function hide() {
      maishu_ui_toolkit_1.hideDialog(this.params.element);
    }
  }, {
    key: "invokeOnConfirm",
    value: function invokeOnConfirm() {
      var dataItem = {};

      for (var i = 0; i < this.dataCells.length; i++) {
        if (this.dataCells[i].type == "GridViewEditableCell") {
          var cell = this.dataCells[i];
          dataItem[cell.dataField] = cell.controlValue;
        }
      }

      if (!this.validator.check()) return;
      this.hide();

      if (this.params.onConfirm) {
        this.params.onConfirm(dataItem);
      }
    }
  }, {
    key: "invokeOnCancel",
    value: function invokeOnCancel() {
      if (this.params.onCancel) {
        this.params.onCancel();
      }
    }
  }, {
    key: "createDialogElement",
    value: function createDialogElement() {
      var _this = this;

      var dialogElement = document.createElement("div");
      dialogElement.className = "modal-dialog";
      dialogElement.innerHTML = "<div class=\"modal-dialog\">\n<div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <button type=\"button\" class=\"btn close\" data-dismiss=\"modal\">\n            <span aria-hidden=\"true\">&times;</span>\n            <span class=\"sr-only\">Close</span>\n        </button>\n        <h4 class=\"modal-title\">".concat(this.params.title || "", "</h4>\n    </div>\n    <div class=\"modal-body\">\n    </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">\n            ").concat(this.params.cancelButtonText, "\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\">\n            ").concat(this.params.confirmButtonText, "\n        </button>\n    </div>\n</div>\n</div>");
      this.params.element.appendChild(dialogElement);
      var confirmButton = dialogElement.querySelector(".btn-primary");

      confirmButton.onclick = function () {
        return _this.invokeOnConfirm();
      };

      var cancelButton = dialogElement.querySelector(".btn-default");

      cancelButton.onclick = function () {
        return _this.invokeOnCancel();
      };

      var bodyElement = dialogElement.querySelector(".modal-body");
      this.params.fields.forEach(function (field) {
        if (!field.visible) {
          return;
        }

        var fieldElement = document.createElement("div");
        fieldElement.className = "form-group clearfix input-control";
        bodyElement.appendChild(fieldElement);
        var labelElement = document.createElement("label");
        labelElement.innerHTML = field.headerText;
        fieldElement.appendChild(labelElement);
        var controlContainerElement = document.createElement("div");
        controlContainerElement.className = "control";
        fieldElement.appendChild(controlContainerElement);
        var boundField = field;
        boundField.createHeaderCell(labelElement);
        var dataCell = boundField.createItemCell({}, controlContainerElement);

        _this.dataCells.push(dataCell);
      });
      return dialogElement;
    }
  }, {
    key: "title",
    get: function get() {
      var titleElement = __classPrivateFieldGet(this, _element).querySelector(".modal-title");

      return titleElement === null || titleElement === void 0 ? void 0 : titleElement.innerHTML;
    },
    set: function set(value) {
      var titleElement = __classPrivateFieldGet(this, _element).querySelector(".modal-title");

      if (titleElement == null) return;
      titleElement.innerHTML = value || "";
    }
  }, {
    key: "onConfirm",
    get: function get() {
      return this.params.onConfirm;
    },
    set: function set(value) {
      this.params.onConfirm = value;
    }
  }, {
    key: "onCancel",
    get: function get() {
      return this.params.onCancel;
    },
    set: function set(value) {
      this.params.onCancel = value;
    }
  }]);

  return DataItemDialog;
}();

exports.DataItemDialog = DataItemDialog;
_element = new WeakMap();

function createDataItemDialog(params) {
  var dialog = new DataItemDialog(params);
  return dialog;
}

exports.createDataItemDialog = createDataItemDialog;
//# sourceMappingURL=data-item-dialog.js.map


/***/ }),

/***/ "./out-es5/errors.js":
/*!***************************!*\
  !*** ./out-es5/errors.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errors = void 0;
exports.errors = {
  argumentNull: function argumentNull(paramName) {
    return new Error("Argument '" + paramName + "' can not be null.");
  },
  argumentFieldNull: function argumentFieldNull(argumentName, fieldName) {
    var msg = "Argument ".concat(argumentName, " ").concat(fieldName, " field can not be null or empty.");
    return new Error(msg);
  },
  dataFieldValueNotArray: function dataFieldValueNotArray(dataField) {
    var msg = "Type of dataitem ".concat(dataField, " field is not array.");
    return new Error(msg);
  },
  gridViewElementError: function gridViewElementError() {
    var msg = "Grid view element type error, the tagName must be TABLE or DIV.";
    return new Error(msg);
  }
};
//# sourceMappingURL=errors.js.map


/***/ }),

/***/ "./out-es5/fields/bound-field.js":
/*!***************************************!*\
  !*** ./out-es5/fields/bound-field.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boundField = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

var errors_1 = __webpack_require__(/*! ../errors */ "./out-es5/errors.js");

function boundField(params) {
  if (!params) throw errors_1.errors.argumentNull('params');
  params.headerStyle = Object.assign({
    textAlign: 'center'
  }, params.headerStyle || {});
  if (params.nullText == null) params.nullText = '';
  var field = new w.BoundField(params); // let validateRules = {
  //     validateRules: params.validateRules
  // }
  // let r = Object.assign(field, validateRules);

  var createControl = field.createControl;

  field.createControl = function () {
    if (params.createControl) {
      var _ctrl = params.createControl.apply(this, []);

      return _ctrl;
    }

    var ctrl = createControl.apply(this, []); // if (params.emptyText)
    //     (<HTMLInputElement>ctrl.element).placeholder = params.emptyText;

    ctrl.element.className = "form-control"; // (<HTMLInputElement>ctrl.element).name = params.dataField;

    return ctrl;
  };

  var createItemCell = field.createItemCell;

  field.createItemCell = function (dataItem, cellElement) {
    var cell = createItemCell.apply(this, [dataItem, cellElement]);
    var render = cell.render;

    cell.render = function (dataItem, mode) {
      if (params.renderCell) {
        params.renderCell(cell, dataItem, mode);
      } else {
        render.apply(cell, [dataItem, mode]);
      }
    };

    return cell;
  };

  return field;
}

exports.boundField = boundField;
//# sourceMappingURL=bound-field.js.map


/***/ }),

/***/ "./out-es5/fields/checkbox-list-field.js":
/*!***********************************************!*\
  !*** ./out-es5/fields/checkbox-list-field.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkboxListField = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

function checkboxListField(params) {
  var field = new CheckboxListField(params);
  return field;
}

exports.checkboxListField = checkboxListField;

var CheckboxListField =
/*#__PURE__*/
function (_w$BoundField) {
  _inherits(CheckboxListField, _w$BoundField);

  function CheckboxListField(params) {
    var _this;

    _classCallCheck(this, CheckboxListField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxListField).call(this, params));
    _this.checkboxs = {};
    _this._params = params;
    return _this;
  }

  _createClass(CheckboxListField, [{
    key: "getDataItems",
    value: function getDataItems() {
      return __awaiter(this, void 0, void 0,
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var r;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.dataItems) {
                  _context.next = 5;
                  break;
                }

                _context.next = 3;
                return this._params.dataSource.select();

              case 3:
                r = _context.sent;
                this.dataItems = r.dataItems;

              case 5:
                return _context.abrupt("return", this.dataItems);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "setControlValue",
    value: function setControlValue(value) {
      value = value || [];

      for (var i = 0; i < value.length; i++) {
        var checkbox = this.checkboxs[value[i]];

        if (checkbox) {
          checkbox.checked = true;
        }
      }
    }
  }, {
    key: "createControl",
    value: function createControl() {
      var _this2 = this;

      var element = document.createElement("div");
      this.getDataItems().then(function (dataItems) {
        _this2.dataItems = dataItems;

        for (var i = 0; i < dataItems.length; i++) {
          console.assert(_this2._params.nameField != null);
          console.assert(_this2._params.valueField != null);
          var name = dataItems[i][_this2._params.nameField];
          var value = dataItems[i][_this2._params.valueField];
          var itemCtrl = document.createElement("div");
          itemCtrl.innerHTML = "<label><input type=\"checkbox\" value=\"".concat(value, "\">").concat(name, "</label>");
          itemCtrl.className = "checkbox";
          element.appendChild(itemCtrl);
          var checkbox = itemCtrl.querySelector("input");
          _this2.checkboxs["".concat(value)] = checkbox;
        }

        if (self.value) {
          _this2.setControlValue(self.value);
        }
      });
      var self = this;
      return {
        element: element,

        get value() {
          var checkboxs = [];

          for (var c in self.checkboxs) {
            if (self.checkboxs[c].checked) {
              checkboxs.push(self.checkboxs[c]);
            }
          }

          var value = checkboxs.map(function (o) {
            return o.value;
          });
          return value;
        },

        set value(value) {
          self.value = value;
          self.setControlValue(value);
        }

      };
    }
  }, {
    key: "createItemCell",
    value: function createItemCell(dataItem) {
      var field = this;

      var cell = _get(_getPrototypeOf(CheckboxListField.prototype), "createItemCell", this).call(this, dataItem);

      cell.render = function (dataItem) {
        var _this3 = this;

        field.getDataItems().then(function (dataItems) {
          var value = dataItem[field._params.dataField];
          var names = [];

          var _loop = function _loop(i) {
            var dataItem = dataItems.filter(function (o) {
              return o[field._params.valueField] == value[i];
            })[0];

            if (dataItem) {
              names.push(dataItem[field._params.nameField]);
            }
          };

          for (var i = 0; i < value.length; i++) {
            _loop(i);
          }

          var text = names.filter(function (o) {
            return o;
          }).join(",");
          _this3.element.innerHTML = text;
        });
      };

      return cell;
    }
  }]);

  return CheckboxListField;
}(w.BoundField);
//# sourceMappingURL=checkbox-list-field.js.map


/***/ }),

/***/ "./out-es5/fields/command-field.js":
/*!*****************************************!*\
  !*** ./out-es5/fields/command-field.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commandField = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

var errors_1 = __webpack_require__(/*! ../errors */ "./out-es5/errors.js");

function commandField(params) {
  if (!params) throw errors_1.errors.argumentNull('params');
  return new w.CommandField(params);
}

exports.commandField = commandField;
//# sourceMappingURL=command-field.js.map


/***/ }),

/***/ "./out-es5/fields/custom-data-field.js":
/*!*********************************************!*\
  !*** ./out-es5/fields/custom-data-field.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customDataField = void 0;

var maishu_wuzhui_1 = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

function customDataField(params) {
  return new maishu_wuzhui_1.CustomField({
    headerText: params.headerText,
    headerStyle: params.headerStyle,
    itemStyle: params.itemStyle,
    createItemCell: function createItemCell(dataItem, cellElement) {
      var cell = new maishu_wuzhui_1.GridViewDataCell({
        render: function render(dataItem, element) {
          var r = params.render(dataItem, element);
          if (r) element.innerHTML = r;
        }
      }, cellElement);
      return cell;
    }
  });
}

exports.customDataField = customDataField;
//# sourceMappingURL=custom-data-field.js.map


/***/ }),

/***/ "./out-es5/fields/custom-field.js":
/*!****************************************!*\
  !*** ./out-es5/fields/custom-field.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customField = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

var errors_1 = __webpack_require__(/*! ../errors */ "./out-es5/errors.js");

function customField(params) {
  if (!params) throw errors_1.errors.argumentNull('params');
  params.headerStyle = Object.assign({
    textAlign: 'center'
  }, params.headerStyle || {});
  var field = new w.CustomField(params);
  return field;
}

exports.customField = customField;
//# sourceMappingURL=custom-field.js.map


/***/ }),

/***/ "./out-es5/fields/date-time-field.js":
/*!*******************************************!*\
  !*** ./out-es5/fields/date-time-field.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toDateTimeString = exports.dateTimeField = void 0;

var maishu_wuzhui_1 = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

function dateTimeField(args) {
  var field = new DateTimeField(args);
  return field;
}

exports.dateTimeField = dateTimeField;

var DateTimeField =
/*#__PURE__*/
function (_maishu_wuzhui_1$Boun) {
  _inherits(DateTimeField, _maishu_wuzhui_1$Boun);

  function DateTimeField(args) {
    var _this;

    _classCallCheck(this, DateTimeField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateTimeField).call(this, Object.assign({
      headerStyle: {
        textAlign: 'center',
        width: "160px"
      },
      itemStyle: {
        textAlign: 'center',
        width: "160px"
      }
    }, args)));
    _this.emptyText = args.emptyText;
    return _this;
  }

  _createClass(DateTimeField, [{
    key: "createControl",
    value: function createControl() {
      var ctrl = _get(_getPrototypeOf(DateTimeField.prototype), "createControl", this).call(this);

      var VALUE = "value";
      Object.defineProperty(ctrl, VALUE, {
        get: function get() {
          var str = ctrl.element.value;
          var value = null;

          try {
            value = new Date(Date.parse(str));
          } catch (err) {}

          return value;
        },
        set: function set(value) {
          var str = toDateTimeString(value);
          ctrl.element.value = str || "";
        }
      });
      if (this.emptyText) ctrl.element.placeholder = this.emptyText;
      ctrl.element.className = "form-control";
      ctrl.element.name = this.params.dataField;
      return ctrl;
    }
  }, {
    key: "createItemCell",
    value: function createItemCell(dataItem, cellElement) {
      var cell = _get(_getPrototypeOf(DateTimeField.prototype), "createItemCell", this).call(this, dataItem, cellElement);

      cell.formatValue = function (value) {
        return toDateTimeString(value) || "";
      };

      return cell;
    }
  }]);

  return DateTimeField;
}(maishu_wuzhui_1.BoundField);

function toDateTimeString(datetime) {
  if (datetime == null) return null;

  if (typeof datetime == "string") {
    datetime = new Date(datetime);
  }

  var d;
  if (typeof datetime == 'number') d = new Date(datetime);else d = datetime;
  var month = "".concat(d.getMonth() + 1);
  month = month.length == 1 ? '0' + month : month;
  var date = "".concat(d.getDate());
  date = date.length == 1 ? '0' + date : date;
  var hours = "".concat(d.getHours());
  hours = hours.length == 1 ? '0' + hours : hours;
  var minutes = "".concat(d.getMinutes());
  minutes = minutes.length == 1 ? '0' + minutes : minutes;
  return "".concat(d.getFullYear(), "-").concat(month, "-").concat(date, " ").concat(hours, ":").concat(minutes);
}

exports.toDateTimeString = toDateTimeString;
//# sourceMappingURL=date-time-field.js.map


/***/ }),

/***/ "./out-es5/fields/dropdown-field.js":
/*!******************************************!*\
  !*** ./out-es5/fields/dropdown-field.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropdownField = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

var emptyValue = "";

function dropdownField(params) {
  var field = new w.DropdownField(params);
  return field;
}

exports.dropdownField = dropdownField;
//# sourceMappingURL=dropdown-field.js.map


/***/ }),

/***/ "./out-es5/grid-view.js":
/*!******************************!*\
  !*** ./out-es5/grid-view.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGridView = void 0;

var w = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js"); // import { ElementProvider } from 'maishu-wuzhui';


var errors_1 = __webpack_require__(/*! ./errors */ "./out-es5/errors.js");

var style_1 = __webpack_require__(/*! ./style */ "./out-es5/style.js");

function createGridView(params) {
  params = Object.assign({
    pageSize: 10,
    dataSource: null,
    columns: null
  }, params);
  if (params.pageSize === null) params.showPagingBar = false;

  if (params.pagerSettings == null) {
    params.pagerSettings = Object.assign(w.DataSourcePagingBar.defaultPagerSettings, {
      activeButtonClassName: 'active',
      buttonContainerWraper: 'ul',
      buttonWrapper: 'li',
      buttonContainerClassName: 'pagination',
      showTotal: true
    });
  }

  console.assert(params.element != null, 'element can not null.');
  if (params.element == null) throw errors_1.errors.argumentFieldNull("param", "element");
  if (params.element.tagName != "TABLE" && params.element.tagName != "DIV") throw errors_1.errors.gridViewElementError();
  var gridView;

  if (params.element.tagName == "TABLE") {
    params.element.className = 'table table-striped table-bordered table-hover';
    gridView = new w.GridView(params);
  } else {
    gridView = new WraperGridView(params);
  }

  ;
  return gridView;
}

exports.createGridView = createGridView;

var WraperGridView =
/*#__PURE__*/
function (_w$GridView) {
  _inherits(WraperGridView, _w$GridView);

  function WraperGridView(params) {
    var _this;

    _classCallCheck(this, WraperGridView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WraperGridView).call(this, WraperGridView.init(params)));

    _this.createHeader(params);

    _this.createFooter(params);

    return _this;
  }

  _createClass(WraperGridView, [{
    key: "createHeader",
    value: function createHeader(params) {
      var headerElement = params.element.querySelector(".header thead");
      console.assert(headerElement != null);
      var rowElement = document.createElement("tr");
      headerElement.appendChild(rowElement);

      for (var i = 0; i < params.columns.length; i++) {
        var cellElement = document.createElement("th");
        rowElement.appendChild(cellElement);
        params.columns[i].createHeaderCell(cellElement);
      }
    }
  }, {
    key: "createFooter",
    value: function createFooter(params) {
      var footerElement = params.element.querySelector(".footer");
      var pagingBarElement = document.createElement("div");
      pagingBarElement.className = "".concat(w.GridView.pagingBarClassName, " clearfix");
      new w.DataSourcePagingBar({
        dataSource: params.dataSource,
        element: pagingBarElement
      });
      footerElement.appendChild(pagingBarElement);
      params.element.appendChild(footerElement);
    }
  }], [{
    key: "init",
    value: function init(params) {
      params.element.innerHTML = "\n            <div class=\"main\">\n                <table class=\"header table table-bordered\">\n                    <thead></thead>\n                </table>\n                <table class=\"body table table-striped table-bordered table-hover\"></table>\n            </div>\n            <div class=\"footer\"/>";
      var headerElement = params.element.querySelector(".header");
      var bodyElement = params.element.querySelector(".body");
      var mainElement = params.element.querySelector(".main");
      this.onScroll(mainElement, headerElement);
      params.columns.forEach(function (c) {
        c.headerStyle = c.headerStyle || {};
        c.itemStyle = c.itemStyle || {};
        c.itemStyle.width = c.headerStyle.width = c.headerStyle.width || WraperGridView.DefaultColumnWidth;
      });
      var tableWidth = this.calcColumnsWidth(params.columns);
      headerElement.style.width = "".concat(tableWidth, "px");
      bodyElement.style.width = "".concat(tableWidth, "px");
      params.element.className = style_1.classNames.gridViewWraper;
      var obj = Object.assign({}, params, {
        showFooter: false,
        showPagingBar: false,
        element: bodyElement,
        dataSource: params.dataSource,
        columns: params.columns,
        showHeader: false
      });
      return obj;
    }
  }, {
    key: "onScroll",
    value: function onScroll(mainElement, headerElement) {
      mainElement.onscroll = function (e) {
        headerElement.style.top = "".concat(mainElement.scrollTop, "px");
      };
    }
  }, {
    key: "calcColumnsWidth",
    value: function calcColumnsWidth(columns) {
      var width = 0;
      columns.forEach(function (c) {
        var _a;

        console.assert(c.headerStyle.width != null);
        width = width + Number.parseInt((_a = c.headerStyle.width) === null || _a === void 0 ? void 0 : _a.replace("px", ""));
      });
      return width;
    }
  }]);

  return WraperGridView;
}(w.GridView);

WraperGridView.DefaultColumnWidth = "120px";
//# sourceMappingURL=grid-view.js.map


/***/ }),

/***/ "./out-es5/index.js":
/*!**************************!*\
  !*** ./out-es5/index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = void 0 && (void 0).__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataItemDialog = exports.createDataItemDialog = exports.createPagingBar = exports.createGridView = exports.radioList = exports.checkboxList = exports.dropdown = exports.checkboxListField = exports.dropdownField = exports.dateTimeField = exports.customField = exports.customDataField = exports.commandField = exports.boundField = void 0;

var bound_field_1 = __webpack_require__(/*! ./fields/bound-field */ "./out-es5/fields/bound-field.js");

Object.defineProperty(exports, "boundField", {
  enumerable: true,
  get: function get() {
    return bound_field_1.boundField;
  }
});

var command_field_1 = __webpack_require__(/*! ./fields/command-field */ "./out-es5/fields/command-field.js");

Object.defineProperty(exports, "commandField", {
  enumerable: true,
  get: function get() {
    return command_field_1.commandField;
  }
});

var custom_data_field_1 = __webpack_require__(/*! ./fields/custom-data-field */ "./out-es5/fields/custom-data-field.js");

Object.defineProperty(exports, "customDataField", {
  enumerable: true,
  get: function get() {
    return custom_data_field_1.customDataField;
  }
});

var custom_field_1 = __webpack_require__(/*! ./fields/custom-field */ "./out-es5/fields/custom-field.js");

Object.defineProperty(exports, "customField", {
  enumerable: true,
  get: function get() {
    return custom_field_1.customField;
  }
});

var date_time_field_1 = __webpack_require__(/*! ./fields/date-time-field */ "./out-es5/fields/date-time-field.js");

Object.defineProperty(exports, "dateTimeField", {
  enumerable: true,
  get: function get() {
    return date_time_field_1.dateTimeField;
  }
});

var dropdown_field_1 = __webpack_require__(/*! ./fields/dropdown-field */ "./out-es5/fields/dropdown-field.js");

Object.defineProperty(exports, "dropdownField", {
  enumerable: true,
  get: function get() {
    return dropdown_field_1.dropdownField;
  }
});

var checkbox_list_field_1 = __webpack_require__(/*! ./fields/checkbox-list-field */ "./out-es5/fields/checkbox-list-field.js");

Object.defineProperty(exports, "checkboxListField", {
  enumerable: true,
  get: function get() {
    return checkbox_list_field_1.checkboxListField;
  }
});

var dropdown_1 = __webpack_require__(/*! ./controls/dropdown */ "./out-es5/controls/dropdown.js");

Object.defineProperty(exports, "dropdown", {
  enumerable: true,
  get: function get() {
    return dropdown_1.dropdown;
  }
});

var checkbox_list_1 = __webpack_require__(/*! ./controls/checkbox-list */ "./out-es5/controls/checkbox-list.js");

Object.defineProperty(exports, "checkboxList", {
  enumerable: true,
  get: function get() {
    return checkbox_list_1.checkboxList;
  }
});

var radio_list_1 = __webpack_require__(/*! ./controls/radio-list */ "./out-es5/controls/radio-list.js");

Object.defineProperty(exports, "radioList", {
  enumerable: true,
  get: function get() {
    return radio_list_1.radioList;
  }
});

var grid_view_1 = __webpack_require__(/*! ./grid-view */ "./out-es5/grid-view.js");

Object.defineProperty(exports, "createGridView", {
  enumerable: true,
  get: function get() {
    return grid_view_1.createGridView;
  }
});

var paging_bar_1 = __webpack_require__(/*! ./paging-bar */ "./out-es5/paging-bar.js");

Object.defineProperty(exports, "createPagingBar", {
  enumerable: true,
  get: function get() {
    return paging_bar_1.createPagingBar;
  }
});

var data_item_dialog_1 = __webpack_require__(/*! ./data-item-dialog */ "./out-es5/data-item-dialog.js");

Object.defineProperty(exports, "createDataItemDialog", {
  enumerable: true,
  get: function get() {
    return data_item_dialog_1.createDataItemDialog;
  }
});
Object.defineProperty(exports, "DataItemDialog", {
  enumerable: true,
  get: function get() {
    return data_item_dialog_1.DataItemDialog;
  }
});

__exportStar(__webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js"), exports);

__webpack_require__(/*! ./style */ "./out-es5/style.js");
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./out-es5/paging-bar.js":
/*!*******************************!*\
  !*** ./out-es5/paging-bar.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPagingBar = void 0;

var maishu_wuzhui_1 = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

var errors_1 = __webpack_require__(/*! ./errors */ "./out-es5/errors.js");

function createPagingBar(params) {
  if (!params.dataSource) throw errors_1.errors.argumentFieldNull("params", "dataSource");
  if (!params.element) throw errors_1.errors.argumentFieldNull("params", "element");
  return new maishu_wuzhui_1.DataSourcePagingBar({
    dataSource: params.dataSource,
    element: params.element,
    pagerSettings: {
      activeButtonClassName: 'active',
      buttonWrapper: 'li',
      buttonContainerWraper: 'ul',
      showTotal: false
    }
  });
}

exports.createPagingBar = createPagingBar;
//# sourceMappingURL=paging-bar.js.map


/***/ }),

/***/ "./out-es5/style.js":
/*!**************************!*\
  !*** ./out-es5/style.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.footerHeight = exports.classNames = void 0;

var maishu_wuzhui_1 = __webpack_require__(/*! maishu-wuzhui */ "./node_modules/maishu-wuzhui/dist/index.js");

exports.classNames = {
  inputControl: "input-control",
  gridViewWraper: "grid-view-wraper"
};
exports.footerHeight = 52;
var element = document.createElement('style');
element.type = 'text/css';
element.setAttribute("data-name", "wuzhui-helper");

if (document.head != null) {
  document.head.appendChild(element);
}

var labelWidth = 80;
var margin = 20;
element.innerHTML = "\n    .".concat(exports.classNames.inputControl, " label {\n        width: ").concat(labelWidth, "px;\n        float: left;\n    }\n    .").concat(exports.classNames.inputControl, " .control {\n        margin-left: ").concat(margin, "px;\n        width: calc(100% - ").concat(labelWidth + margin, "px);\n        float: left;\n    }\n    .").concat(exports.classNames.inputControl, " .validationMessage {\n        color: red\n    }\n    .").concat(maishu_wuzhui_1.GridView.pagingBarClassName, " .pagination {\n        margin-top: 0;\n        margin-bottom: 0;\n        float: right;\n    } \n    .").concat(maishu_wuzhui_1.GridView.pagingBarClassName, " .total {\n        float: left;\n        padding-top: 8px;\n    }\n    .").concat(exports.classNames.gridViewWraper, " {\n        border: 1px solid #ddd;\n    }\n    .").concat(exports.classNames.gridViewWraper, " .main{\n        overflow: auto;\n    }\n    .").concat(exports.classNames.gridViewWraper, " .table {\n        margin-bottom: 0;\n        max-width: unset;\n        min-width: 100%;\n    }\n    .").concat(exports.classNames.gridViewWraper, " .header {\n        background-color: white;\n        position: relative;\n    }\n    .").concat(exports.classNames.gridViewWraper, " .footer  {\n        border: 1px solid #ddd;\n        border-top: none;\n        padding: 8px;\n        height: ").concat(exports.footerHeight, "px;\n    }\n    .").concat(exports.classNames.gridViewWraper, " .footer .").concat(maishu_wuzhui_1.GridView.pagingBarClassName, " .pagination {\n        float: right;\n        margin: 0;\n    }\n    .").concat(exports.classNames.gridViewWraper, " .footer .").concat(maishu_wuzhui_1.GridView.pagingBarClassName, " .total {\n        float: left;\n    }\n");
//# sourceMappingURL=style.js.map


/***/ }),

/***/ "maishu-dilu":
/*!******************************!*\
  !*** external "maishu-dilu" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_dilu__;

/***/ }),

/***/ "maishu-ui-toolkit":
/*!************************************!*\
  !*** external "maishu-ui-toolkit" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_ui_toolkit__;

/***/ })

/******/ });
});
//# sourceMappingURL=index.es5.js.map