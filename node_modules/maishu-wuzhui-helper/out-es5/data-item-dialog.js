"use strict";

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _element;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataItemDialog = exports.DataItemDialog = void 0;

var maishu_ui_toolkit_1 = require("maishu-ui-toolkit");

var maishu_dilu_1 = require("maishu-dilu");

var DataItemDialog =
/*#__PURE__*/
function () {
  function DataItemDialog(params) {
    _classCallCheck(this, DataItemDialog);

    _element.set(this, void 0);

    this.params = Object.assign({
      cancelButtonText: "取消",
      confirmButtonText: "确定"
    }, params);
    this.dataCells = [];
    params.fields.forEach(function (c) {
      var headerStyle = c.headerStyle || {};
      headerStyle.textAlign = "right";
      delete headerStyle.width;
      var itemStyle = c.itemStyle || {};
      delete itemStyle.width;
    });
    var validateFiels = params.fields.filter(function (c) {
      return c.validateRules != null && c.dataField != null;
    }).map(function (o) {
      return {
        name: o.dataField,
        rules: o.validateRules
      };
    });
    this.validator = _construct(maishu_dilu_1.FormValidator, [params.element].concat(_toConsumableArray(validateFiels)));

    __classPrivateFieldSet(this, _element, this.createDialogElement());
  }

  _createClass(DataItemDialog, [{
    key: "show",
    value: function show(dataItem) {
      dataItem = dataItem || {};

      for (var i = 0; i < this.dataCells.length; i++) {
        if (this.dataCells[i].type == "GridViewEditableCell") {
          var cell = this.dataCells[i];
          cell.render(dataItem, "edit");
        }
      }

      maishu_ui_toolkit_1.showDialog(this.params.element);
    }
  }, {
    key: "hide",
    value: function hide() {
      maishu_ui_toolkit_1.hideDialog(this.params.element);
    }
  }, {
    key: "invokeOnConfirm",
    value: function invokeOnConfirm() {
      var dataItem = {};

      for (var i = 0; i < this.dataCells.length; i++) {
        if (this.dataCells[i].type == "GridViewEditableCell") {
          var cell = this.dataCells[i];
          dataItem[cell.dataField] = cell.controlValue;
        }
      }

      if (!this.validator.check()) return;
      this.hide();

      if (this.params.onConfirm) {
        this.params.onConfirm(dataItem);
      }
    }
  }, {
    key: "invokeOnCancel",
    value: function invokeOnCancel() {
      if (this.params.onCancel) {
        this.params.onCancel();
      }
    }
  }, {
    key: "createDialogElement",
    value: function createDialogElement() {
      var _this = this;

      var dialogElement = document.createElement("div");
      dialogElement.className = "modal-dialog";
      dialogElement.innerHTML = "<div class=\"modal-dialog\">\n<div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <button type=\"button\" class=\"btn close\" data-dismiss=\"modal\">\n            <span aria-hidden=\"true\">&times;</span>\n            <span class=\"sr-only\">Close</span>\n        </button>\n        <h4 class=\"modal-title\">".concat(this.params.title || "", "</h4>\n    </div>\n    <div class=\"modal-body\">\n    </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">\n            ").concat(this.params.cancelButtonText, "\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\">\n            ").concat(this.params.confirmButtonText, "\n        </button>\n    </div>\n</div>\n</div>");
      this.params.element.appendChild(dialogElement);
      var confirmButton = dialogElement.querySelector(".btn-primary");

      confirmButton.onclick = function () {
        return _this.invokeOnConfirm();
      };

      var cancelButton = dialogElement.querySelector(".btn-default");

      cancelButton.onclick = function () {
        return _this.invokeOnCancel();
      };

      var bodyElement = dialogElement.querySelector(".modal-body");
      this.params.fields.forEach(function (field) {
        if (!field.visible) {
          return;
        }

        var fieldElement = document.createElement("div");
        fieldElement.className = "form-group clearfix input-control";
        bodyElement.appendChild(fieldElement);
        var labelElement = document.createElement("label");
        labelElement.innerHTML = field.headerText;
        fieldElement.appendChild(labelElement);
        var controlContainerElement = document.createElement("div");
        controlContainerElement.className = "control";
        fieldElement.appendChild(controlContainerElement);
        var boundField = field;
        boundField.createHeaderCell(labelElement);
        var dataCell = boundField.createItemCell({}, controlContainerElement);

        _this.dataCells.push(dataCell);
      });
      return dialogElement;
    }
  }, {
    key: "title",
    get: function get() {
      var titleElement = __classPrivateFieldGet(this, _element).querySelector(".modal-title");

      return titleElement === null || titleElement === void 0 ? void 0 : titleElement.innerHTML;
    },
    set: function set(value) {
      var titleElement = __classPrivateFieldGet(this, _element).querySelector(".modal-title");

      if (titleElement == null) return;
      titleElement.innerHTML = value || "";
    }
  }, {
    key: "onConfirm",
    get: function get() {
      return this.params.onConfirm;
    },
    set: function set(value) {
      this.params.onConfirm = value;
    }
  }, {
    key: "onCancel",
    get: function get() {
      return this.params.onCancel;
    },
    set: function set(value) {
      this.params.onCancel = value;
    }
  }]);

  return DataItemDialog;
}();

exports.DataItemDialog = DataItemDialog;
_element = new WeakMap();

function createDataItemDialog(params) {
  var dialog = new DataItemDialog(params);
  return dialog;
}

exports.createDataItemDialog = createDataItemDialog;
//# sourceMappingURL=data-item-dialog.js.map
