"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var w = require("maishu-wuzhui");

function checkboxListField(params) {
  var field = new CheckboxListField(params);
  return field;
}

exports.checkboxListField = checkboxListField;

var CheckboxListField =
/*#__PURE__*/
function (_w$BoundField) {
  _inherits(CheckboxListField, _w$BoundField);

  function CheckboxListField(params) {
    var _this;

    _classCallCheck(this, CheckboxListField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxListField).call(this, params));
    _this.checkboxs = {};
    return _this;
  }

  _createClass(CheckboxListField, [{
    key: "getDataItems",
    value: function getDataItems() {
      return __awaiter(this, void 0, void 0,
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var r;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._params.dataSource.select();

              case 2:
                r = _context.sent;
                return _context.abrupt("return", r.dataItems);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "createControl",
    value: function createControl() {
      var _this2 = this;

      var element = document.createElement("div");
      this.getDataItems().then(function (dataItems) {
        for (var i = 0; i < dataItems.length; i++) {
          console.assert(_this2._params.nameField != null);
          console.assert(_this2._params.valueField != null);
          var name = dataItems[i][_this2._params.nameField];
          var value = dataItems[i][_this2._params.valueField];
          var itemCtrl = document.createElement("div");
          itemCtrl.innerHTML = "<label><input type=\"checkbox\" value=\"".concat(value, "\">").concat(name, "</label>");
          itemCtrl.className = "checkbox";
          element.appendChild(itemCtrl);
          var checkbox = itemCtrl.querySelector("input");
          _this2.checkboxs["".concat(value)] = checkbox;
        }
      });
      var self = this;
      return {
        element: element,

        get value() {
          var checkboxs = [];

          for (var c in self.checkboxs) {
            if (self.checkboxs[c].checked) {
              checkboxs.push(self.checkboxs[c]);
            }
          }

          var value = checkboxs.map(function (o) {
            return o.value;
          });
          return value;
        },

        set value(value) {
          var checkbox = self.checkboxs["".concat(value)];

          if (checkbox) {
            checkbox.checked = true;
          }
        }

      };
    }
  }]);

  return CheckboxListField;
}(w.BoundField);
//# sourceMappingURL=checkbox-list.field.js.map
