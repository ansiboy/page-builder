"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGridView = void 0;

var w = require("maishu-wuzhui"); // import { ElementProvider } from 'maishu-wuzhui';


var errors_1 = require("./errors");

var style_1 = require("./style");

function createGridView(params) {
  params = Object.assign({
    pageSize: 10,
    dataSource: null,
    columns: null
  }, params);
  if (params.pageSize === null) params.showPagingBar = false;

  if (params.pagerSettings == null) {
    params.pagerSettings = Object.assign(w.DataSourcePagingBar.defaultPagerSettings, {
      activeButtonClassName: 'active',
      buttonContainerWraper: 'ul',
      buttonWrapper: 'li',
      buttonContainerClassName: 'pagination',
      showTotal: true
    });
  }

  console.assert(params.element != null, 'element can not null.');
  if (params.element == null) throw errors_1.errors.argumentFieldNull("param", "element");
  if (params.element.tagName != "TABLE" && params.element.tagName != "DIV") throw errors_1.errors.gridViewElementError();
  var gridView;

  if (params.element.tagName == "TABLE") {
    params.element.className = 'table table-striped table-bordered table-hover';
    gridView = new w.GridView(params);
  } else {
    gridView = new WraperGridView(params);
  }

  ;
  return gridView;
}

exports.createGridView = createGridView;

var WraperGridView =
/*#__PURE__*/
function (_w$GridView) {
  _inherits(WraperGridView, _w$GridView);

  function WraperGridView(params) {
    var _this;

    _classCallCheck(this, WraperGridView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WraperGridView).call(this, WraperGridView.init(params)));

    _this.createHeader(params);

    _this.createFooter(params);

    return _this;
  }

  _createClass(WraperGridView, [{
    key: "createHeader",
    value: function createHeader(params) {
      var headerElement = params.element.querySelector(".header thead");
      console.assert(headerElement != null);
      var rowElement = document.createElement("tr");
      headerElement.appendChild(rowElement);

      for (var i = 0; i < params.columns.length; i++) {
        var cellElement = document.createElement("th");
        rowElement.appendChild(cellElement);
        params.columns[i].createHeaderCell(cellElement);
      }
    }
  }, {
    key: "createFooter",
    value: function createFooter(params) {
      var footerElement = params.element.querySelector(".footer");
      var pagingBarElement = document.createElement("div");
      pagingBarElement.className = "".concat(w.GridView.pagingBarClassName, " clearfix");
      new w.DataSourcePagingBar({
        dataSource: params.dataSource,
        element: pagingBarElement
      });
      footerElement.appendChild(pagingBarElement);
      params.element.appendChild(footerElement);
    }
  }], [{
    key: "init",
    value: function init(params) {
      params.element.innerHTML = "\n            <div class=\"main\">\n                <table class=\"header table table-bordered\">\n                    <thead></thead>\n                </table>\n                <table class=\"body table table-striped table-bordered table-hover\"></table>\n            </div>\n            <div class=\"footer\"/>";
      var headerElement = params.element.querySelector(".header");
      var bodyElement = params.element.querySelector(".body");
      var mainElement = params.element.querySelector(".main");
      this.onScroll(mainElement, headerElement);
      params.columns.forEach(function (c) {
        c.headerStyle = c.headerStyle || {};
        c.itemStyle = c.itemStyle || {};
        c.itemStyle.width = c.headerStyle.width = c.headerStyle.width || WraperGridView.DefaultColumnWidth;
      });
      var tableWidth = this.calcColumnsWidth(params.columns);
      headerElement.style.width = "".concat(tableWidth, "px");
      bodyElement.style.width = "".concat(tableWidth, "px");
      params.element.className = style_1.classNames.gridViewWraper;
      var obj = Object.assign({}, params, {
        showFooter: false,
        showPagingBar: false,
        element: bodyElement,
        dataSource: params.dataSource,
        columns: params.columns,
        showHeader: false
      });
      return obj;
    }
  }, {
    key: "onScroll",
    value: function onScroll(mainElement, headerElement) {
      mainElement.onscroll = function (e) {
        headerElement.style.top = "".concat(mainElement.scrollTop, "px");
      };
    }
  }, {
    key: "calcColumnsWidth",
    value: function calcColumnsWidth(columns) {
      var width = 0;
      columns.forEach(function (c) {
        var _a;

        console.assert(c.headerStyle.width != null);
        width = width + Number.parseInt((_a = c.headerStyle.width) === null || _a === void 0 ? void 0 : _a.replace("px", ""));
      });
      return width;
    }
  }]);

  return WraperGridView;
}(w.GridView);

WraperGridView.DefaultColumnWidth = "120px";
//# sourceMappingURL=grid-view.js.map
