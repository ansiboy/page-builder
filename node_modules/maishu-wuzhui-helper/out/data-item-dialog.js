"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _element;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDataItemDialog = exports.DataItemDialog = void 0;
const maishu_ui_toolkit_1 = require("maishu-ui-toolkit");
const maishu_dilu_1 = require("maishu-dilu");
class DataItemDialog {
    constructor(params) {
        _element.set(this, void 0);
        this.params = Object.assign({
            cancelButtonText: "取消",
            confirmButtonText: "确定"
        }, params);
        this.dataCells = [];
        params.fields.forEach(c => {
            let headerStyle = c.headerStyle || {};
            headerStyle.textAlign = "right";
            delete headerStyle.width;
            let itemStyle = c.itemStyle || {};
            delete itemStyle.width;
        });
        let validateFiels = params.fields.filter(c => c.validateRules != null && c.dataField != null)
            .map(o => ({ name: o.dataField, rules: o.validateRules }));
        this.validator = new maishu_dilu_1.FormValidator(params.element, ...validateFiels);
        __classPrivateFieldSet(this, _element, this.createDialogElement());
    }
    show(dataItem) {
        dataItem = dataItem || {};
        for (let i = 0; i < this.dataCells.length; i++) {
            if (this.dataCells[i].type == "GridViewEditableCell") {
                let cell = this.dataCells[i];
                cell.render(dataItem, "edit");
            }
        }
        maishu_ui_toolkit_1.showDialog(this.params.element);
    }
    hide() {
        maishu_ui_toolkit_1.hideDialog(this.params.element);
    }
    get title() {
        let titleElement = __classPrivateFieldGet(this, _element).querySelector(".modal-title");
        return titleElement === null || titleElement === void 0 ? void 0 : titleElement.innerHTML;
    }
    set title(value) {
        let titleElement = __classPrivateFieldGet(this, _element).querySelector(".modal-title");
        if (titleElement == null)
            return;
        titleElement.innerHTML = value || "";
    }
    get onConfirm() {
        return this.params.onConfirm;
    }
    set onConfirm(value) {
        this.params.onConfirm = value;
    }
    get onCancel() {
        return this.params.onCancel;
    }
    set onCancel(value) {
        this.params.onCancel = value;
    }
    invokeOnConfirm() {
        let dataItem = {};
        for (let i = 0; i < this.dataCells.length; i++) {
            if (this.dataCells[i].type == "GridViewEditableCell") {
                let cell = this.dataCells[i];
                dataItem[cell.dataField] = cell.controlValue;
            }
        }
        if (!this.validator.check())
            return;
        this.hide();
        if (this.params.onConfirm) {
            this.params.onConfirm(dataItem);
        }
    }
    invokeOnCancel() {
        if (this.params.onCancel) {
            this.params.onCancel();
        }
    }
    createDialogElement() {
        let dialogElement = document.createElement("div");
        dialogElement.className = "modal-dialog";
        dialogElement.innerHTML = `<div class="modal-dialog">
<div class="modal-content">
    <div class="modal-header">
        <button type="button" class="btn close" data-dismiss="modal">
            <span aria-hidden="true">&times;</span>
            <span class="sr-only">Close</span>
        </button>
        <h4 class="modal-title">${this.params.title || ""}</h4>
    </div>
    <div class="modal-body">
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">
            ${this.params.cancelButtonText}
        </button>
        <button type="button" class="btn btn-primary">
            ${this.params.confirmButtonText}
        </button>
    </div>
</div>
</div>`;
        this.params.element.appendChild(dialogElement);
        let confirmButton = dialogElement.querySelector(".btn-primary");
        confirmButton.onclick = () => this.invokeOnConfirm();
        let cancelButton = dialogElement.querySelector(".btn-default");
        cancelButton.onclick = () => this.invokeOnCancel();
        let bodyElement = dialogElement.querySelector(".modal-body");
        this.params.fields.forEach(field => {
            if (!field.visible) {
                return;
            }
            let fieldElement = document.createElement("div");
            fieldElement.className = "form-group clearfix input-control";
            bodyElement.appendChild(fieldElement);
            let labelElement = document.createElement("label");
            labelElement.innerHTML = field.headerText;
            fieldElement.appendChild(labelElement);
            let controlContainerElement = document.createElement("div");
            controlContainerElement.className = "control";
            fieldElement.appendChild(controlContainerElement);
            let boundField = field;
            boundField.createHeaderCell(labelElement);
            let dataCell = boundField.createItemCell({}, controlContainerElement);
            this.dataCells.push(dataCell);
        });
        return dialogElement;
    }
}
exports.DataItemDialog = DataItemDialog;
_element = new WeakMap();
function createDataItemDialog(params) {
    let dialog = new DataItemDialog(params);
    return dialog;
}
exports.createDataItemDialog = createDataItemDialog;
//# sourceMappingURL=data-item-dialog.js.map