"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkboxListField = void 0;
const w = require("maishu-wuzhui");
function checkboxListField(params) {
    let field = new CheckboxListField(params);
    return field;
}
exports.checkboxListField = checkboxListField;
class CheckboxListField extends w.BoundField {
    constructor(params) {
        super(params);
        this.checkboxs = {};
        this._params = params;
    }
    getDataItems() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.dataItems) {
                let r = yield this._params.dataSource.select();
                this.dataItems = r.dataItems;
            }
            return this.dataItems;
        });
    }
    setControlValue(value) {
        value = value || [];
        for (let i = 0; i < value.length; i++) {
            let checkbox = this.checkboxs[value[i]];
            if (checkbox) {
                checkbox.checked = true;
            }
        }
    }
    createControl() {
        let element = document.createElement("div");
        this.getDataItems().then(dataItems => {
            this.dataItems = dataItems;
            for (let i = 0; i < dataItems.length; i++) {
                console.assert(this._params.nameField != null);
                console.assert(this._params.valueField != null);
                let name = dataItems[i][this._params.nameField];
                let value = dataItems[i][this._params.valueField];
                let itemCtrl = document.createElement("div");
                itemCtrl.innerHTML = `<label><input type="checkbox" value="${value}">${name}</label>`;
                itemCtrl.className = "checkbox";
                element.appendChild(itemCtrl);
                let checkbox = itemCtrl.querySelector("input");
                this.checkboxs[`${value}`] = checkbox;
            }
            if (self.value) {
                this.setControlValue(self.value);
            }
        });
        let self = this;
        return {
            element,
            get value() {
                let checkboxs = [];
                for (let c in self.checkboxs) {
                    if (self.checkboxs[c].checked) {
                        checkboxs.push(self.checkboxs[c]);
                    }
                }
                let value = checkboxs.map(o => o.value);
                return value;
            },
            set value(value) {
                self.value = value;
                self.setControlValue(value);
            }
        };
    }
    createItemCell(dataItem) {
        let field = this;
        let cell = super.createItemCell(dataItem);
        cell.render = function (dataItem) {
            field.getDataItems().then(dataItems => {
                let value = dataItem[field._params.dataField];
                let names = [];
                for (let i = 0; i < value.length; i++) {
                    let dataItem = dataItems.filter(o => o[field._params.valueField] == value[i])[0];
                    if (dataItem) {
                        names.push(dataItem[field._params.nameField]);
                    }
                }
                let text = names.filter(o => o).join(",");
                this.element.innerHTML = text;
            });
        };
        return cell;
    }
}
//# sourceMappingURL=checkbox-list-field.js.map