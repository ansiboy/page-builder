/*!
 * 
 *  maishu-wuzhui v1.17.74
 *  https://github.com/ansiboy/wuzhui
 *  
 *  Copyright (c) 2016-2018, shu mai <ansiboy@163.com>
 *  Licensed under the MIT License.
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("maishu-toolkit"));
	else if(typeof define === 'function' && define.amd)
		define(["maishu-toolkit"], factory);
	else if(typeof exports === 'object')
		exports["wuzhui"] = factory(require("maishu-toolkit"));
	else
		root["wuzhui"] = factory(root["maishu-toolkit"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_maishu_toolkit__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./out/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./out/Control.js":
/*!************************!*\
  !*** ./out/Control.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
const Utility_1 = __webpack_require__(/*! ./Utility */ "./out/Utility.js");
// namespace wuzhui {
const CONTROL_DATA_NAME = 'Control';
class Control {
    constructor(element) {
        if (!element)
            throw Errors_1.Errors.argumentNull('element');
        this._element = element;
        Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME, this);
    }
    get visible() {
        return Utility_1.ElementHelper.isVisible(this._element);
    }
    set visible(value) {
        if (value) {
            Utility_1.ElementHelper.showElement(this._element);
        }
        else {
            Utility_1.ElementHelper.hideElement(this._element);
        }
    }
    get element() {
        return this._element;
    }
    appendChild(child, index) {
        if (child == null)
            throw Errors_1.Errors.argumentNull('child');
        let childElement;
        if (child.tagName != null) {
            childElement = child;
        }
        else {
            childElement = child.element;
        }
        let placeChild;
        if (index != null) {
            placeChild = this.element.children[index];
        }
        if (placeChild == null) {
            this.element.appendChild(childElement);
        }
        else {
            this.element.insertBefore(childElement, placeChild);
        }
    }
    style(value) {
        Utility_1.applyStyle(this.element, value);
    }
    static getControlByElement(element) {
        return Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME);
    }
}
exports.Control = Control;
// }


/***/ }),

/***/ "./out/DropDown.js":
/*!*************************!*\
  !*** ./out/DropDown.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _dataSource, _options, _nameField, _valueField;
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
class Dropdown extends Control_1.Control {
    constructor(params) {
        super(params.element);
        _dataSource.set(this, void 0);
        _options.set(this, {});
        _nameField.set(this, void 0);
        _valueField.set(this, void 0);
        if (params == null)
            throw Errors_1.Errors.argumentNull('params');
        if (params.dataSource == null)
            throw Errors_1.Errors.argumentFieldNull('params', 'dataSource');
        if (params.element == null)
            throw Errors_1.Errors.argumentFieldNull('params', 'element');
        if (params.nameField == null)
            throw Errors_1.Errors.argumentFieldNull("params", "nameField");
        if (params.valueField == null)
            throw Errors_1.Errors.argumentFieldNull("params", "valueField");
        __classPrivateFieldSet(this, _nameField, params.nameField);
        __classPrivateFieldSet(this, _valueField, params.valueField);
        this.init(params);
    }
    get dataSource() {
        return __classPrivateFieldGet(this, _dataSource);
    }
    init(params) {
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldSet(this, _dataSource, params.dataSource);
            let r = yield params.dataSource.select({});
            r.dataItems.forEach(dataItem => {
                this.addOptionElement(dataItem);
            });
            __classPrivateFieldGet(this, _dataSource).inserted.add(args => {
                this.addOptionElement(args.dataItem);
            });
            __classPrivateFieldGet(this, _dataSource).deleted.add(args => {
                let pk = this.primaryKeyValue(args.dataItem);
                let option = __classPrivateFieldGet(this, _options)[pk];
                if (option) {
                    this.element.removeChild(option);
                }
            });
            __classPrivateFieldGet(this, _dataSource).updated.add(args => {
                let pk = this.primaryKeyValue(args.dataItem);
                let option = __classPrivateFieldGet(this, _options)[pk];
                if (option && args.dataItem[__classPrivateFieldGet(this, _nameField)] != null) {
                    option.innerHTML = args.dataItem[__classPrivateFieldGet(this, _nameField)];
                }
            });
        });
    }
    addOptionElement(dataItem) {
        console.assert(__classPrivateFieldGet(this, _nameField) != null);
        console.assert(__classPrivateFieldGet(this, _valueField) != null);
        let name = dataItem[__classPrivateFieldGet(this, _nameField)];
        let value = dataItem[__classPrivateFieldGet(this, _valueField)];
        let option = document.createElement('option');
        option.innerHTML = name || "";
        option.value = value || "";
        this.element.appendChild(option);
        let pk = this.primaryKeyValue(dataItem);
        __classPrivateFieldGet(this, _options)[pk] = option;
        return option;
    }
    primaryKeyValue(dataItem) {
        let r = __classPrivateFieldGet(this, _dataSource).primaryKeys.map(pk => dataItem[pk]).join("-");
        return r;
    }
}
exports.Dropdown = Dropdown;
_dataSource = new WeakMap(), _options = new WeakMap(), _nameField = new WeakMap(), _valueField = new WeakMap();


/***/ }),

/***/ "./out/ElementProvider.js":
/*!********************************!*\
  !*** ./out/ElementProvider.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultElementProvider = {
    createRowElement: () => document.createElement("tr"),
    createCellElement: (type = "body") => type == "header" ? document.createElement("th") : document.createElement('td'),
    // createViewElement: () => document.createElement("table"),
    createHeaderElement: () => document.createElement("thead"),
    createFooterElement: () => document.createElement("tfoot"),
    createBodyElement: () => document.createElement("tbody"),
};


/***/ }),

/***/ "./out/Errors.js":
/*!***********************!*\
  !*** ./out/Errors.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// namespace wuzhui {
// export class Errors {
//     static notImplemented(message?: string) {
//         message = message || "Not implemented";
//         return new Error(message);
//     }
//     static argumentNull(paramName) {
//         return new Error("Argument '" + paramName + "' can not be null.");
//     }
//     static controllBelonsAnother() {
//         return new Error("The control is belongs another control.");
//     }
//     static columnsCanntEmpty() {
//         return new Error("Columns cannt empty.");
//     }
//     static dataSourceCanntInsert() {
//         return new Error("DataSource can not insert.");
//     }
//     static dataSourceCanntUpdate() {
//         return new Error("DataSource can not update.");
//     }
//     static dataSourceCanntDelete() {
//         return new Error("DataSource can not delete.");
//     }
//     static primaryKeyNull(key: string) {
//         let msg = `Primary key named '${key}' value is null.`;
//         return new Error(msg);
//     }
//     static queryResultTypeError() {
//         let msg = 'Type of the query result is expected as Array or DataSourceSelectResult.';
//         return new Error(msg);
//     }
//     static argumentFieldNull(argumentName: string, fieldName: string) {
//         let msg = `Argument ${argumentName} ${fieldName} field can not be null or empty.`
//         return new Error(msg);
//     }
// }
// }
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
exports.Errors = Object.assign(maishu_toolkit_1.errors, {
    columnsCanntEmpty() {
        return new Error("Columns cannt empty.");
    },
    notImplemented(message) {
        message = message || "Not implemented";
        return new Error(message);
    },
    gridViewNull() {
        let msg = "Grid view is null.";
        return new Error(msg);
    }
});


/***/ }),

/***/ "./out/GridView.js":
/*!*************************!*\
  !*** ./out/GridView.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
const NumberPagingBar_1 = __webpack_require__(/*! ./NumberPagingBar */ "./out/NumberPagingBar.js");
const Utility_1 = __webpack_require__(/*! ./Utility */ "./out/Utility.js");
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
const index_1 = __webpack_require__(/*! ./cells/index */ "./out/cells/index.js");
const index_2 = __webpack_require__(/*! ./rows/index */ "./out/rows/index.js");
const ElementProvider_1 = __webpack_require__(/*! ./ElementProvider */ "./out/ElementProvider.js");
const maishu_toolkit_2 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class GridView extends Control_1.Control {
    constructor(params, elementProvider = ElementProvider_1.defaultElementProvider) {
        super(params.element);
        this.emptyDataHTML = '暂无记录';
        this.initDataHTML = '数据正在加载中...';
        this.loadFailHTML = '加载数据失败，点击重新加载。';
        //========================================================
        // 样式
        // headerStyle: string;
        // footerStyle: string;
        // rowStyle: string;
        // alternatingRowStyle: string;
        //private emptyDataRowStyle: string;
        //========================================================
        this.rowCreated = new maishu_toolkit_1.Callback(); //callbacks<GridView<T>, { row: GridViewRow }>();
        this.elementProvider = elementProvider;
        params = Object.assign({
            showHeader: true, showFooter: false,
            showPagingBar: true
        }, params);
        this.selectArguments = new maishu_toolkit_1.DataSourceSelectArguments();
        if (params.pageSize)
            this.selectArguments.maximumRows = params.pageSize;
        this._params = params;
        this._columns = params.columns || [];
        if (this._columns.length == 0)
            throw Errors_1.Errors.columnsCanntEmpty();
        for (var i = 0; i < this._columns.length; i++) {
            var column = this._columns[i];
            column.gridView = this;
        }
        this._dataSource = params.dataSource;
        this._dataSource.selected.add(args => this.on_selectedExecuted(args.selectResult));
        this._dataSource.updated.add(args => this.on_updateExecuted(args.dataItem));
        this._dataSource.inserted.add(args => this.on_insertExecuted(args.dataItem, args.index));
        this._dataSource.deleted.add(args => this.on_deleteExecuted(args.dataItem));
        this._dataSource.selecting.add(args => {
            let display = this._emtpyRow.element.style.display;
            if (display != 'none') {
                this._emtpyRow.element.children[0].innerHTML = this.initDataHTML;
            }
        });
        this._dataSource.error.add(args => {
            if (args.error.method == 'select') {
                this.renderDataItems([]);
                var element = this._emtpyRow.cells[0].element;
                element.innerHTML = this.loadFailHTML;
                element.onclick = () => {
                    this._dataSource.select(this.selectArguments);
                };
                args.error.handled = true;
                console.error(args.error.message);
                console.log(args.error.stack);
            }
        });
        if (params.showHeader) {
            this._header = new Control_1.Control(this.elementProvider.createHeaderElement());
            this.appendChild(this._header);
            this.appendHeaderRow();
        }
        this.emptyDataHTML = params.emptyDataHTML || this.emptyDataHTML;
        this.initDataHTML = params.initDataHTML || this.initDataHTML;
        this._body = new Control_1.Control(this.elementProvider.createBodyElement());
        this.appendChild(this._body);
        this.appendEmptyRow();
        let showPagingBar = params.showPagingBar;
        if (params.showFooter || showPagingBar) {
            this._footer = new Control_1.Control(this.elementProvider.createFooterElement());
            this.appendChild(this._footer);
            if (params.showFooter)
                this.appendFooterRow();
            if (showPagingBar) {
                this.createPagingBar(params.pagerSettings);
                // this.pagingBar.selectArguments.maximumRows = params.pageSize;
            }
        }
        // this.selectArguments = this.pagingBar ? this.pagingBar.selectArguments : new DataSourceSelectArguments();
        // if (params.pageSize)
        //     this.selectArguments.maximumRows = params.pageSize;
        this.dataSource.select(this.selectArguments);
    }
    createPagingBar(pagerSettings) {
        var pagingBarContainer = this.elementProvider.createRowElement(); //document.createElement('tr');
        var pagingBarElement = this.elementProvider.createCellElement("footer"); //document.createElement('td');
        // pagingBarElement.className = GridView.pagingBarClassName;
        maishu_toolkit_2.HTML.addClassName(pagingBarElement, GridView.pagingBarClassName);
        if (pagingBarElement.tagName == "TD")
            pagingBarElement.setAttribute("colspan", `${this.columns.length}`); // pagingBarElement.colSpan = this.columns.length;
        pagingBarContainer.appendChild(pagingBarElement);
        console.assert(this._footer != null);
        this._footer.appendChild(pagingBarContainer);
        this.pagingBar = new NumberPagingBar_1.DataSourcePagingBar({ dataSource: this.dataSource, element: pagingBarElement, pagerSettings });
    }
    get columns() {
        return this._columns;
    }
    get dataSource() {
        return this._dataSource;
    }
    appendEmptyRow() {
        this._emtpyRow = new index_2.GridViewRow(index_2.GridViewRowType.Empty, this.elementProvider.createRowElement(), this);
        this._emtpyRow.element.className = GridView.emptyRowClassName;
        let cell = new index_1.GridViewCell(this.elementProvider.createCellElement("body"));
        cell.element.setAttribute("colspan", this.columns.length.toString());
        if (this._params.emptyDataRowStyle) {
            Utility_1.applyStyle(cell.element, this._params.emptyDataRowStyle);
        }
        this._emtpyRow.appendChild(cell);
        this._body.appendChild(this._emtpyRow);
        this.rowCreated.fire({ row: this._emtpyRow });
    }
    appendDataRow(dataItem, index) {
        var row = new index_2.GridViewDataRow(this, dataItem, this.elementProvider.createRowElement());
        maishu_toolkit_2.HTML.addClassName(row.element, GridView.dataRowClassName);
        this._body.appendChild(row, index);
        let cells = row.cells;
        for (let j = 0; j < cells.length; j++) {
            let cell = cells[j];
            if (cell.render != null) {
                cell.render(dataItem);
            }
        }
        this.rowCreated.fire({ row });
        if (this._emtpyRow.element.style.display != 'none')
            this.hideEmptyRow();
        return row;
    }
    on_sort(sender, args) {
        if (this._currentSortCell != null && this._currentSortCell != sender) {
            this._currentSortCell.clearSortIcon();
        }
        this._currentSortCell = sender;
    }
    appendHeaderRow() {
        var row = new index_2.GridViewRow(index_2.GridViewRowType.Header, this.elementProvider.createRowElement(), this);
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            let cell = column.createHeaderCell(this.elementProvider.createCellElement("header"));
            if (cell.type == "GridViewHeaderCell") {
                cell.sorting.add(a => this.on_sort(cell, a));
            }
            row.appendChild(cell);
            cell.visible = this.columns[i].visible;
        }
        this._header.appendChild(row);
    }
    appendFooterRow() {
        var row = new index_2.GridViewRow(index_2.GridViewRowType.Footer, this.elementProvider.createRowElement(), this);
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            let cell = column.createFooterCell(this.elementProvider.createCellElement("footer"));
            row.appendChild(cell);
            cell.visible = column.visible;
        }
        this._footer.appendChild(row);
    }
    renderDataItems(items) {
        var rows = this._body.element.querySelectorAll(`.${GridView.dataRowClassName}`);
        for (let i = 0; i < rows.length; i++)
            this._body.element.removeChild(rows[i]);
        if (items.length == 0) {
            this.showEmptyRow();
            return;
        }
        for (let i = 0; i < items.length; i++) {
            this.appendDataRow(items[i]);
        }
    }
    on_selectedExecuted(e) {
        let dataItems = e.dataItems;
        if (this._params.translate) {
            dataItems = this._params.translate(dataItems);
        }
        this.renderDataItems(dataItems);
    }
    on_updateExecuted(item) {
        console.assert(item != null);
        let dataItems = [];
        for (let i = 0; i < this._body.element.children.length; i++) {
            let row_element = this._body.element.children[i];
            let row = Control_1.Control.getControlByElement(row_element);
            ;
            if (row.rowType != index_2.GridViewRowType.Data)
                continue;
            let dataItem = row.dataItem;
            dataItems.push(dataItem);
            if (!this.dataSource.isSameItem(dataItem, item))
                continue;
            if (dataItem != item) {
                Object.assign(dataItem, item);
            }
            let cells = row.cells;
            for (let j = 0; j < cells.length; j++) {
                let cell = cells[j];
                if (cell.type == "GridViewDataCell") {
                    cell.render(dataItem);
                }
                else if (cell.type == "GridViewEditableCell") {
                    cell.render(dataItem);
                }
            }
        }
        if (this._params.translate) {
            dataItems = this._params.translate(dataItems);
            this.renderDataItems(dataItems);
        }
    }
    on_insertExecuted(item, index) {
        if (index == null)
            index = 0;
        if (!this._params.translate) {
            this.appendDataRow(item, index);
            return;
        }
        let dataItems = [item];
        for (let i = 0; i < this._body.element.children.length; i++) {
            let row_element = this._body.element.children[i];
            let row = Control_1.Control.getControlByElement(row_element);
            ;
            if (row.rowType != index_2.GridViewRowType.Data)
                continue;
            let dataItem = row.dataItem;
            dataItems.push(dataItem);
        }
        dataItems = this._params.translate(dataItems);
        this.renderDataItems(dataItems);
    }
    on_deleteExecuted(item) {
        let rows = this._body.element.children;
        let dataRows = new Array();
        for (let i = 0; i < rows.length; i++) {
            let row = Control_1.Control.getControlByElement(rows[i]);
            if ((row.rowType == index_2.GridViewRowType.Data))
                dataRows.push(row);
        }
        if (this._params.translate) {
            let dataItems = dataRows.map(o => o.dataItem)
                .filter(o => !this.dataSource.isSameItem(o, item));
            dataItems = this._params.translate(dataItems);
            this.renderDataItems(dataItems);
            return;
        }
        for (let i = 0; i < dataRows.length; i++) {
            let dataRow = dataRows[i];
            if (!this.dataSource.isSameItem(item, dataRow.dataItem))
                continue;
            dataRow.element.remove();
            if (dataRows.length == 1)
                this.showEmptyRow();
        }
    }
    showEmptyRow() {
        this._emtpyRow.element.children[0].innerHTML = this.emptyDataHTML;
        this._emtpyRow.element.style.removeProperty('display');
    }
    hideEmptyRow() {
        this._emtpyRow.element.style.display = 'none';
    }
}
exports.GridView = GridView;
GridView.emptyRowClassName = 'empty';
GridView.dataRowClassName = 'data';
GridView.pagingBarClassName = 'pagingBar';
// }


/***/ }),

/***/ "./out/NumberPagingBar.js":
/*!********************************!*\
  !*** ./out/NumberPagingBar.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
// namespace wuzhui {
var PagerPosition;
(function (PagerPosition) {
    PagerPosition[PagerPosition["Bottom"] = 0] = "Bottom";
    PagerPosition[PagerPosition["Top"] = 1] = "Top";
    PagerPosition[PagerPosition["TopAndBottom"] = 2] = "TopAndBottom";
})(PagerPosition = exports.PagerPosition || (exports.PagerPosition = {}));
;
class PagingBar {
    init(dataSource) {
        this._pageIndex = 0;
        var pagingBar = this;
        pagingBar.totalRowCount = 1000000;
        if (dataSource) {
            dataSource.selected.add(args => {
                this._selectArguments = args.selectArguments;
                pagingBar.pageSize = args.selectArguments.maximumRows;
                var totalRowCount = args.selectResult.totalRowCount;
                if (totalRowCount != null && totalRowCount >= 0) {
                    pagingBar.totalRowCount = totalRowCount;
                }
                var startRowIndex = this._selectArguments.startRowIndex;
                if (startRowIndex == null || startRowIndex <= 0)
                    startRowIndex = 0;
                pagingBar.pageIndex = Math.floor(startRowIndex / pagingBar.pageSize);
                pagingBar.render();
            });
            dataSource.deleted.add(function () {
                pagingBar.totalRowCount = pagingBar.totalRowCount - 1;
                pagingBar.render();
            });
            dataSource.inserted.add(function () {
                pagingBar.totalRowCount = pagingBar.totalRowCount + 1;
                pagingBar.render();
            });
        }
    }
    get selectArguments() {
        console.assert(this._selectArguments != null);
        return this._selectArguments;
    }
    get pageCount() {
        var pageCount = Math.ceil(this.totalRowCount / this.pageSize);
        return pageCount;
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
    }
    get pageIndex() {
        return this._pageIndex;
    }
    set pageIndex(value) {
        this._pageIndex = value;
    }
    get totalRowCount() {
        return this._totalRowCount;
    }
    set totalRowCount(value) {
        this._totalRowCount = value;
    }
    // Virtual Method
    render() {
        throw Errors_1.Errors.notImplemented('The table-row render method is not implemented.');
    }
}
exports.PagingBar = PagingBar;
class DataSourcePagingBar extends PagingBar {
    constructor(params) {
        if (!params.dataSource)
            throw Errors_1.Errors.argumentNull('dataSource');
        if (!params.element)
            throw Errors_1.Errors.argumentNull('element');
        let pagerSettings = Object.assign(DataSourcePagingBar.defaultPagerSettings, params.pagerSettings || {});
        super();
        this.dataSource = params.dataSource;
        this.pagerSettings = pagerSettings;
        this.element = params.element;
        this.numberButtons = new Array();
        this.createButton = this.createPagingButton;
        this.createLabel = this.createTotalLabel;
        let buttonContainer = pagerSettings.buttonContainerWraper ?
            document.createElement(pagerSettings.buttonContainerWraper) :
            document.createElement('div');
        buttonContainer.className = pagerSettings.buttonContainerClassName || "buttons";
        this.element.appendChild(buttonContainer);
        this.createPreviousButtons(buttonContainer);
        this.createNumberButtons(buttonContainer);
        this.createNextButtons(buttonContainer);
        if (this.pagerSettings.showTotal) {
            this.totalElement = this.createLabel();
            this.totalElement.visible = false;
        }
        this.init(params.dataSource);
    }
    createPagingButton(container) {
        var pagerSettings = this.pagerSettings;
        let button = document.createElement('a');
        button.href = 'javascript:';
        if (this.pagerSettings.buttonWrapper) {
            let w = document.createElement(this.pagerSettings.buttonWrapper);
            w.appendChild(button);
            container.appendChild(w);
        }
        else {
            container.appendChild(button);
        }
        let result = {
            _button: button,
            get visible() {
                let button = this._button;
                return button.style.display != 'none';
            },
            set visible(value) {
                let button = this._button;
                let element = pagerSettings.buttonWrapper ? button.parentElement : button;
                if (value) {
                    element.style.removeProperty('display');
                }
                else {
                    element.style.display = 'none';
                }
            },
            get pageIndex() {
                let button = this._button;
                return new Number(button.getAttribute('pageIndex')).valueOf();
            },
            set pageIndex(value) {
                let button = this._button;
                button.setAttribute('pageIndex', value);
            },
            get text() {
                let button = this._button;
                return button.innerHTML;
            },
            set text(value) {
                let button = this._button;
                button.innerHTML = value;
            },
            get active() {
                let button = this._button;
                return button.href != null;
            },
            set active(value) {
                let button = this._button;
                if (value == true) {
                    button.removeAttribute('href');
                    if (pagerSettings.activeButtonClassName) {
                        // button.className = pagerSettings.activeButtonClassName;
                        this.setClassName(pagerSettings.activeButtonClassName);
                    }
                    return;
                }
                button.href = 'javascript:';
                if (pagerSettings.buttonClassName)
                    this.setClassName(pagerSettings.buttonClassName);
                else
                    this.setClassName(null);
            },
            setClassName(value) {
                let button = this._button;
                let element = pagerSettings.buttonWrapper ? button.parentElement : button;
                if (value)
                    element.className = value;
                else
                    element.removeAttribute('class');
            },
            onclick: null
        };
        button.onclick = () => {
            if (result.onclick) {
                result.onclick(result, this);
            }
        };
        return result;
    }
    createTotalLabel() {
        let totalElement = document.createElement('div');
        totalElement.className = 'total';
        let textElement = document.createElement('span');
        textElement.className = 'text';
        textElement.innerHTML = '总记录：';
        totalElement.appendChild(textElement);
        let numberElement = document.createElement('span');
        numberElement.className = 'number';
        totalElement.appendChild(numberElement);
        this.element.appendChild(totalElement);
        return {
            get text() {
                return numberElement.innerHTML;
            },
            set text(value) {
                numberElement.innerHTML = value;
            },
            get visible() {
                let display = totalElement.style.display;
                return display != 'none';
            },
            set visible(value) {
                if (value == true)
                    totalElement.style.display = 'block';
                else
                    totalElement.style.display = 'node';
            }
        };
    }
    createPreviousButtons(buttonContainer) {
        this.firstPageButton = this.createButton(buttonContainer);
        this.firstPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.firstPageButton.text = this.pagerSettings.firstPageText;
        this.firstPageButton.visible = false;
        this.previousPageButton = this.createButton(buttonContainer);
        this.previousPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.previousPageButton.text = this.pagerSettings.previousPageText;
        this.previousPageButton.visible = false;
    }
    createNextButtons(buttonContainer) {
        this.nextPageButton = this.createButton(buttonContainer);
        this.nextPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.nextPageButton.text = this.pagerSettings.nextPageText;
        this.nextPageButton.visible = false;
        this.lastPageButton = this.createButton(buttonContainer);
        this.lastPageButton.onclick = DataSourcePagingBar.on_buttonClick;
        this.lastPageButton.text = this.pagerSettings.lastPageText;
        this.lastPageButton.visible = false;
    }
    createNumberButtons(buttonContainer) {
        let pagingBar = this;
        let buttonCount = this.pagerSettings.pageButtonCount;
        for (let i = 0; i < buttonCount; i++) {
            let button = this.createButton(buttonContainer);
            button.onclick = DataSourcePagingBar.on_buttonClick;
            this.numberButtons[i] = button;
        }
        this.numberButtons.forEach(btn => {
            btn.onclick = () => DataSourcePagingBar.on_buttonClick(btn, pagingBar);
        });
    }
    static on_buttonClick(button, pagingBar) {
        let pageIndex = button.pageIndex;
        if (!pageIndex == null) {
            return;
        }
        let args = pagingBar.selectArguments;
        args.maximumRows = pagingBar.pageSize;
        args.startRowIndex = pageIndex * pagingBar.pageSize;
        pagingBar.pageIndex = pageIndex;
        pagingBar.dataSource.select(pagingBar.selectArguments);
    }
    render() {
        var pagerSettings = this.pagerSettings;
        var buttonCount = pagerSettings.pageButtonCount;
        let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);
        let pagingBarCount = Math.ceil(this.pageCount / buttonCount);
        this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount;
        this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;
        this.firstPageButton.pageIndex = 0;
        this.lastPageButton.pageIndex = this.pageCount - 1;
        for (let i = 0; i < this.numberButtons.length; i++) {
            let pageIndex = pagingBarIndex * buttonCount + i;
            if (pageIndex < this.pageCount) {
                this.numberButtons[i].pageIndex = pageIndex;
                this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();
                this.numberButtons[i].visible = true;
                this.numberButtons[i].active = pageIndex == this.pageIndex;
            }
            else {
                this.numberButtons[i].visible = false;
            }
        }
        if (this.totalElement) {
            this.totalElement.text = this.totalRowCount;
            this.totalElement.visible = true;
        }
        this.firstPageButton.visible = false;
        this.previousPageButton.visible = false;
        this.lastPageButton.visible = false;
        this.nextPageButton.visible = false;
        if (pagingBarIndex > 0) {
            this.firstPageButton.visible = true;
            this.previousPageButton.visible = true;
        }
        if (pagingBarIndex < pagingBarCount - 1) {
            this.lastPageButton.visible = true;
            this.nextPageButton.visible = true;
        }
    }
}
exports.DataSourcePagingBar = DataSourcePagingBar;
DataSourcePagingBar.defaultPagerSettings = {
    pageButtonCount: 10,
    firstPageText: '<<',
    lastPageText: '>>',
    nextPageText: '...',
    previousPageText: '...',
    showTotal: true,
};
// export class NumberPagingBar extends PagingBar {
//     // private dataSource: DataSource<{}>;
//     private pagerSettings: PagerSettings;
//     private element: HTMLElement;
//     private totalElement: PagingTotalLabel;
//     private numberButtons: Array<NumberPagingButton<NumberPagingBar>>;
//     private firstPageButton: NumberPagingButton<NumberPagingBar>;
//     private previousPageButton: NumberPagingButton<NumberPagingBar>;
//     private nextPageButton: NumberPagingButton<NumberPagingBar>;
//     private lastPageButton: NumberPagingButton<NumberPagingBar>;
//     private createLabel: () => PagingTotalLabel;
//     private createButton: (container: HTMLElement) => NumberPagingButton<NumberPagingBar>;
//     private loadData: (pageIndex: number) => void;
//     constructor(params: {
//         loadData: (pageIndex: number) => void, element: HTMLElement, pagerSettings?: PagerSettings,
//         selectArguments?: DataSourceSelectArguments
//     }) {
//         if (!params.loadData) throw Errors.argumentNull('loadData');
//         if (!params.element) throw Errors.argumentNull('element');
//         let pagerSettings = Object.assign(<PagerSettings>{
//             pageButtonCount: 10,
//             firstPageText: '<<',
//             lastPageText: '>>',
//             nextPageText: '...',
//             previousPageText: '...',
//             showTotal: true,
//         }, params.pagerSettings || {});
//         super();
//         this.loadData = params.loadData;
//         this.pagerSettings = pagerSettings;
//         this.element = params.element;
//         this.numberButtons = new Array<NumberPagingButton<NumberPagingBar>>();
//         this.createButton = this.createPagingButton;
//         this.createLabel = this.createTotalLabel;
//         let buttonContainer = pagerSettings.buttonContainerWraper ?
//             document.createElement(pagerSettings.buttonContainerWraper) :
//             document.createElement('div');
//         buttonContainer.className = pagerSettings.buttonContainerClassName || "buttons";
//         this.element.appendChild(buttonContainer);
//         this.createPreviousButtons(buttonContainer);
//         this.createNumberButtons(buttonContainer);
//         this.createNextButtons(buttonContainer);
//         if (this.pagerSettings.showTotal) {
//             this.totalElement = this.createLabel();
//             this.totalElement.visible = false;
//         }
//         this.init(null, params.selectArguments);
//     }
//     private createPagingButton(container: HTMLElement): NumberPagingButton<NumberPagingBar> {
//         var pagerSettings = this.pagerSettings;
//         let button = document.createElement('a');
//         button.href = 'javascript:';
//         if (this.pagerSettings.buttonWrapper) {
//             let w = document.createElement(this.pagerSettings.buttonWrapper);
//             w.appendChild(button);
//             container.appendChild(w);
//         }
//         else {
//             container.appendChild(button);
//         }
//         let result = {
//             _button: button,
//             get visible(): boolean {
//                 let button = this._button as HTMLAnchorElement;
//                 return button.style.display != 'none';
//             },
//             set visible(value: boolean) {
//                 let button = this._button as HTMLAnchorElement;
//                 let element = pagerSettings.buttonWrapper ? button.parentElement : button;
//                 if (value) {
//                     element.style.removeProperty('display');
//                 }
//                 else {
//                     element.style.display = 'none';
//                 }
//             },
//             get pageIndex(): number {
//                 let button = this._button as HTMLAnchorElement;
//                 return new Number(button.getAttribute('pageIndex')).valueOf();
//             },
//             set pageIndex(value: number) {
//                 let button = this._button as HTMLAnchorElement;
//                 button.setAttribute('pageIndex', value as any);
//             },
//             get text(): string {
//                 let button = this._button as HTMLAnchorElement;
//                 return button.innerHTML;
//             },
//             set text(value) {
//                 let button = this._button as HTMLAnchorElement;
//                 button.innerHTML = value;
//             },
//             get active(): boolean {
//                 let button = this._button as HTMLAnchorElement;
//                 return button.href != null;
//             },
//             set active(value: boolean) {
//                 let button = this._button as HTMLAnchorElement;
//                 if (value == true) {
//                     button.removeAttribute('href');
//                     if (pagerSettings.activeButtonClassName) {
//                         // button.className = pagerSettings.activeButtonClassName;
//                         this.setClassName(pagerSettings.activeButtonClassName)
//                     }
//                     return;
//                 }
//                 button.href = 'javascript:';
//                 if (pagerSettings.buttonClassName)
//                     this.setClassName(pagerSettings.buttonClassName);
//                 else
//                     this.setClassName(null);
//             },
//             setClassName(value: string) {
//                 let button = this._button as HTMLAnchorElement;
//                 let element = pagerSettings.buttonWrapper ? button.parentElement : button;
//                 if (value)
//                     element.className = value;
//                 else
//                     element.removeAttribute('class');
//             },
//             onclick: null as NumberPagingButtonClickEvent<NumberPagingBar> | null
//         };
//         button.onclick = () => {
//             if (result.onclick) {
//                 result.onclick(result, this);
//             }
//         };
//         return result;
//     }
//     private createTotalLabel() {
//         let totalElement = document.createElement('div');
//         totalElement.className = 'total';
//         let textElement = document.createElement('span');
//         textElement.className = 'text';
//         textElement.innerHTML = '总记录：';
//         totalElement.appendChild(textElement);
//         let numberElement = document.createElement('span');
//         numberElement.className = 'number';
//         totalElement.appendChild(numberElement);
//         this.element.appendChild(totalElement);
//         return <PagingTotalLabel>{
//             get text(): string {
//                 return numberElement.innerHTML;
//             },
//             set text(value: string) {
//                 numberElement.innerHTML = value;
//             },
//             get visible(): boolean {
//                 let display = totalElement.style.display;
//                 return display != 'none';
//             },
//             set visible(value: boolean) {
//                 if (value == true)
//                     totalElement.style.display = 'block';
//                 else
//                     totalElement.style.display = 'node';
//             }
//         }
//     }
//     private createPreviousButtons(buttonContainer: HTMLElement) {
//         this.firstPageButton = this.createButton(buttonContainer);
//         this.firstPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.firstPageButton.text = this.pagerSettings.firstPageText;
//         this.firstPageButton.visible = false;
//         this.previousPageButton = this.createButton(buttonContainer);
//         this.previousPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.previousPageButton.text = this.pagerSettings.previousPageText;
//         this.previousPageButton.visible = false;
//     }
//     private createNextButtons(buttonContainer: HTMLElement) {
//         this.nextPageButton = this.createButton(buttonContainer);
//         this.nextPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.nextPageButton.text = this.pagerSettings.nextPageText;
//         this.nextPageButton.visible = false;
//         this.lastPageButton = this.createButton(buttonContainer);
//         this.lastPageButton.onclick = NumberPagingBar.on_buttonClick;
//         this.lastPageButton.text = this.pagerSettings.lastPageText;
//         this.lastPageButton.visible = false;
//     }
//     private createNumberButtons(buttonContainer: HTMLElement) {
//         let pagingBar = this;
//         let buttonCount = this.pagerSettings.pageButtonCount;
//         for (let i = 0; i < buttonCount; i++) {
//             let button = this.createButton(buttonContainer);
//             button.onclick = NumberPagingBar.on_buttonClick;
//             this.numberButtons[i] = button;
//         }
//         this.numberButtons.forEach(btn => {
//             btn.onclick = () => NumberPagingBar.on_buttonClick(btn, pagingBar);
//         })
//     }
//     private static on_buttonClick(button: NumberPagingButton<NumberPagingBar>, pagingBar: NumberPagingBar) {
//         let pageIndex = button.pageIndex;
//         if (!pageIndex == null) {
//             return;
//         }
//         let args = pagingBar.selectArguments;
//         args.maximumRows = pagingBar.pageSize;
//         args.startRowIndex = pageIndex * pagingBar.pageSize;
//         pagingBar.pageIndex = pageIndex;
//         //pagingBar.dataSource.select(pagingBar.selectArguments);
//         pagingBar.loadData(pageIndex)
//     }
//     render() {
//         var pagerSettings = this.pagerSettings;
//         var buttonCount = pagerSettings.pageButtonCount;
//         let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);
//         let pagingBarCount = Math.ceil(this.pageCount / buttonCount);
//         this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount
//         this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;
//         this.firstPageButton.pageIndex = 0;
//         this.lastPageButton.pageIndex = this.pageCount - 1;
//         for (let i = 0; i < this.numberButtons.length; i++) {
//             let pageIndex = pagingBarIndex * buttonCount + i;
//             if (pageIndex < this.pageCount) {
//                 this.numberButtons[i].pageIndex = pageIndex;
//                 this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();
//                 this.numberButtons[i].visible = true;
//                 this.numberButtons[i].active = pageIndex == this.pageIndex;
//             }
//             else {
//                 this.numberButtons[i].visible = false;
//             }
//         }
//         if (this.totalElement) {
//             this.totalElement.text = this.totalRowCount as any;
//             this.totalElement.visible = true;
//         }
//         this.firstPageButton.visible = false;
//         this.previousPageButton.visible = false;
//         this.lastPageButton.visible = false;
//         this.nextPageButton.visible = false;
//         if (pagingBarIndex > 0) {
//             this.firstPageButton.visible = true;
//             this.previousPageButton.visible = true;
//         }
//         if (pagingBarIndex < pagingBarCount - 1) {
//             this.lastPageButton.visible = true;
//             this.nextPageButton.visible = true;
//         }
//     }
// }
// }


/***/ }),

/***/ "./out/TextBox.js":
/*!************************!*\
  !*** ./out/TextBox.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
const Errors_1 = __webpack_require__(/*! ./Errors */ "./out/Errors.js");
class TextBox extends Control_1.Control {
    constructor(params) {
        if (params == null)
            throw Errors_1.Errors.argumentNull("params");
        if (!params.element)
            throw Errors_1.Errors.argumentFieldNull("params", "element");
        if (!params.dataField)
            throw Errors_1.Errors.argumentFieldNull("params", "dataField");
        if (!params.dataItem)
            throw Errors_1.Errors.argumentFieldNull("params", "dataItem");
        if (!params.valueType)
            throw Errors_1.Errors.argumentFieldNull("params", "valuetype");
        super(params.element);
        let { element, dataField, dataItem, valueType } = params;
        let value = dataItem[dataField];
        element.value = `${value}`;
        element.onchange = () => {
            if (valueType == 'int') {
                dataItem[dataField] = Number.parseInt(element.value);
            }
            else if (valueType == 'float') {
                dataItem[dataField] = Number.parseFloat(element.value);
            }
            else {
                dataItem[dataField] = (element.value || "");
            }
        };
    }
}
exports.TextBox = TextBox;


/***/ }),

/***/ "./out/Utility.js":
/*!************************!*\
  !*** ./out/Utility.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class ElementHelper {
    static showElement(element) {
        if (!element)
            throw maishu_toolkit_1.errors.argumentNull('element');
        element.style.removeProperty('display');
    }
    static hideElement(element) {
        if (!element)
            throw maishu_toolkit_1.errors.argumentNull('element');
        element.style.display = 'none';
    }
    static isVisible(element) {
        let { display } = element.style;
        return !display || display != 'none';
    }
    static data(e, name, value) {
        let element = e;
        element['data'] = element['data'] || {};
        if (value == null)
            return element['data'].name;
        element['data'].name = value;
    }
    static findFirstParentByTagName(element, tagName) {
        if (element == null)
            throw maishu_toolkit_1.errors.argumentNull("element");
        if (!tagName)
            throw maishu_toolkit_1.errors.argumentNull('tagName');
        let parent = element.parentElement;
        while (parent != null) {
            if (parent.tagName.toLowerCase() == tagName.toLowerCase()) {
                return parent;
            }
            parent = parent.parentElement;
        }
        return null;
    }
}
exports.ElementHelper = ElementHelper;
function applyStyle(element, value) {
    if (typeof value == 'string') {
        element.setAttribute('style', value);
        return;
    }
    for (let key in value) {
        element.style[key] = value[key];
    }
}
exports.applyStyle = applyStyle;


/***/ }),

/***/ "./out/cells/GridViewCell.js":
/*!***********************************!*\
  !*** ./out/cells/GridViewCell.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ../Control */ "./out/Control.js");
class GridViewCell extends Control_1.Control {
    constructor(element, type = "GridViewCell") {
        super(element);
        this.type = type;
    }
}
exports.GridViewCell = GridViewCell;


/***/ }),

/***/ "./out/cells/GridViewCommandCell.js":
/*!******************************************!*\
  !*** ./out/cells/GridViewCommandCell.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
class GridViewCommandCell extends GridViewCell_1.GridViewCell {
    constructor(field, cellElement) {
        super(cellElement, "GridViewCommandCell");
    }
}
exports.GridViewCommandCell = GridViewCommandCell;


/***/ }),

/***/ "./out/cells/GridViewDataCell.js":
/*!***************************************!*\
  !*** ./out/cells/GridViewDataCell.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
/**
 * 表格视图数据单元格
 * 用于渲染数据
 */
class GridViewDataCell extends GridViewCell_1.GridViewCell {
    constructor(params, cellElement) {
        super(cellElement, "GridViewDataCell");
        let p = params;
        this.nullText = p.nullText != null ? p.nullText : '';
        this.dataFormatString = p.dataFormatString;
        this.dataField = p.dataField;
        if (p.render) {
            this.render = (dataItem) => p.render.apply(this, [dataItem, this.element]);
        }
    }
    /** 渲染数据 */
    render(dataItem) {
        let value = dataItem[this.dataField];
        var text;
        if (value == null)
            text = this.nullText;
        else
            text = this.formatValue(value, this.dataFormatString);
        this.element.innerHTML = text;
    }
    /** 格式化数据 */
    formatValue(value, format) {
        if (!format)
            return `${value}`;
        var result = '';
        for (var i = 0;;) {
            var open = format.indexOf('{', i);
            var close = format.indexOf('}', i);
            if ((open < 0) && (close < 0)) {
                result += format.slice(i);
                break;
            }
            if ((close > 0) && ((close < open) || (open < 0))) {
                if (format.charAt(close + 1) !== '}') {
                    throw new Error('Sys.Res.stringFormatBraceMismatch');
                }
                result += format.slice(i, close + 1);
                i = close + 2;
                continue;
            }
            result += format.slice(i, open);
            i = open + 1;
            if (format.charAt(i) === '{') {
                result += '{';
                i++;
                continue;
            }
            if (close < 0)
                throw new Error('Sys.Res.stringFormatBraceMismatch');
            var brace = format.substring(i, close);
            var argFormat = brace;
            if (typeof (value) === "undefined" || value === null) {
                value = '';
            }
            if (value instanceof Date)
                result = result + this.formatDate(value, argFormat);
            else if (value instanceof Number || typeof value == 'number')
                result = result + this.formatNumber(value, argFormat);
            else
                result = result + value.toString();
            i = close + 1;
        }
        return result;
    }
    formatDate(value, format) {
        let y = value.getFullYear();
        let m = value.getMonth() + 1;
        let d = value.getDate();
        let h = value.getHours();
        let M = value.getMinutes();
        let s = value.getSeconds();
        let twoDigit = function (value) {
            const TEN = 10;
            if (value < TEN)
                return `0` + value;
            return value.toString();
        };
        switch (format) {
            case 'd':
                return `${y}-${m}-${d}`;
            case 'g':
                return `${y}-${m}-${d} ${h}:${M}`;
            case 'gg':
                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}`;
            case 'G':
                return `${y}-${m}-${d} ${h}:${M}:${s}`;
            case 'GG':
                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}:${twoDigit(s)}`;
            case 't':
                return `${h}:${M}`;
            case 'T':
                return `${h}:${M}:${s}`;
        }
        return value.toString();
    }
    formatNumber(value, format) {
        let reg = new RegExp('^C[0-9]+');
        if (reg.test(format)) {
            let num = format.substr(1);
            return value.toFixed(num);
        }
        return value.toString();
    }
}
exports.GridViewDataCell = GridViewDataCell;


/***/ }),

/***/ "./out/cells/GridViewEditableCell.js":
/*!*******************************************!*\
  !*** ./out/cells/GridViewEditableCell.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
const Utility_1 = __webpack_require__(/*! ../Utility */ "./out/Utility.js");
const index_1 = __webpack_require__(/*! ./index */ "./out/cells/index.js");
class GridViewEditableCell extends index_1.GridViewDataCell {
    constructor(field, dataItem, cellElement) {
        if (field == null)
            throw Errors_1.Errors.argumentNull('field');
        if (dataItem == null)
            throw Errors_1.Errors.argumentNull('dataItem');
        super({
            dataField: field.dataField,
            nullText: field.nullText, dataFormatString: field.dataFormatString,
        }, cellElement);
        this._field = field;
        this._dataItem = dataItem;
        this._mode = 'read';
        this.type = "GridViewEditableCell";
    }
    get dataItem() {
        return this._dataItem;
    }
    get field() {
        return this._field;
    }
    get mode() {
        return this._mode;
    }
    beginEdit() {
        if (this._field.readOnly) {
            return;
        }
        this._mode = 'edit';
        this.render(this._dataItem, "edit");
    }
    endEdit() {
        if (this._field.readOnly) {
            return;
        }
        this._mode = 'read';
        this.render(this._dataItem, "read");
    }
    cancelEdit() {
        if (this._field.readOnly) {
            return;
        }
        this._mode = 'read';
        this.render(this._dataItem, "read");
    }
    render(dataItem, mode) {
        if (mode == 'edit') {
            this.element.innerHTML = "";
            this.createControl();
            console.assert(this.control != null);
            let value = dataItem[this.field.dataField];
            this.control.value = value;
            Utility_1.applyStyle(this.control.element, this._field.controlStyle);
            this.element.appendChild(this.control.element);
            return;
        }
        // this.control = null;
        super.render(dataItem);
    }
    createControl() {
        this.control = this.field.createControl();
        return this.control.element;
    }
    get controlValue() {
        if (this.control == null)
            return null;
        return this.control.value;
    }
}
exports.GridViewEditableCell = GridViewEditableCell;


/***/ }),

/***/ "./out/cells/GridViewHeaderCell.js":
/*!*****************************************!*\
  !*** ./out/cells/GridViewHeaderCell.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
const GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
class GridViewHeaderCell extends GridViewCell_1.GridViewCell {
    constructor(field, cellElement) {
        super(cellElement, "GridViewHeaderCell");
        this.ascHTML = '↑';
        this.descHTML = '↓';
        this.sortingHTML = '...';
        this.toSortHTML = '↕';
        this.field = field;
        this.sorting = new maishu_toolkit_1.Callback();
        this.sorted = new maishu_toolkit_1.Callback();
        if (field.sortExpression) {
            let labelElement = document.createElement('a');
            labelElement.href = 'javascript:';
            labelElement.innerHTML = this.defaultHeaderText();
            labelElement.onclick = () => this.handleSort();
            this._iconElement = document.createElement('span');
            this._iconElement.innerHTML = this.toSortHTML;
            this.appendChild(labelElement);
            this.appendChild(this._iconElement);
            this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);
            this.sorted.add(() => this.updateSortIcon());
        }
        else {
            this.element.innerHTML = this.defaultHeaderText();
        }
        this.style(field.headerStyle);
    }
    handleSort() {
        return __awaiter(this, void 0, void 0, function* () {
            let selectArguments = this.field.gridView.selectArguments;
            if (this.field.gridView == null)
                throw Errors_1.Errors.gridViewNull();
            let sortType = this.sortType == 'asc' ? 'desc' : 'asc';
            // fireCallback(this.sorting, this, { sortType });
            this.sorting.fire({ sortType });
            selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;
            yield this.field.gridView.dataSource.select(selectArguments);
            this.sortType = sortType;
            // fireCallback(this.sorted, this, { sortType });
            this.sorted.fire({ sortType });
        });
    }
    defaultHeaderText() {
        return this.field.headerText || this.field.dataField || '';
    }
    get sortType() {
        return this._sortType;
    }
    set sortType(value) {
        this._sortType = value;
    }
    clearSortIcon() {
        this._iconElement.innerHTML = this.toSortHTML;
    }
    updateSortIcon() {
        if (this.sortType == 'asc') {
            this._iconElement.innerHTML = this.ascHTML;
        }
        else if (this.sortType == 'desc') {
            this._iconElement.innerHTML = this.descHTML;
        }
        else {
            this._iconElement.innerHTML = this.toSortHTML;
        }
    }
}
exports.GridViewHeaderCell = GridViewHeaderCell;


/***/ }),

/***/ "./out/cells/index.js":
/*!****************************!*\
  !*** ./out/cells/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridViewCell_1 = __webpack_require__(/*! ./GridViewCell */ "./out/cells/GridViewCell.js");
exports.GridViewCell = GridViewCell_1.GridViewCell;
var GridViewDataCell_1 = __webpack_require__(/*! ./GridViewDataCell */ "./out/cells/GridViewDataCell.js");
exports.GridViewDataCell = GridViewDataCell_1.GridViewDataCell;
var GridViewHeaderCell_1 = __webpack_require__(/*! ./GridViewHeaderCell */ "./out/cells/GridViewHeaderCell.js");
exports.GridViewHeaderCell = GridViewHeaderCell_1.GridViewHeaderCell;


/***/ }),

/***/ "./out/data-source/ArrayDataSource.js":
/*!********************************************!*\
  !*** ./out/data-source/ArrayDataSource.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var _dataItems;
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class ArrayDataSource extends maishu_toolkit_1.DataSource {
    constructor(dataItems, primaryKeys) {
        super({
            primaryKeys,
            select: (args) => __awaiter(this, void 0, void 0, function* () {
                let arr = this.dataItems;
                if (args.maximumRows == null || args.maximumRows <= arr.length)
                    return { dataItems: arr, totalRowCount: arr.length };
                args.startRowIndex = args.startRowIndex || 0;
                let dataItems = arr.slice(args.startRowIndex, args.startRowIndex + args.maximumRows);
                let result = { dataItems, totalRowCount: arr.length };
                return result;
            }),
            update: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let item = this.findDataItem(dataItem);
                if (item != null) {
                    Object.assign(item, dataItem);
                }
                return item;
            }),
            insert: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let items = this.dataItems;
                items.push(dataItem);
            }),
            delete: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let item = this.findDataItem(dataItem);
                if (item == null) {
                    console.assert(__classPrivateFieldGet(this, _dataItems) != null);
                    __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != item));
                }
                return item;
            })
        });
        _dataItems.set(this, void 0);
        __classPrivateFieldSet(this, _dataItems, dataItems);
    }
    get dataItems() {
        return __classPrivateFieldGet(this, _dataItems);
    }
    set dataItems(value) {
        __classPrivateFieldSet(this, _dataItems, value);
    }
    findDataItem(pks) {
        let items = this.dataItems;
        for (let i = 0; i < items.length; i++) {
            if (this.samePrimaryKeyValues(items[i], pks)) {
                return items[i];
            }
        }
        return null;
    }
    samePrimaryKeyValues(item1, item2) {
        for (let j = 0; j < this.primaryKeys.length; j++) {
            if (item1[this.primaryKeys[j]] != item2[this.primaryKeys[j]]) {
                return false;
            }
        }
        return true;
    }
}
exports.ArrayDataSource = ArrayDataSource;
_dataItems = new WeakMap();


/***/ }),

/***/ "./out/data-source/index.js":
/*!**********************************!*\
  !*** ./out/data-source/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ArrayDataSource_1 = __webpack_require__(/*! ./ArrayDataSource */ "./out/data-source/ArrayDataSource.js");
exports.ArrayDataSource = ArrayDataSource_1.ArrayDataSource;


/***/ }),

/***/ "./out/fields/BoundField.js":
/*!**********************************!*\
  !*** ./out/fields/BoundField.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = __webpack_require__(/*! ./DataControlField */ "./out/fields/DataControlField.js");
const GridViewEditableCell_1 = __webpack_require__(/*! ../cells/GridViewEditableCell */ "./out/cells/GridViewEditableCell.js");
class BoundField extends DataControlField_1.DataControlField {
    /**
     * Gets the caption displayed for a field when the field's value is null.
     */
    get nullText() {
        return this.params.nullText || "";
    }
    createItemCell(dataItem, cellElement) {
        cellElement = cellElement || this.elementProvider.createCellElement("body");
        let cell = new GridViewEditableCell_1.GridViewEditableCell(this, dataItem, cellElement);
        cell.style(this.itemStyle);
        return cell;
    }
    /**
     * Gets the field for the value.
     */
    get dataField() {
        return this.params.dataField;
    }
    /**
     * Gets the string that specifies the display format for the value of the field.
     */
    get dataFormatString() {
        return this.params.dataFormatString;
    }
    get controlStyle() {
        return this.params.controlStyle;
    }
    get readOnly() {
        return this.params.readOnly;
    }
    get validateRules() {
        return this.params.validateRules;
    }
    //===============================================
    // Virutal Methods
    createControl() {
        let element = document.createElement("input");
        let valueType = this.params.valueType;
        let field = this;
        let control = {
            element,
            get value() {
                let it = this;
                let input = it.element;
                let text = input.value;
                input.name = `${field.dataField}`;
                if (field.params.emptyText) {
                    input.placeholder = field.params.emptyText;
                }
                switch (valueType) {
                    case 'number':
                        return new Number(text).valueOf();
                    case 'date':
                        return new Date(text);
                    default:
                        return text;
                }
            },
            set value(value) {
                let it = this;
                let input = it.element;
                input.value = value == null ? "" : value;
            }
        };
        return control;
    }
}
exports.BoundField = BoundField;


/***/ }),

/***/ "./out/fields/CommandField.js":
/*!************************************!*\
  !*** ./out/fields/CommandField.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="DataControlField.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = __webpack_require__(/*! ./DataControlField */ "./out/fields/DataControlField.js");
const Control_1 = __webpack_require__(/*! ../Control */ "./out/Control.js");
const Utility_1 = __webpack_require__(/*! ../Utility */ "./out/Utility.js");
const GridViewCommandCell_1 = __webpack_require__(/*! ../cells/GridViewCommandCell */ "./out/cells/GridViewCommandCell.js");
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
class CommandField extends DataControlField_1.DataControlField {
    constructor(params) {
        super(params);
        if (!this.params.cancelButtonHTML)
            this.params.cancelButtonHTML = '取消';
        if (!this.params.deleteButtonHTML)
            this.params.deleteButtonHTML = '删除';
        if (!this.params.editButtonHTML)
            this.params.editButtonHTML = '编辑';
        if (!this.params.updateButtonHTML)
            this.params.updateButtonHTML = '更新';
        if (!this.params.newButtonHTML)
            this.params.newButtonHTML = '新增';
        if (!this.params.insertButtonHTML)
            this.params.insertButtonHTML = '添加';
    }
    // private params(): CommandFieldParams {
    //     return this.params;
    // }
    get cancelButtonHTML() {
        return this.params.cancelButtonHTML;
    }
    get deleteButtonHTML() {
        return this.params.deleteButtonHTML;
    }
    get editButtonHTML() {
        return this.params.editButtonHTML;
    }
    get updateButtonHTML() {
        return this.params.updateButtonHTML;
    }
    get newButtonHTML() {
        return this.params.newButtonHTML;
    }
    get insertButtonHTML() {
        return this.params.insertButtonHTML;
    }
    get cancelButtonClass() {
        return this.params.cancelButtonClass;
    }
    get deleteButtonClass() {
        return this.params.deleteButtonClass;
    }
    get editButtonClass() {
        return this.params.editButtonClass;
    }
    get newButtonClass() {
        return this.params.newButtonClass;
    }
    get updateButtonClass() {
        return this.params.updateButtonClass;
    }
    get insertButtonClass() {
        return this.params.insertButtonClass;
    }
    createItemCell(dataItem) {
        let cell = new GridViewCommandCell_1.GridViewCommandCell(this, this.elementProvider.createCellElement("body"));
        cell.style(this.itemStyle);
        if (this.params.showEditButton) {
            let editButton = this.createEditButton();
            editButton.style.marginRight = '4px';
            if (this.editButtonClass)
                maishu_toolkit_1.HTML.addClassName(editButton, this.editButtonClass); //editButton.className = this.editButtonClass;
            cell.editButton = editButton;
            editButton.addEventListener('click', (e) => this.on_editButtonClick(e));
            cell.appendChild(editButton);
            let updateButton = this.createUpdateButton();
            updateButton.style.display = 'none';
            updateButton.style.marginRight = '4px';
            if (this.updateButtonClass)
                maishu_toolkit_1.HTML.addClassName(updateButton, this.updateButtonClass); //updateButton.className = this.updateButtonClass;
            cell.updateButton = updateButton;
            updateButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));
            cell.appendChild(updateButton);
            let cancelButton = this.createCancelButton();
            cancelButton.style.display = 'none';
            cancelButton.style.marginRight = '4px';
            if (this.cancelButtonClass)
                maishu_toolkit_1.HTML.addClassName(cancelButton, this.cancelButtonClass); //cancelButton.className = this.cancelButtonClass;
            cell.cacelButton = cancelButton;
            cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));
            cell.appendChild(cancelButton);
        }
        if (this.params.showDeleteButton) {
            let deleteButton = this.createDeleteButton();
            deleteButton.style.marginRight = '4px';
            if (this.deleteButtonClass)
                maishu_toolkit_1.HTML.addClassName(deleteButton, this.deleteButtonClass); //deleteButton.className = this.deleteButtonClass;
            cell.deleteButton = deleteButton;
            deleteButton.onclick = (e) => this.on_deleteButtonClick(e);
            cell.appendChild(deleteButton);
        }
        if (this.params.showNewButton) {
            let newButton = this.createNewButton();
            newButton.style.marginRight = '4px';
            if (this.newButtonClass)
                maishu_toolkit_1.HTML.addClassName(newButton, this.newButtonClass); //newButton.className = this.newButtonClass;
            newButton.onclick = (e) => this.on_newButtonClick(e);
            cell.newButton = newButton;
            cell.appendChild(newButton);
            let insertButton = this.createInsertButton();
            insertButton.style.display = 'none';
            insertButton.style.marginRight = '4px';
            insertButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));
            if (this.insertButtonClass)
                maishu_toolkit_1.HTML.addClassName(insertButton, this.insertButtonClass); // insertButton.className = this.updateButtonClass;
            cell.insertButton = insertButton;
            cell.appendChild(insertButton);
            let cancelButton = this.createCancelButton();
            cancelButton.style.display = 'none';
            cancelButton.style.marginRight = '4px';
            cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));
            if (this.cancelButtonClass)
                maishu_toolkit_1.HTML.addClassName(cancelButton, this.cancelButtonClass); // cancelButton.className = this.cancelButtonClass;
            cell.cacelButton = cancelButton;
            cell.appendChild(cancelButton);
        }
        return cell;
    }
    showReadStatusButtons(cell) {
        if (cell.newButton) {
            this.showButton(cell.newButton);
            this.hideButton(cell.insertButton);
        }
        if (cell.editButton) {
            this.showButton(cell.editButton);
            this.hideButton(cell.updateButton);
        }
        if (cell.deleteButton)
            this.showButton(cell.deleteButton);
        this.hideButton(cell.cacelButton);
    }
    createEditButton() {
        let button = document.createElement('a');
        button.innerHTML = this.editButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createDeleteButton() {
        let button = document.createElement('a');
        button.innerHTML = this.deleteButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createInsertButton() {
        let button = document.createElement('a');
        button.innerHTML = this.insertButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createUpdateButton() {
        let button = document.createElement('a');
        button.innerHTML = this.updateButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createCancelButton() {
        let button = document.createElement('a');
        button.innerHTML = this.cancelButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    createNewButton() {
        let button = document.createElement('a');
        button.innerHTML = this.newButtonHTML;
        button.href = 'javascript:';
        return button;
    }
    hideButton(button) {
        button.style.display = 'none';
    }
    showButton(button) {
        button.style.removeProperty('display');
    }
    findParentCell(element) {
        let cellElement;
        let p = element.parentElement;
        while (p) {
            if (p.tagName == 'TD') {
                cellElement = p;
                break;
            }
            p = p.parentElement;
        }
        return cellElement;
    }
    on_editButtonClick(e) {
        let cellElement = this.findParentCell(e.target);
        console.assert(cellElement != null);
        let rowElement = cellElement.parentElement;
        for (let i = 0; i < rowElement.cells.length; i++) {
            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);
            if (cell.type == "GridViewEditableCell") {
                cell.beginEdit();
            }
        }
        let cell = Control_1.Control.getControlByElement(cellElement);
        this.showButton(cell.cacelButton);
        this.showButton(cell.updateButton);
        this.hideButton(cell.editButton);
        if (cell.deleteButton)
            this.hideButton(cell.deleteButton);
        if (cell.newButton)
            this.hideButton(cell.newButton);
    }
    on_cancelButtonClick(e) {
        let cellElement = this.findParentCell(e.target);
        console.assert(cellElement != null);
        let rowElement = cellElement.parentElement;
        var row = Control_1.Control.getControlByElement(rowElement);
        if (row["isNew"] == true) {
            rowElement.remove();
            return;
        }
        for (let i = 0; i < rowElement.cells.length; i++) {
            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);
            if (cell.type == "GridViewEditableCell") {
                cell.cancelEdit();
            }
        }
        let cell = Control_1.Control.getControlByElement(cellElement);
        this.hideButton(cell.cacelButton);
        this.hideButton(cell.updateButton);
        this.showButton(cell.editButton);
        if (cell.deleteButton)
            this.showButton(cell.deleteButton);
        if (cell.newButton)
            this.showButton(cell.newButton);
    }
    on_insertOrUpdateButtonClick(e) {
        if (e.target['_updating'])
            e.target['_updating'] = true;
        let cellElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, 'td');
        let rowElement = cellElement.parentElement;
        let cell = Control_1.Control.getControlByElement(cellElement);
        let row = Control_1.Control.getControlByElement(rowElement);
        //==========================================================
        // 复制 dataItem 副本
        let dataItem = Object.assign({}, row.dataItem || {});
        //==========================================================
        let dataSource = row.gridView.dataSource;
        let editableCells = new Array();
        for (let i = 0; i < rowElement.cells.length; i++) {
            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);
            if (cell.type == "GridViewEditableCell" && cell.mode == 'edit') {
                let field = cell.field;
                dataItem[field.dataField] = cell.controlValue;
                editableCells.push(cell);
            }
        }
        let isInsert = e.target == cell.insertButton;
        let p = isInsert ? dataSource.insert(dataItem, rowElement.rowIndex) : dataSource.update(dataItem);
        return p.then(() => {
            if (isInsert) {
                rowElement.remove();
                return;
            }
            editableCells.forEach((item) => item.endEdit());
            let cell = Control_1.Control.getControlByElement(cellElement);
            this.showReadStatusButtons(cell);
            e.target['_updating'] = false;
        }).catch(() => e.target['_updating'] = false);
    }
    on_deleteButtonClick(e) {
        let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, "tr");
        let row = Control_1.Control.getControlByElement(rowElement);
        let dataSource = row.gridView.dataSource;
        dataSource.delete(row.dataItem)
            .then(() => {
            rowElement.remove();
        });
    }
    on_newButtonClick(e) {
        let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, "tr"); //cellElement.parentElement as HTMLTableRowElement;
        let row = Control_1.Control.getControlByElement(rowElement);
        let gridView = row.gridView;
        let newRow = gridView.appendDataRow({}, rowElement.rowIndex);
        newRow["isNew"] = true;
        let commandCells = newRow.cells.filter(o => o.type == "GridViewCommandCell"); //GridViewCommandCell
        newRow.cells.filter(o => o.type == "GridViewEditableCell") //GridViewEditableCell
            .forEach(c => c.beginEdit());
        commandCells.forEach(c => {
            let cell = c;
            if (cell.deleteButton)
                this.hideButton(cell.deleteButton);
            if (cell.editButton)
                this.hideButton(cell.editButton);
            this.hideButton(cell.newButton);
            this.showButton(cell.insertButton);
            this.showButton(cell.cacelButton);
        });
    }
}
exports.CommandField = CommandField;


/***/ }),

/***/ "./out/fields/CustomBoundField.js":
/*!****************************************!*\
  !*** ./out/fields/CustomBoundField.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BoundField_1 = __webpack_require__(/*! ./BoundField */ "./out/fields/BoundField.js");
class CustomBoundField extends BoundField_1.BoundField {
    constructor(params) {
        super(params);
    }
    createItemCell(dataItem, cellElement) {
        let cell = super.createItemCell(dataItem, cellElement);
        let cellRender = cell.render;
        cell.render = function (dataItem) {
            let it = this;
            let params = it.field.params;
            if (it.mode == "read" && params.cellRender != null) {
                params.cellRender.apply(cell, [dataItem, it.element]);
                return;
            }
            cellRender.apply(cell, [dataItem]);
        };
        return cell;
    }
}
exports.CustomBoundField = CustomBoundField;


/***/ }),

/***/ "./out/fields/CustomField.js":
/*!***********************************!*\
  !*** ./out/fields/CustomField.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = __webpack_require__(/*! ./DataControlField */ "./out/fields/DataControlField.js");
class CustomField extends DataControlField_1.DataControlField {
    createHeaderCell(cellElement) {
        if (this.params.createHeaderCell) {
            let cell = this.params.createHeaderCell(cellElement);
            cell.style(this.headerStyle);
            return cell;
        }
        return super.createHeaderCell(cellElement);
    }
    createFooterCell(cellElement) {
        if (this.params.createFooterCell) {
            let cell = this.params.createFooterCell(cellElement);
            if (this.params.footerStyle)
                cell.style(this.params.footerStyle);
            return cell;
        }
        return super.createFooterCell(cellElement);
    }
    createItemCell(dataItem, cellElement) {
        if (this.params.createItemCell) {
            let cell = this.params.createItemCell.apply(this, [dataItem, cellElement]);
            cell.style(this.params.itemStyle);
            return cell;
        }
        return super.createItemCell(dataItem, cellElement);
    }
}
exports.CustomField = CustomField;


/***/ }),

/***/ "./out/fields/DataControlField.js":
/*!****************************************!*\
  !*** ./out/fields/DataControlField.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _gridView, _elementProvider;
Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
const index_1 = __webpack_require__(/*! ../cells/index */ "./out/cells/index.js");
class DataControlField {
    constructor(params, elementProvider) {
        _gridView.set(this, void 0);
        _elementProvider.set(this, void 0);
        if (params.visible == null)
            params.visible = true;
        this.params = params;
        __classPrivateFieldSet(this, _elementProvider, elementProvider);
    }
    /**
     * Gets the text that is displayed in the footer item of a data control field.
     */
    get footerText() {
        return this.params.footerText;
    }
    /**
     * Sets the text that is displayed in the footer item of a data control field.
     */
    set footerText(value) {
        this.params.footerText = value;
    }
    /**
     * Gets the text that is displayed in the header item of a data control field.
     */
    get headerText() {
        return this.params.headerText;
    }
    /**
     * Sets the text that is displayed in the header item of a data control field.
     */
    set headerText(value) {
        this.params.headerText = value;
    }
    get elementProvider() {
        if (__classPrivateFieldGet(this, _elementProvider) != null)
            return __classPrivateFieldGet(this, _elementProvider);
        if (this.gridView != null)
            return this.gridView.elementProvider;
        return null;
    }
    get itemStyle() {
        return this.params.itemStyle;
    }
    set itemStyle(value) {
        this.params.itemStyle = value;
    }
    get footerStyle() {
        return this.params.footerStyle;
    }
    set footerStyle(value) {
        this.params.footerStyle = value;
    }
    get headerStyle() {
        return this.params.headerStyle;
    }
    set headerStyle(value) {
        this.params.headerStyle = value;
    }
    get visible() {
        return this.params.visible;
    }
    get gridView() {
        return __classPrivateFieldGet(this, _gridView);
    }
    set gridView(value) {
        __classPrivateFieldSet(this, _gridView, value);
    }
    /**
     * Gets a sort expression that is used by a data source control to sort data.
     */
    get sortExpression() {
        return this.params.sortExpression;
    }
    /**
     * Sets a sort expression that is used by a data source control to sort data.
     */
    set sortExpression(value) {
        this.params.sortExpression = value;
    }
    createHeaderCell(cellElement) {
        let cell = new index_1.GridViewHeaderCell(this, cellElement);
        return cell;
    }
    createFooterCell(cellElement) {
        let cell = new index_1.GridViewCell(cellElement);
        cell.element.innerHTML = this.footerText || '';
        cell.style(this.footerStyle);
        return cell;
    }
    /**
     * 创建数据项单元格对象
     * @param dataItem 数据项
     * @param cellElement 单元格元素
     */
    createItemCell(dataItem, cellElement) {
        if (!dataItem)
            throw Errors_1.Errors.argumentNull('dataItem');
        let cell = new index_1.GridViewCell(cellElement);
        cell.style(this.itemStyle);
        return cell;
    }
}
exports.DataControlField = DataControlField;
_gridView = new WeakMap(), _elementProvider = new WeakMap();


/***/ }),

/***/ "./out/fields/DropdownField.js":
/*!*************************************!*\
  !*** ./out/fields/DropdownField.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _dataItems, _dataSource;
Object.defineProperty(exports, "__esModule", { value: true });
const BoundField_1 = __webpack_require__(/*! ./BoundField */ "./out/fields/BoundField.js");
const maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
const DropDown_1 = __webpack_require__(/*! ../DropDown */ "./out/DropDown.js");
const emptyValue = "";
class DropdownField extends BoundField_1.BoundField {
    constructor(params) {
        super(params);
        _dataItems.set(this, void 0);
        _dataSource.set(this, void 0);
        if (!params.dataSource)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "dataSource");
        if (!params.nameField)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "nameField");
        if (!params.valueField)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "valueField");
        __classPrivateFieldSet(this, _dataSource, params.dataSource);
        params.dataSource.deleted.add(args => {
            let dataItem = this.findDataItem(args.dataItem);
            if (dataItem != null) {
                __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != dataItem));
            }
        });
        params.dataSource.inserted.add(args => {
            if (__classPrivateFieldGet(this, _dataItems)) {
                __classPrivateFieldGet(this, _dataItems).push(args.dataItem);
            }
        });
        params.dataSource.updated.add(args => {
            let dataItem = this.findDataItem(args.dataItem);
            if (dataItem != null) {
                dataItem = Object.assign(dataItem, args.dataItem);
            }
        });
    }
    findDataItem(pks) {
        let items = __classPrivateFieldGet(this, _dataItems) || [];
        for (let i = 0; i < items.length; i++) {
            if (this.samePrimaryKeyValues(items[i], pks)) {
                return items[i];
            }
        }
        return null;
    }
    samePrimaryKeyValues(item1, item2) {
        let primaryKeys = __classPrivateFieldGet(this, _dataSource).primaryKeys;
        for (let j = 0; j < __classPrivateFieldGet(this, _dataSource).primaryKeys.length; j++) {
            if (item1[primaryKeys[j]] != item2[primaryKeys[j]]) {
                return false;
            }
        }
        return true;
    }
    getDataItems() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _dataItems)) {
                let r = yield __classPrivateFieldGet(this, _dataSource).select({ startRowIndex: 0, maximumRows: 1000 });
                __classPrivateFieldSet(this, _dataItems, r.dataItems);
            }
            return __classPrivateFieldGet(this, _dataItems);
        });
    }
    createControl() {
        let element = document.createElement("select");
        element.className = "form-control";
        if (this.params.emptyText) {
            let o = document.createElement("option");
            let emptyText = this.params.emptyText;
            if (emptyText != null)
                o.innerText = emptyText;
            o.value = emptyValue;
            element.append(o);
        }
        new DropDown_1.Dropdown({
            element, dataSource: this.params.dataSource,
            nameField: this.params.nameField,
            valueField: this.params.valueField,
        });
        return {
            element,
            get value() {
                return element.value;
            },
            set value(value) {
                if (value == null) {
                    element.value = emptyValue;
                    return;
                }
                element.value = value;
            }
        };
    }
    createItemCell(dataItem, cellElement) {
        let cell = super.createItemCell(dataItem, cellElement);
        let cellRender = cell.render;
        let field = this;
        cell.render = function (dataItem, mode) {
            mode = mode || "read";
            let it = this;
            let params = it.field.params;
            if (mode == "read") {
                field.getDataItems().then(dataItems => {
                    let item = dataItems.filter(o => o[params.valueField] == dataItem[params.dataField])[0];
                    let content = "";
                    if (item != null && item[params.nameField] != null) {
                        content = `${item[params.nameField]}`;
                    }
                    cellElement.innerHTML = content;
                });
                return;
            }
            cellRender.apply(cell, [dataItem, mode]);
        };
        return cell;
    }
}
exports.DropdownField = DropdownField;
_dataItems = new WeakMap(), _dataSource = new WeakMap();


/***/ }),

/***/ "./out/index.js":
/*!**********************!*\
  !*** ./out/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridView_1 = __webpack_require__(/*! ./GridView */ "./out/GridView.js");
exports.GridView = GridView_1.GridView;
var BoundField_1 = __webpack_require__(/*! ./fields/BoundField */ "./out/fields/BoundField.js");
exports.BoundField = BoundField_1.BoundField;
var CommandField_1 = __webpack_require__(/*! ./fields/CommandField */ "./out/fields/CommandField.js");
exports.CommandField = CommandField_1.CommandField;
var CustomField_1 = __webpack_require__(/*! ./fields/CustomField */ "./out/fields/CustomField.js");
exports.CustomField = CustomField_1.CustomField;
var CustomBoundField_1 = __webpack_require__(/*! ./fields/CustomBoundField */ "./out/fields/CustomBoundField.js");
exports.CustomBoundField = CustomBoundField_1.CustomBoundField;
var DataControlField_1 = __webpack_require__(/*! ./fields/DataControlField */ "./out/fields/DataControlField.js");
exports.DataControlField = DataControlField_1.DataControlField;
var DropdownField_1 = __webpack_require__(/*! ./fields/DropdownField */ "./out/fields/DropdownField.js");
exports.DropdownField = DropdownField_1.DropdownField;
var GridViewEditableCell_1 = __webpack_require__(/*! ./cells/GridViewEditableCell */ "./out/cells/GridViewEditableCell.js");
exports.GridViewEditableCell = GridViewEditableCell_1.GridViewEditableCell;
var DropDown_1 = __webpack_require__(/*! ./DropDown */ "./out/DropDown.js");
exports.DropDown = DropDown_1.Dropdown;
var TextBox_1 = __webpack_require__(/*! ./TextBox */ "./out/TextBox.js");
exports.TextBox = TextBox_1.TextBox;
var index_1 = __webpack_require__(/*! ./data-source/index */ "./out/data-source/index.js");
exports.ArrayDataSource = index_1.ArrayDataSource;
var NumberPagingBar_1 = __webpack_require__(/*! ./NumberPagingBar */ "./out/NumberPagingBar.js");
exports.DataSourcePagingBar = NumberPagingBar_1.DataSourcePagingBar;
var Control_1 = __webpack_require__(/*! ./Control */ "./out/Control.js");
exports.Control = Control_1.Control;
var maishu_toolkit_1 = __webpack_require__(/*! maishu-toolkit */ "maishu-toolkit");
exports.DataSource = maishu_toolkit_1.DataSource;
exports.DataSourceSelectArguments = maishu_toolkit_1.DataSourceSelectArguments;
var index_2 = __webpack_require__(/*! ./cells/index */ "./out/cells/index.js");
exports.GridViewCell = index_2.GridViewCell;
exports.GridViewDataCell = index_2.GridViewDataCell;
var index_3 = __webpack_require__(/*! ./rows/index */ "./out/rows/index.js");
exports.GridViewDataRow = index_3.GridViewDataRow;
exports.GridViewRowType = index_3.GridViewRowType;


/***/ }),

/***/ "./out/rows/GridViewDataRow.js":
/*!*************************************!*\
  !*** ./out/rows/GridViewDataRow.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GridViewRow_1 = __webpack_require__(/*! ./GridViewRow */ "./out/rows/GridViewRow.js");
const GridViewRowType_1 = __webpack_require__(/*! ./GridViewRowType */ "./out/rows/GridViewRowType.js");
class GridViewDataRow extends GridViewRow_1.GridViewRow {
    constructor(gridView, dataItem, rowElement) {
        super(GridViewRowType_1.GridViewRowType.Data, rowElement, gridView);
        this._dataItem = dataItem;
        for (var i = 0; i < gridView.columns.length; i++) {
            var column = gridView.columns[i];
            var cell = column.createItemCell(dataItem, this.gridView.elementProvider.createCellElement("body"));
            cell.visible = column.visible;
            this.appendChild(cell);
        }
    }
    get dataItem() {
        return this._dataItem;
    }
}
exports.GridViewDataRow = GridViewDataRow;


/***/ }),

/***/ "./out/rows/GridViewRow.js":
/*!*********************************!*\
  !*** ./out/rows/GridViewRow.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _rowType, _gridView;
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __webpack_require__(/*! ../Control */ "./out/Control.js");
const Errors_1 = __webpack_require__(/*! ../Errors */ "./out/Errors.js");
class GridViewRow extends Control_1.Control {
    constructor(rowType, rowElement, gridView) {
        super(rowElement);
        _rowType.set(this, void 0);
        _gridView.set(this, void 0);
        if (gridView == null)
            throw Errors_1.Errors.argumentNull("gridView");
        __classPrivateFieldSet(this, _gridView, gridView);
        __classPrivateFieldSet(this, _rowType, rowType);
    }
    get rowType() {
        return __classPrivateFieldGet(this, _rowType);
    }
    get gridView() {
        return __classPrivateFieldGet(this, _gridView);
    }
    get cells() {
        let cells = new Array();
        for (let i = 0; i < this.element.children.length; i++) {
            let cell = Control_1.Control.getControlByElement(this.element.children[i]);
            console.assert(cell != null);
            cells[i] = cell;
        }
        return cells;
    }
}
exports.GridViewRow = GridViewRow;
_rowType = new WeakMap(), _gridView = new WeakMap();
// function findParentElement(element: HTMLElement, parentTagName: string) {
//     console.assert(element != null);
//     console.assert(parentTagName != null);
//     parentTagName = parentTagName.toUpperCase();
//     let p = element.parentElement;
//     while (p) {
//         if (p.tagName == parentTagName)
//             return p;
//         p = p.parentElement;
//     }
// }


/***/ }),

/***/ "./out/rows/GridViewRowType.js":
/*!*************************************!*\
  !*** ./out/rows/GridViewRowType.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridViewRowType;
(function (GridViewRowType) {
    GridViewRowType[GridViewRowType["Header"] = 0] = "Header";
    GridViewRowType[GridViewRowType["Footer"] = 1] = "Footer";
    GridViewRowType[GridViewRowType["Data"] = 2] = "Data";
    GridViewRowType[GridViewRowType["Paging"] = 3] = "Paging";
    GridViewRowType[GridViewRowType["Empty"] = 4] = "Empty";
})(GridViewRowType = exports.GridViewRowType || (exports.GridViewRowType = {}));


/***/ }),

/***/ "./out/rows/index.js":
/*!***************************!*\
  !*** ./out/rows/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridViewRow_1 = __webpack_require__(/*! ./GridViewRow */ "./out/rows/GridViewRow.js");
exports.GridViewRow = GridViewRow_1.GridViewRow;
var GridViewRowType_1 = __webpack_require__(/*! ./GridViewRowType */ "./out/rows/GridViewRowType.js");
exports.GridViewRowType = GridViewRowType_1.GridViewRowType;
var GridViewDataRow_1 = __webpack_require__(/*! ./GridViewDataRow */ "./out/rows/GridViewDataRow.js");
exports.GridViewDataRow = GridViewDataRow_1.GridViewDataRow;


/***/ }),

/***/ "maishu-toolkit":
/*!*********************************!*\
  !*** external "maishu-toolkit" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_toolkit__;

/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map