{"version":3,"sources":["webpack://wuzhui/webpack/universalModuleDefinition","webpack://wuzhui/webpack/bootstrap","webpack://wuzhui/./out/Control.js","webpack://wuzhui/./out/DropDown.js","webpack://wuzhui/./out/ElementProvider.js","webpack://wuzhui/./out/Errors.js","webpack://wuzhui/./out/GridView.js","webpack://wuzhui/./out/NumberPagingBar.js","webpack://wuzhui/./out/TextBox.js","webpack://wuzhui/./out/Utility.js","webpack://wuzhui/./out/cells/GridViewCell.js","webpack://wuzhui/./out/cells/GridViewCommandCell.js","webpack://wuzhui/./out/cells/GridViewDataCell.js","webpack://wuzhui/./out/cells/GridViewEditableCell.js","webpack://wuzhui/./out/cells/GridViewHeaderCell.js","webpack://wuzhui/./out/cells/index.js","webpack://wuzhui/./out/data-source/ArrayDataSource.js","webpack://wuzhui/./out/data-source/index.js","webpack://wuzhui/./out/fields/BoundField.js","webpack://wuzhui/./out/fields/CommandField.js","webpack://wuzhui/./out/fields/CustomBoundField.js","webpack://wuzhui/./out/fields/CustomField.js","webpack://wuzhui/./out/fields/DataControlField.js","webpack://wuzhui/./out/fields/DropdownField.js","webpack://wuzhui/./out/index.js","webpack://wuzhui/./out/rows/GridViewDataRow.js","webpack://wuzhui/./out/rows/GridViewRow.js","webpack://wuzhui/./out/rows/GridViewRowType.js","webpack://wuzhui/./out/rows/index.js","webpack://wuzhui/external \"maishu-toolkit\""],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,iCAAU;AACnC,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxDa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,iBAAiB,mBAAO,CAAC,iCAAU;AACnC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChGa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,IAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa,GAAG,UAAU;AAC3D;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACrDY;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD,0BAA0B,mBAAO,CAAC,mDAAmB;AACrD,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,iBAAiB,mBAAO,CAAC,iCAAU;AACnC,gBAAgB,mBAAO,CAAC,2CAAe;AACvC,gBAAgB,mBAAO,CAAC,yCAAc;AACtC,0BAA0B,mBAAO,CAAC,mDAAmB;AACrD,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,2BAA2B,mBAAmB;AACxG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE,gFAAgF;AAChF;AACA;AACA;AACA,wDAAwD,oBAAoB,GAAG;AAC/E;AACA;AACA;AACA,oEAAoE,wEAAwE;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0BAA0B;AACrF,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAwC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAwC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClRa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,iCAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4BAA4B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+BAA+B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChiBa;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,iBAAiB,mBAAO,CAAC,iCAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCa;AACb,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClDa;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,oCAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTa;AACb,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,mDAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRa;AACb,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,mDAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA,wBAAwB;AACxB,wCAAwC;AACxC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE,GAAG,EAAE,GAAG,EAAE;AACtC;AACA,0BAA0B,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AAChD;AACA,0BAA0B,EAAE,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY;AACxF;AACA,0BAA0B,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACrD;AACA,0BAA0B,EAAE,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY;AACvG;AACA,0BAA0B,EAAE,GAAG,EAAE;AACjC;AACA,0BAA0B,EAAE,GAAG,EAAE,GAAG,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChHa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,kCAAW;AACpC,kBAAkB,mBAAO,CAAC,oCAAY;AACtC,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1Ea;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD,iBAAiB,mBAAO,CAAC,kCAAW;AACpC,uBAAuB,mBAAO,CAAC,mDAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D,8BAA8B,WAAW;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChFa;AACb,8CAA8C,cAAc;AAC5D,qBAAqB,mBAAO,CAAC,mDAAgB;AAC7C;AACA,yBAAyB,mBAAO,CAAC,2DAAoB;AACrD;AACA,2BAA2B,mBAAO,CAAC,+DAAsB;AACzD;;;;;;;;;;;;;ACPa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,8BAA8B;AAC9B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvFa;AACb,8CAA8C,cAAc;AAC5D,wBAAwB,mBAAO,CAAC,+DAAmB;AACnD;;;;;;;;;;;;;ACHa;AACb,8CAA8C,cAAc;AAC5D,2BAA2B,mBAAO,CAAC,4DAAoB;AACvD,+BAA+B,mBAAO,CAAC,0EAA+B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxEa;AACb;AACA,8CAA8C,cAAc;AAC5D,2BAA2B,mBAAO,CAAC,4DAAoB;AACvD,kBAAkB,mBAAO,CAAC,oCAAY;AACtC,kBAAkB,mBAAO,CAAC,oCAAY;AACtC,8BAA8B,mBAAO,CAAC,wEAA8B;AACpE,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0FAA0F;AAC1F;AACA;AACA,8CAA8C;AAC9C;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;AC7Sa;AACb,8CAA8C,cAAc;AAC5D,qBAAqB,mBAAO,CAAC,gDAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBa;AACb,8CAA8C,cAAc;AAC5D,2BAA2B,mBAAO,CAAC,4DAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9Ba;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,kCAAW;AACpC,gBAAgB,mBAAO,CAAC,4CAAgB;AACxzHa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,qBAAqB,mBAAO,CAAC,gDAAc;AAC3C,yBAAyB,mBAAO,CAAC,sCAAgB;AACjD,mBAAmB,mBAAO,CAAC,sCAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAkE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,sCAAsC;AACtH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uBAAuB;AAC5D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7Ia;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,qCAAY;AACrC;AACA,mBAAmB,mBAAO,CAAC,uDAAqB;AAChD;AACA,qBAAqB,mBAAO,CAAC,2DAAuB;AACpD;AACA,oBAAoB,mBAAO,CAAC,yDAAsB;AAClD;AACA,yBAAyB,mBAAO,CAAC,mEAA2B;AAC5D;AACA,yBAAyB,mBAAO,CAAC,mEAA2B;AAC5D;AACA,sBAAsB,mBAAO,CAAC,6DAAwB;AACtD;AACA,6BAA6B,mBAAO,CAAC,yEAA8B;AACnE;AACA,iBAAiB,mBAAO,CAAC,qCAAY;AACrC;AACA,gBAAgB,mBAAO,CAAC,mCAAW;AACnC;AACA,cAAc,mBAAO,CAAC,uDAAqB;AAC3C;AACA,wBAAwB,mBAAO,CAAC,mDAAmB;AACnD;AACA,gBAAgB,mBAAO,CAAC,mCAAW;AACnC;AACA,uBAAuB,mBAAO,CAAC,sCAAgB;AAC/C;AACA;AACA,cAAc,mBAAO,CAAC,2CAAe;AACrC;AACA;AACA,cAAc,mBAAO,CAAC,yCAAc;AACpC;AACA;;;;;;;;;;;;;ACpCa;AACb,8CAA8C,cAAc;AAC5D,sBAAsB,mBAAO,CAAC,gDAAe;AAC7C,0BAA0B,mBAAO,CAAC,wDAAmB;AACrD;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,oCAAY;AACtC,iBAAiB,mBAAO,CAAC,kCAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxDa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4EAA4E;;;;;;;;;;;;;ACThE;AACb,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,gDAAe;AAC3C;AACA,wBAAwB,mBAAO,CAAC,wDAAmB;AACnD;AACA,wBAAwB,mBAAO,CAAC,wDAAmB;AACnD;;;;;;;;;;;;ACPA,4D","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"maishu-toolkit\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"maishu-toolkit\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wuzhui\"] = factory(require(\"maishu-toolkit\"));\n\telse\n\t\troot[\"wuzhui\"] = factory(root[\"maishu-toolkit\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_maishu_toolkit__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./out/index.js\");\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Errors_1 = require(\"./Errors\");\r\nconst Utility_1 = require(\"./Utility\");\r\n// namespace wuzhui {\r\nconst CONTROL_DATA_NAME = 'Control';\r\nclass Control {\r\n    constructor(element) {\r\n        if (!element)\r\n            throw Errors_1.Errors.argumentNull('element');\r\n        this._element = element;\r\n        Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME, this);\r\n    }\r\n    get visible() {\r\n        return Utility_1.ElementHelper.isVisible(this._element);\r\n    }\r\n    set visible(value) {\r\n        if (value) {\r\n            Utility_1.ElementHelper.showElement(this._element);\r\n        }\r\n        else {\r\n            Utility_1.ElementHelper.hideElement(this._element);\r\n        }\r\n    }\r\n    get element() {\r\n        return this._element;\r\n    }\r\n    appendChild(child, index) {\r\n        if (child == null)\r\n            throw Errors_1.Errors.argumentNull('child');\r\n        let childElement;\r\n        if (child.tagName != null) {\r\n            childElement = child;\r\n        }\r\n        else {\r\n            childElement = child.element;\r\n        }\r\n        let placeChild;\r\n        if (index != null) {\r\n            placeChild = this.element.children[index];\r\n        }\r\n        if (placeChild == null) {\r\n            this.element.appendChild(childElement);\r\n        }\r\n        else {\r\n            this.element.insertBefore(childElement, placeChild);\r\n        }\r\n    }\r\n    style(value) {\r\n        Utility_1.applyStyle(this.element, value);\r\n    }\r\n    static getControlByElement(element) {\r\n        return Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME);\r\n    }\r\n}\r\nexports.Control = Control;\r\n// }\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar _dataSource, _options, _nameField, _valueField;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Control_1 = require(\"./Control\");\r\nconst Errors_1 = require(\"./Errors\");\r\nclass Dropdown extends Control_1.Control {\r\n    constructor(params) {\r\n        super(params.element);\r\n        _dataSource.set(this, void 0);\r\n        _options.set(this, {});\r\n        _nameField.set(this, void 0);\r\n        _valueField.set(this, void 0);\r\n        if (params == null)\r\n            throw Errors_1.Errors.argumentNull('params');\r\n        if (params.dataSource == null)\r\n            throw Errors_1.Errors.argumentFieldNull('params', 'dataSource');\r\n        if (params.element == null)\r\n            throw Errors_1.Errors.argumentFieldNull('params', 'element');\r\n        if (params.nameField == null)\r\n            throw Errors_1.Errors.argumentFieldNull(\"params\", \"nameField\");\r\n        if (params.valueField == null)\r\n            throw Errors_1.Errors.argumentFieldNull(\"params\", \"valueField\");\r\n        __classPrivateFieldSet(this, _nameField, params.nameField);\r\n        __classPrivateFieldSet(this, _valueField, params.valueField);\r\n        this.init(params);\r\n    }\r\n    get dataSource() {\r\n        return __classPrivateFieldGet(this, _dataSource);\r\n    }\r\n    init(params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            __classPrivateFieldSet(this, _dataSource, params.dataSource);\r\n            let r = yield params.dataSource.select({});\r\n            r.dataItems.forEach(dataItem => {\r\n                this.addOptionElement(dataItem);\r\n            });\r\n            __classPrivateFieldGet(this, _dataSource).inserted.add(args => {\r\n                this.addOptionElement(args.dataItem);\r\n            });\r\n            __classPrivateFieldGet(this, _dataSource).deleted.add(args => {\r\n                let pk = this.primaryKeyValue(args.dataItem);\r\n                let option = __classPrivateFieldGet(this, _options)[pk];\r\n                if (option) {\r\n                    this.element.removeChild(option);\r\n                }\r\n            });\r\n            __classPrivateFieldGet(this, _dataSource).updated.add(args => {\r\n                let pk = this.primaryKeyValue(args.dataItem);\r\n                let option = __classPrivateFieldGet(this, _options)[pk];\r\n                if (option && args.dataItem[__classPrivateFieldGet(this, _nameField)] != null) {\r\n                    option.innerHTML = args.dataItem[__classPrivateFieldGet(this, _nameField)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    addOptionElement(dataItem) {\r\n        console.assert(__classPrivateFieldGet(this, _nameField) != null);\r\n        console.assert(__classPrivateFieldGet(this, _valueField) != null);\r\n        let name = dataItem[__classPrivateFieldGet(this, _nameField)];\r\n        let value = dataItem[__classPrivateFieldGet(this, _valueField)];\r\n        let option = document.createElement('option');\r\n        option.innerHTML = name || \"\";\r\n        option.value = value || \"\";\r\n        this.element.appendChild(option);\r\n        let pk = this.primaryKeyValue(dataItem);\r\n        __classPrivateFieldGet(this, _options)[pk] = option;\r\n        return option;\r\n    }\r\n    primaryKeyValue(dataItem) {\r\n        let r = __classPrivateFieldGet(this, _dataSource).primaryKeys.map(pk => dataItem[pk]).join(\"-\");\r\n        return r;\r\n    }\r\n}\r\nexports.Dropdown = Dropdown;\r\n_dataSource = new WeakMap(), _options = new WeakMap(), _nameField = new WeakMap(), _valueField = new WeakMap();\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.defaultElementProvider = {\r\n    createRowElement: () => document.createElement(\"tr\"),\r\n    createCellElement: (type = \"body\") => type == \"header\" ? document.createElement(\"th\") : document.createElement('td'),\r\n    // createViewElement: () => document.createElement(\"table\"),\r\n    createHeaderElement: () => document.createElement(\"thead\"),\r\n    createFooterElement: () => document.createElement(\"tfoot\"),\r\n    createBodyElement: () => document.createElement(\"tbody\"),\r\n};\r\n","\"use strict\";\r\n// namespace wuzhui {\r\n// export class Errors {\r\n//     static notImplemented(message?: string) {\r\n//         message = message || \"Not implemented\";\r\n//         return new Error(message);\r\n//     }\r\n//     static argumentNull(paramName) {\r\n//         return new Error(\"Argument '\" + paramName + \"' can not be null.\");\r\n//     }\r\n//     static controllBelonsAnother() {\r\n//         return new Error(\"The control is belongs another control.\");\r\n//     }\r\n//     static columnsCanntEmpty() {\r\n//         return new Error(\"Columns cannt empty.\");\r\n//     }\r\n//     static dataSourceCanntInsert() {\r\n//         return new Error(\"DataSource can not insert.\");\r\n//     }\r\n//     static dataSourceCanntUpdate() {\r\n//         return new Error(\"DataSource can not update.\");\r\n//     }\r\n//     static dataSourceCanntDelete() {\r\n//         return new Error(\"DataSource can not delete.\");\r\n//     }\r\n//     static primaryKeyNull(key: string) {\r\n//         let msg = `Primary key named '${key}' value is null.`;\r\n//         return new Error(msg);\r\n//     }\r\n//     static queryResultTypeError() {\r\n//         let msg = 'Type of the query result is expected as Array or DataSourceSelectResult.';\r\n//         return new Error(msg);\r\n//     }\r\n//     static argumentFieldNull(argumentName: string, fieldName: string) {\r\n//         let msg = `Argument ${argumentName} ${fieldName} field can not be null or empty.`\r\n//         return new Error(msg);\r\n//     }\r\n// }\r\n// }\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nexports.Errors = Object.assign(maishu_toolkit_1.errors, {\r\n    columnsCanntEmpty() {\r\n        return new Error(\"Columns cannt empty.\");\r\n    },\r\n    notImplemented(message) {\r\n        message = message || \"Not implemented\";\r\n        return new Error(message);\r\n    },\r\n    gridViewNull() {\r\n        let msg = \"Grid view is null.\";\r\n        return new Error(msg);\r\n    }\r\n});\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Control_1 = require(\"./Control\");\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nconst NumberPagingBar_1 = require(\"./NumberPagingBar\");\r\nconst Utility_1 = require(\"./Utility\");\r\nconst Errors_1 = require(\"./Errors\");\r\nconst index_1 = require(\"./cells/index\");\r\nconst index_2 = require(\"./rows/index\");\r\nconst ElementProvider_1 = require(\"./ElementProvider\");\r\nconst maishu_toolkit_2 = require(\"maishu-toolkit\");\r\nclass GridView extends Control_1.Control {\r\n    constructor(params, elementProvider = ElementProvider_1.defaultElementProvider) {\r\n        super(params.element);\r\n        this.emptyDataHTML = '暂无记录';\r\n        this.initDataHTML = '数据正在加载中...';\r\n        this.loadFailHTML = '加载数据失败，点击重新加载。';\r\n        //========================================================\r\n        // 样式\r\n        // headerStyle: string;\r\n        // footerStyle: string;\r\n        // rowStyle: string;\r\n        // alternatingRowStyle: string;\r\n        //private emptyDataRowStyle: string;\r\n        //========================================================\r\n        this.rowCreated = new maishu_toolkit_1.Callback(); //callbacks<GridView<T>, { row: GridViewRow }>();\r\n        this.elementProvider = elementProvider;\r\n        params = Object.assign({\r\n            showHeader: true, showFooter: false,\r\n            showPagingBar: true\r\n        }, params);\r\n        this.selectArguments = new maishu_toolkit_1.DataSourceSelectArguments();\r\n        if (params.pageSize)\r\n            this.selectArguments.maximumRows = params.pageSize;\r\n        this._params = params;\r\n        this._columns = params.columns || [];\r\n        if (this._columns.length == 0)\r\n            throw Errors_1.Errors.columnsCanntEmpty();\r\n        for (var i = 0; i < this._columns.length; i++) {\r\n            var column = this._columns[i];\r\n            column.gridView = this;\r\n        }\r\n        this._dataSource = params.dataSource;\r\n        this._dataSource.selected.add(args => this.on_selectedExecuted(args.selectResult));\r\n        this._dataSource.updated.add(args => this.on_updateExecuted(args.dataItem));\r\n        this._dataSource.inserted.add(args => this.on_insertExecuted(args.dataItem, args.index));\r\n        this._dataSource.deleted.add(args => this.on_deleteExecuted(args.dataItem));\r\n        this._dataSource.selecting.add(args => {\r\n            let display = this._emtpyRow.element.style.display;\r\n            if (display != 'none') {\r\n                this._emtpyRow.element.children[0].innerHTML = this.initDataHTML;\r\n            }\r\n        });\r\n        this._dataSource.error.add(args => {\r\n            if (args.error.method == 'select') {\r\n                this.renderDataItems([]);\r\n                var element = this._emtpyRow.cells[0].element;\r\n                element.innerHTML = this.loadFailHTML;\r\n                element.onclick = () => {\r\n                    this._dataSource.select(this.selectArguments);\r\n                };\r\n                args.error.handled = true;\r\n                console.error(args.error.message);\r\n                console.log(args.error.stack);\r\n            }\r\n        });\r\n        if (params.showHeader) {\r\n            this._header = new Control_1.Control(this.elementProvider.createHeaderElement());\r\n            this.appendChild(this._header);\r\n            this.appendHeaderRow();\r\n        }\r\n        this.emptyDataHTML = params.emptyDataHTML || this.emptyDataHTML;\r\n        this.initDataHTML = params.initDataHTML || this.initDataHTML;\r\n        this._body = new Control_1.Control(this.elementProvider.createBodyElement());\r\n        this.appendChild(this._body);\r\n        this.appendEmptyRow();\r\n        let showPagingBar = params.showPagingBar;\r\n        if (params.showFooter || showPagingBar) {\r\n            this._footer = new Control_1.Control(this.elementProvider.createFooterElement());\r\n            this.appendChild(this._footer);\r\n            if (params.showFooter)\r\n                this.appendFooterRow();\r\n            if (showPagingBar) {\r\n                this.createPagingBar(params.pagerSettings);\r\n                // this.pagingBar.selectArguments.maximumRows = params.pageSize;\r\n            }\r\n        }\r\n        // this.selectArguments = this.pagingBar ? this.pagingBar.selectArguments : new DataSourceSelectArguments();\r\n        // if (params.pageSize)\r\n        //     this.selectArguments.maximumRows = params.pageSize;\r\n        this.dataSource.select(this.selectArguments);\r\n    }\r\n    createPagingBar(pagerSettings) {\r\n        var pagingBarContainer = this.elementProvider.createRowElement(); //document.createElement('tr');\r\n        var pagingBarElement = this.elementProvider.createCellElement(\"footer\"); //document.createElement('td');\r\n        // pagingBarElement.className = GridView.pagingBarClassName;\r\n        maishu_toolkit_2.HTML.addClassName(pagingBarElement, GridView.pagingBarClassName);\r\n        if (pagingBarElement.tagName == \"TD\")\r\n            pagingBarElement.setAttribute(\"colspan\", `${this.columns.length}`); // pagingBarElement.colSpan = this.columns.length;\r\n        pagingBarContainer.appendChild(pagingBarElement);\r\n        console.assert(this._footer != null);\r\n        this._footer.appendChild(pagingBarContainer);\r\n        this.pagingBar = new NumberPagingBar_1.DataSourcePagingBar({ dataSource: this.dataSource, element: pagingBarElement, pagerSettings });\r\n    }\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n    get dataSource() {\r\n        return this._dataSource;\r\n    }\r\n    appendEmptyRow() {\r\n        this._emtpyRow = new index_2.GridViewRow(index_2.GridViewRowType.Empty, this.elementProvider.createRowElement(), this);\r\n        this._emtpyRow.element.className = GridView.emptyRowClassName;\r\n        let cell = new index_1.GridViewCell(this.elementProvider.createCellElement(\"body\"));\r\n        cell.element.setAttribute(\"colspan\", this.columns.length.toString());\r\n        if (this._params.emptyDataRowStyle) {\r\n            Utility_1.applyStyle(cell.element, this._params.emptyDataRowStyle);\r\n        }\r\n        this._emtpyRow.appendChild(cell);\r\n        this._body.appendChild(this._emtpyRow);\r\n        this.rowCreated.fire({ row: this._emtpyRow });\r\n    }\r\n    appendDataRow(dataItem, index) {\r\n        var row = new index_2.GridViewDataRow(this, dataItem, this.elementProvider.createRowElement());\r\n        maishu_toolkit_2.HTML.addClassName(row.element, GridView.dataRowClassName);\r\n        this._body.appendChild(row, index);\r\n        let cells = row.cells;\r\n        for (let j = 0; j < cells.length; j++) {\r\n            let cell = cells[j];\r\n            if (cell.render != null) {\r\n                cell.render(dataItem);\r\n            }\r\n        }\r\n        this.rowCreated.fire({ row });\r\n        if (this._emtpyRow.element.style.display != 'none')\r\n            this.hideEmptyRow();\r\n        return row;\r\n    }\r\n    on_sort(sender, args) {\r\n        if (this._currentSortCell != null && this._currentSortCell != sender) {\r\n            this._currentSortCell.clearSortIcon();\r\n        }\r\n        this._currentSortCell = sender;\r\n    }\r\n    appendHeaderRow() {\r\n        var row = new index_2.GridViewRow(index_2.GridViewRowType.Header, this.elementProvider.createRowElement(), this);\r\n        for (var i = 0; i < this.columns.length; i++) {\r\n            var column = this.columns[i];\r\n            let cell = column.createHeaderCell(this.elementProvider.createCellElement(\"header\"));\r\n            if (cell.type == \"GridViewHeaderCell\") {\r\n                cell.sorting.add(a => this.on_sort(cell, a));\r\n            }\r\n            row.appendChild(cell);\r\n            cell.visible = this.columns[i].visible;\r\n        }\r\n        this._header.appendChild(row);\r\n    }\r\n    appendFooterRow() {\r\n        var row = new index_2.GridViewRow(index_2.GridViewRowType.Footer, this.elementProvider.createRowElement(), this);\r\n        for (var i = 0; i < this.columns.length; i++) {\r\n            var column = this.columns[i];\r\n            let cell = column.createFooterCell(this.elementProvider.createCellElement(\"footer\"));\r\n            row.appendChild(cell);\r\n            cell.visible = column.visible;\r\n        }\r\n        this._footer.appendChild(row);\r\n    }\r\n    renderDataItems(items) {\r\n        var rows = this._body.element.querySelectorAll(`.${GridView.dataRowClassName}`);\r\n        for (let i = 0; i < rows.length; i++)\r\n            this._body.element.removeChild(rows[i]);\r\n        if (items.length == 0) {\r\n            this.showEmptyRow();\r\n            return;\r\n        }\r\n        for (let i = 0; i < items.length; i++) {\r\n            this.appendDataRow(items[i]);\r\n        }\r\n    }\r\n    on_selectedExecuted(e) {\r\n        let dataItems = e.dataItems;\r\n        if (this._params.translate) {\r\n            dataItems = this._params.translate(dataItems);\r\n        }\r\n        this.renderDataItems(dataItems);\r\n    }\r\n    on_updateExecuted(item) {\r\n        console.assert(item != null);\r\n        let dataItems = [];\r\n        for (let i = 0; i < this._body.element.children.length; i++) {\r\n            let row_element = this._body.element.children[i];\r\n            let row = Control_1.Control.getControlByElement(row_element);\r\n            ;\r\n            if (row.rowType != index_2.GridViewRowType.Data)\r\n                continue;\r\n            let dataItem = row.dataItem;\r\n            dataItems.push(dataItem);\r\n            if (!this.dataSource.isSameItem(dataItem, item))\r\n                continue;\r\n            if (dataItem != item) {\r\n                Object.assign(dataItem, item);\r\n            }\r\n            let cells = row.cells;\r\n            for (let j = 0; j < cells.length; j++) {\r\n                let cell = cells[j];\r\n                if (cell.type == \"GridViewDataCell\") {\r\n                    cell.render(dataItem);\r\n                }\r\n                else if (cell.type == \"GridViewEditableCell\") {\r\n                    cell.render(dataItem);\r\n                }\r\n            }\r\n        }\r\n        if (this._params.translate) {\r\n            dataItems = this._params.translate(dataItems);\r\n            this.renderDataItems(dataItems);\r\n        }\r\n    }\r\n    on_insertExecuted(item, index) {\r\n        if (index == null)\r\n            index = 0;\r\n        if (!this._params.translate) {\r\n            this.appendDataRow(item, index);\r\n            return;\r\n        }\r\n        let dataItems = [item];\r\n        for (let i = 0; i < this._body.element.children.length; i++) {\r\n            let row_element = this._body.element.children[i];\r\n            let row = Control_1.Control.getControlByElement(row_element);\r\n            ;\r\n            if (row.rowType != index_2.GridViewRowType.Data)\r\n                continue;\r\n            let dataItem = row.dataItem;\r\n            dataItems.push(dataItem);\r\n        }\r\n        dataItems = this._params.translate(dataItems);\r\n        this.renderDataItems(dataItems);\r\n    }\r\n    on_deleteExecuted(item) {\r\n        let rows = this._body.element.children;\r\n        let dataRows = new Array();\r\n        for (let i = 0; i < rows.length; i++) {\r\n            let row = Control_1.Control.getControlByElement(rows[i]);\r\n            if ((row.rowType == index_2.GridViewRowType.Data))\r\n                dataRows.push(row);\r\n        }\r\n        if (this._params.translate) {\r\n            let dataItems = dataRows.map(o => o.dataItem)\r\n                .filter(o => !this.dataSource.isSameItem(o, item));\r\n            dataItems = this._params.translate(dataItems);\r\n            this.renderDataItems(dataItems);\r\n            return;\r\n        }\r\n        for (let i = 0; i < dataRows.length; i++) {\r\n            let dataRow = dataRows[i];\r\n            if (!this.dataSource.isSameItem(item, dataRow.dataItem))\r\n                continue;\r\n            dataRow.element.remove();\r\n            if (dataRows.length == 1)\r\n                this.showEmptyRow();\r\n        }\r\n    }\r\n    showEmptyRow() {\r\n        this._emtpyRow.element.children[0].innerHTML = this.emptyDataHTML;\r\n        this._emtpyRow.element.style.removeProperty('display');\r\n    }\r\n    hideEmptyRow() {\r\n        this._emtpyRow.element.style.display = 'none';\r\n    }\r\n}\r\nexports.GridView = GridView;\r\nGridView.emptyRowClassName = 'empty';\r\nGridView.dataRowClassName = 'data';\r\nGridView.pagingBarClassName = 'pagingBar';\r\n// }\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Errors_1 = require(\"./Errors\");\r\n// namespace wuzhui {\r\nvar PagerPosition;\r\n(function (PagerPosition) {\r\n    PagerPosition[PagerPosition[\"Bottom\"] = 0] = \"Bottom\";\r\n    PagerPosition[PagerPosition[\"Top\"] = 1] = \"Top\";\r\n    PagerPosition[PagerPosition[\"TopAndBottom\"] = 2] = \"TopAndBottom\";\r\n})(PagerPosition = exports.PagerPosition || (exports.PagerPosition = {}));\r\n;\r\nclass PagingBar {\r\n    init(dataSource) {\r\n        this._pageIndex = 0;\r\n        var pagingBar = this;\r\n        pagingBar.totalRowCount = 1000000;\r\n        if (dataSource) {\r\n            dataSource.selected.add(args => {\r\n                this._selectArguments = args.selectArguments;\r\n                pagingBar.pageSize = args.selectArguments.maximumRows;\r\n                var totalRowCount = args.selectResult.totalRowCount;\r\n                if (totalRowCount != null && totalRowCount >= 0) {\r\n                    pagingBar.totalRowCount = totalRowCount;\r\n                }\r\n                var startRowIndex = this._selectArguments.startRowIndex;\r\n                if (startRowIndex == null || startRowIndex <= 0)\r\n                    startRowIndex = 0;\r\n                pagingBar.pageIndex = Math.floor(startRowIndex / pagingBar.pageSize);\r\n                pagingBar.render();\r\n            });\r\n            dataSource.deleted.add(function () {\r\n                pagingBar.totalRowCount = pagingBar.totalRowCount - 1;\r\n                pagingBar.render();\r\n            });\r\n            dataSource.inserted.add(function () {\r\n                pagingBar.totalRowCount = pagingBar.totalRowCount + 1;\r\n                pagingBar.render();\r\n            });\r\n        }\r\n    }\r\n    get selectArguments() {\r\n        console.assert(this._selectArguments != null);\r\n        return this._selectArguments;\r\n    }\r\n    get pageCount() {\r\n        var pageCount = Math.ceil(this.totalRowCount / this.pageSize);\r\n        return pageCount;\r\n    }\r\n    get pageSize() {\r\n        return this._pageSize;\r\n    }\r\n    set pageSize(value) {\r\n        this._pageSize = value;\r\n    }\r\n    get pageIndex() {\r\n        return this._pageIndex;\r\n    }\r\n    set pageIndex(value) {\r\n        this._pageIndex = value;\r\n    }\r\n    get totalRowCount() {\r\n        return this._totalRowCount;\r\n    }\r\n    set totalRowCount(value) {\r\n        this._totalRowCount = value;\r\n    }\r\n    // Virtual Method\r\n    render() {\r\n        throw Errors_1.Errors.notImplemented('The table-row render method is not implemented.');\r\n    }\r\n}\r\nexports.PagingBar = PagingBar;\r\nclass DataSourcePagingBar extends PagingBar {\r\n    constructor(params) {\r\n        if (!params.dataSource)\r\n            throw Errors_1.Errors.argumentNull('dataSource');\r\n        if (!params.element)\r\n            throw Errors_1.Errors.argumentNull('element');\r\n        let pagerSettings = Object.assign(DataSourcePagingBar.defaultPagerSettings, params.pagerSettings || {});\r\n        super();\r\n        this.dataSource = params.dataSource;\r\n        this.pagerSettings = pagerSettings;\r\n        this.element = params.element;\r\n        this.numberButtons = new Array();\r\n        this.createButton = this.createPagingButton;\r\n        this.createLabel = this.createTotalLabel;\r\n        let buttonContainer = pagerSettings.buttonContainerWraper ?\r\n            document.createElement(pagerSettings.buttonContainerWraper) :\r\n            document.createElement('div');\r\n        buttonContainer.className = pagerSettings.buttonContainerClassName || \"buttons\";\r\n        this.element.appendChild(buttonContainer);\r\n        this.createPreviousButtons(buttonContainer);\r\n        this.createNumberButtons(buttonContainer);\r\n        this.createNextButtons(buttonContainer);\r\n        if (this.pagerSettings.showTotal) {\r\n            this.totalElement = this.createLabel();\r\n            this.totalElement.visible = false;\r\n        }\r\n        this.init(params.dataSource);\r\n    }\r\n    createPagingButton(container) {\r\n        var pagerSettings = this.pagerSettings;\r\n        let button = document.createElement('a');\r\n        button.href = 'javascript:';\r\n        if (this.pagerSettings.buttonWrapper) {\r\n            let w = document.createElement(this.pagerSettings.buttonWrapper);\r\n            w.appendChild(button);\r\n            container.appendChild(w);\r\n        }\r\n        else {\r\n            container.appendChild(button);\r\n        }\r\n        let result = {\r\n            _button: button,\r\n            get visible() {\r\n                let button = this._button;\r\n                return button.style.display != 'none';\r\n            },\r\n            set visible(value) {\r\n                let button = this._button;\r\n                let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n                if (value) {\r\n                    element.style.removeProperty('display');\r\n                }\r\n                else {\r\n                    element.style.display = 'none';\r\n                }\r\n            },\r\n            get pageIndex() {\r\n                let button = this._button;\r\n                return new Number(button.getAttribute('pageIndex')).valueOf();\r\n            },\r\n            set pageIndex(value) {\r\n                let button = this._button;\r\n                button.setAttribute('pageIndex', value);\r\n            },\r\n            get text() {\r\n                let button = this._button;\r\n                return button.innerHTML;\r\n            },\r\n            set text(value) {\r\n                let button = this._button;\r\n                button.innerHTML = value;\r\n            },\r\n            get active() {\r\n                let button = this._button;\r\n                return button.href != null;\r\n            },\r\n            set active(value) {\r\n                let button = this._button;\r\n                if (value == true) {\r\n                    button.removeAttribute('href');\r\n                    if (pagerSettings.activeButtonClassName) {\r\n                        // button.className = pagerSettings.activeButtonClassName;\r\n                        this.setClassName(pagerSettings.activeButtonClassName);\r\n                    }\r\n                    return;\r\n                }\r\n                button.href = 'javascript:';\r\n                if (pagerSettings.buttonClassName)\r\n                    this.setClassName(pagerSettings.buttonClassName);\r\n                else\r\n                    this.setClassName(null);\r\n            },\r\n            setClassName(value) {\r\n                let button = this._button;\r\n                let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n                if (value)\r\n                    element.className = value;\r\n                else\r\n                    element.removeAttribute('class');\r\n            },\r\n            onclick: null\r\n        };\r\n        button.onclick = () => {\r\n            if (result.onclick) {\r\n                result.onclick(result, this);\r\n            }\r\n        };\r\n        return result;\r\n    }\r\n    createTotalLabel() {\r\n        let totalElement = document.createElement('div');\r\n        totalElement.className = 'total';\r\n        let textElement = document.createElement('span');\r\n        textElement.className = 'text';\r\n        textElement.innerHTML = '总记录：';\r\n        totalElement.appendChild(textElement);\r\n        let numberElement = document.createElement('span');\r\n        numberElement.className = 'number';\r\n        totalElement.appendChild(numberElement);\r\n        this.element.appendChild(totalElement);\r\n        return {\r\n            get text() {\r\n                return numberElement.innerHTML;\r\n            },\r\n            set text(value) {\r\n                numberElement.innerHTML = value;\r\n            },\r\n            get visible() {\r\n                let display = totalElement.style.display;\r\n                return display != 'none';\r\n            },\r\n            set visible(value) {\r\n                if (value == true)\r\n                    totalElement.style.display = 'block';\r\n                else\r\n                    totalElement.style.display = 'node';\r\n            }\r\n        };\r\n    }\r\n    createPreviousButtons(buttonContainer) {\r\n        this.firstPageButton = this.createButton(buttonContainer);\r\n        this.firstPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n        this.firstPageButton.text = this.pagerSettings.firstPageText;\r\n        this.firstPageButton.visible = false;\r\n        this.previousPageButton = this.createButton(buttonContainer);\r\n        this.previousPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n        this.previousPageButton.text = this.pagerSettings.previousPageText;\r\n        this.previousPageButton.visible = false;\r\n    }\r\n    createNextButtons(buttonContainer) {\r\n        this.nextPageButton = this.createButton(buttonContainer);\r\n        this.nextPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n        this.nextPageButton.text = this.pagerSettings.nextPageText;\r\n        this.nextPageButton.visible = false;\r\n        this.lastPageButton = this.createButton(buttonContainer);\r\n        this.lastPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n        this.lastPageButton.text = this.pagerSettings.lastPageText;\r\n        this.lastPageButton.visible = false;\r\n    }\r\n    createNumberButtons(buttonContainer) {\r\n        let pagingBar = this;\r\n        let buttonCount = this.pagerSettings.pageButtonCount;\r\n        for (let i = 0; i < buttonCount; i++) {\r\n            let button = this.createButton(buttonContainer);\r\n            button.onclick = DataSourcePagingBar.on_buttonClick;\r\n            this.numberButtons[i] = button;\r\n        }\r\n        this.numberButtons.forEach(btn => {\r\n            btn.onclick = () => DataSourcePagingBar.on_buttonClick(btn, pagingBar);\r\n        });\r\n    }\r\n    static on_buttonClick(button, pagingBar) {\r\n        let pageIndex = button.pageIndex;\r\n        if (!pageIndex == null) {\r\n            return;\r\n        }\r\n        let args = pagingBar.selectArguments;\r\n        args.maximumRows = pagingBar.pageSize;\r\n        args.startRowIndex = pageIndex * pagingBar.pageSize;\r\n        pagingBar.pageIndex = pageIndex;\r\n        pagingBar.dataSource.select(pagingBar.selectArguments);\r\n    }\r\n    render() {\r\n        var pagerSettings = this.pagerSettings;\r\n        var buttonCount = pagerSettings.pageButtonCount;\r\n        let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);\r\n        let pagingBarCount = Math.ceil(this.pageCount / buttonCount);\r\n        this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount;\r\n        this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;\r\n        this.firstPageButton.pageIndex = 0;\r\n        this.lastPageButton.pageIndex = this.pageCount - 1;\r\n        for (let i = 0; i < this.numberButtons.length; i++) {\r\n            let pageIndex = pagingBarIndex * buttonCount + i;\r\n            if (pageIndex < this.pageCount) {\r\n                this.numberButtons[i].pageIndex = pageIndex;\r\n                this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();\r\n                this.numberButtons[i].visible = true;\r\n                this.numberButtons[i].active = pageIndex == this.pageIndex;\r\n            }\r\n            else {\r\n                this.numberButtons[i].visible = false;\r\n            }\r\n        }\r\n        if (this.totalElement) {\r\n            this.totalElement.text = this.totalRowCount;\r\n            this.totalElement.visible = true;\r\n        }\r\n        this.firstPageButton.visible = false;\r\n        this.previousPageButton.visible = false;\r\n        this.lastPageButton.visible = false;\r\n        this.nextPageButton.visible = false;\r\n        if (pagingBarIndex > 0) {\r\n            this.firstPageButton.visible = true;\r\n            this.previousPageButton.visible = true;\r\n        }\r\n        if (pagingBarIndex < pagingBarCount - 1) {\r\n            this.lastPageButton.visible = true;\r\n            this.nextPageButton.visible = true;\r\n        }\r\n    }\r\n}\r\nexports.DataSourcePagingBar = DataSourcePagingBar;\r\nDataSourcePagingBar.defaultPagerSettings = {\r\n    pageButtonCount: 10,\r\n    firstPageText: '<<',\r\n    lastPageText: '>>',\r\n    nextPageText: '...',\r\n    previousPageText: '...',\r\n    showTotal: true,\r\n};\r\n// export class NumberPagingBar extends PagingBar {\r\n//     // private dataSource: DataSource<{}>;\r\n//     private pagerSettings: PagerSettings;\r\n//     private element: HTMLElement;\r\n//     private totalElement: PagingTotalLabel;\r\n//     private numberButtons: Array<NumberPagingButton<NumberPagingBar>>;\r\n//     private firstPageButton: NumberPagingButton<NumberPagingBar>;\r\n//     private previousPageButton: NumberPagingButton<NumberPagingBar>;\r\n//     private nextPageButton: NumberPagingButton<NumberPagingBar>;\r\n//     private lastPageButton: NumberPagingButton<NumberPagingBar>;\r\n//     private createLabel: () => PagingTotalLabel;\r\n//     private createButton: (container: HTMLElement) => NumberPagingButton<NumberPagingBar>;\r\n//     private loadData: (pageIndex: number) => void;\r\n//     constructor(params: {\r\n//         loadData: (pageIndex: number) => void, element: HTMLElement, pagerSettings?: PagerSettings,\r\n//         selectArguments?: DataSourceSelectArguments\r\n//     }) {\r\n//         if (!params.loadData) throw Errors.argumentNull('loadData');\r\n//         if (!params.element) throw Errors.argumentNull('element');\r\n//         let pagerSettings = Object.assign(<PagerSettings>{\r\n//             pageButtonCount: 10,\r\n//             firstPageText: '<<',\r\n//             lastPageText: '>>',\r\n//             nextPageText: '...',\r\n//             previousPageText: '...',\r\n//             showTotal: true,\r\n//         }, params.pagerSettings || {});\r\n//         super();\r\n//         this.loadData = params.loadData;\r\n//         this.pagerSettings = pagerSettings;\r\n//         this.element = params.element;\r\n//         this.numberButtons = new Array<NumberPagingButton<NumberPagingBar>>();\r\n//         this.createButton = this.createPagingButton;\r\n//         this.createLabel = this.createTotalLabel;\r\n//         let buttonContainer = pagerSettings.buttonContainerWraper ?\r\n//             document.createElement(pagerSettings.buttonContainerWraper) :\r\n//             document.createElement('div');\r\n//         buttonContainer.className = pagerSettings.buttonContainerClassName || \"buttons\";\r\n//         this.element.appendChild(buttonContainer);\r\n//         this.createPreviousButtons(buttonContainer);\r\n//         this.createNumberButtons(buttonContainer);\r\n//         this.createNextButtons(buttonContainer);\r\n//         if (this.pagerSettings.showTotal) {\r\n//             this.totalElement = this.createLabel();\r\n//             this.totalElement.visible = false;\r\n//         }\r\n//         this.init(null, params.selectArguments);\r\n//     }\r\n//     private createPagingButton(container: HTMLElement): NumberPagingButton<NumberPagingBar> {\r\n//         var pagerSettings = this.pagerSettings;\r\n//         let button = document.createElement('a');\r\n//         button.href = 'javascript:';\r\n//         if (this.pagerSettings.buttonWrapper) {\r\n//             let w = document.createElement(this.pagerSettings.buttonWrapper);\r\n//             w.appendChild(button);\r\n//             container.appendChild(w);\r\n//         }\r\n//         else {\r\n//             container.appendChild(button);\r\n//         }\r\n//         let result = {\r\n//             _button: button,\r\n//             get visible(): boolean {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 return button.style.display != 'none';\r\n//             },\r\n//             set visible(value: boolean) {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n//                 if (value) {\r\n//                     element.style.removeProperty('display');\r\n//                 }\r\n//                 else {\r\n//                     element.style.display = 'none';\r\n//                 }\r\n//             },\r\n//             get pageIndex(): number {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 return new Number(button.getAttribute('pageIndex')).valueOf();\r\n//             },\r\n//             set pageIndex(value: number) {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 button.setAttribute('pageIndex', value as any);\r\n//             },\r\n//             get text(): string {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 return button.innerHTML;\r\n//             },\r\n//             set text(value) {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 button.innerHTML = value;\r\n//             },\r\n//             get active(): boolean {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 return button.href != null;\r\n//             },\r\n//             set active(value: boolean) {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 if (value == true) {\r\n//                     button.removeAttribute('href');\r\n//                     if (pagerSettings.activeButtonClassName) {\r\n//                         // button.className = pagerSettings.activeButtonClassName;\r\n//                         this.setClassName(pagerSettings.activeButtonClassName)\r\n//                     }\r\n//                     return;\r\n//                 }\r\n//                 button.href = 'javascript:';\r\n//                 if (pagerSettings.buttonClassName)\r\n//                     this.setClassName(pagerSettings.buttonClassName);\r\n//                 else\r\n//                     this.setClassName(null);\r\n//             },\r\n//             setClassName(value: string) {\r\n//                 let button = this._button as HTMLAnchorElement;\r\n//                 let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n//                 if (value)\r\n//                     element.className = value;\r\n//                 else\r\n//                     element.removeAttribute('class');\r\n//             },\r\n//             onclick: null as NumberPagingButtonClickEvent<NumberPagingBar> | null\r\n//         };\r\n//         button.onclick = () => {\r\n//             if (result.onclick) {\r\n//                 result.onclick(result, this);\r\n//             }\r\n//         };\r\n//         return result;\r\n//     }\r\n//     private createTotalLabel() {\r\n//         let totalElement = document.createElement('div');\r\n//         totalElement.className = 'total';\r\n//         let textElement = document.createElement('span');\r\n//         textElement.className = 'text';\r\n//         textElement.innerHTML = '总记录：';\r\n//         totalElement.appendChild(textElement);\r\n//         let numberElement = document.createElement('span');\r\n//         numberElement.className = 'number';\r\n//         totalElement.appendChild(numberElement);\r\n//         this.element.appendChild(totalElement);\r\n//         return <PagingTotalLabel>{\r\n//             get text(): string {\r\n//                 return numberElement.innerHTML;\r\n//             },\r\n//             set text(value: string) {\r\n//                 numberElement.innerHTML = value;\r\n//             },\r\n//             get visible(): boolean {\r\n//                 let display = totalElement.style.display;\r\n//                 return display != 'none';\r\n//             },\r\n//             set visible(value: boolean) {\r\n//                 if (value == true)\r\n//                     totalElement.style.display = 'block';\r\n//                 else\r\n//                     totalElement.style.display = 'node';\r\n//             }\r\n//         }\r\n//     }\r\n//     private createPreviousButtons(buttonContainer: HTMLElement) {\r\n//         this.firstPageButton = this.createButton(buttonContainer);\r\n//         this.firstPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n//         this.firstPageButton.text = this.pagerSettings.firstPageText;\r\n//         this.firstPageButton.visible = false;\r\n//         this.previousPageButton = this.createButton(buttonContainer);\r\n//         this.previousPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n//         this.previousPageButton.text = this.pagerSettings.previousPageText;\r\n//         this.previousPageButton.visible = false;\r\n//     }\r\n//     private createNextButtons(buttonContainer: HTMLElement) {\r\n//         this.nextPageButton = this.createButton(buttonContainer);\r\n//         this.nextPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n//         this.nextPageButton.text = this.pagerSettings.nextPageText;\r\n//         this.nextPageButton.visible = false;\r\n//         this.lastPageButton = this.createButton(buttonContainer);\r\n//         this.lastPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n//         this.lastPageButton.text = this.pagerSettings.lastPageText;\r\n//         this.lastPageButton.visible = false;\r\n//     }\r\n//     private createNumberButtons(buttonContainer: HTMLElement) {\r\n//         let pagingBar = this;\r\n//         let buttonCount = this.pagerSettings.pageButtonCount;\r\n//         for (let i = 0; i < buttonCount; i++) {\r\n//             let button = this.createButton(buttonContainer);\r\n//             button.onclick = NumberPagingBar.on_buttonClick;\r\n//             this.numberButtons[i] = button;\r\n//         }\r\n//         this.numberButtons.forEach(btn => {\r\n//             btn.onclick = () => NumberPagingBar.on_buttonClick(btn, pagingBar);\r\n//         })\r\n//     }\r\n//     private static on_buttonClick(button: NumberPagingButton<NumberPagingBar>, pagingBar: NumberPagingBar) {\r\n//         let pageIndex = button.pageIndex;\r\n//         if (!pageIndex == null) {\r\n//             return;\r\n//         }\r\n//         let args = pagingBar.selectArguments;\r\n//         args.maximumRows = pagingBar.pageSize;\r\n//         args.startRowIndex = pageIndex * pagingBar.pageSize;\r\n//         pagingBar.pageIndex = pageIndex;\r\n//         //pagingBar.dataSource.select(pagingBar.selectArguments);\r\n//         pagingBar.loadData(pageIndex)\r\n//     }\r\n//     render() {\r\n//         var pagerSettings = this.pagerSettings;\r\n//         var buttonCount = pagerSettings.pageButtonCount;\r\n//         let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);\r\n//         let pagingBarCount = Math.ceil(this.pageCount / buttonCount);\r\n//         this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount\r\n//         this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;\r\n//         this.firstPageButton.pageIndex = 0;\r\n//         this.lastPageButton.pageIndex = this.pageCount - 1;\r\n//         for (let i = 0; i < this.numberButtons.length; i++) {\r\n//             let pageIndex = pagingBarIndex * buttonCount + i;\r\n//             if (pageIndex < this.pageCount) {\r\n//                 this.numberButtons[i].pageIndex = pageIndex;\r\n//                 this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();\r\n//                 this.numberButtons[i].visible = true;\r\n//                 this.numberButtons[i].active = pageIndex == this.pageIndex;\r\n//             }\r\n//             else {\r\n//                 this.numberButtons[i].visible = false;\r\n//             }\r\n//         }\r\n//         if (this.totalElement) {\r\n//             this.totalElement.text = this.totalRowCount as any;\r\n//             this.totalElement.visible = true;\r\n//         }\r\n//         this.firstPageButton.visible = false;\r\n//         this.previousPageButton.visible = false;\r\n//         this.lastPageButton.visible = false;\r\n//         this.nextPageButton.visible = false;\r\n//         if (pagingBarIndex > 0) {\r\n//             this.firstPageButton.visible = true;\r\n//             this.previousPageButton.visible = true;\r\n//         }\r\n//         if (pagingBarIndex < pagingBarCount - 1) {\r\n//             this.lastPageButton.visible = true;\r\n//             this.nextPageButton.visible = true;\r\n//         }\r\n//     }\r\n// }\r\n// }\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Control_1 = require(\"./Control\");\r\nconst Errors_1 = require(\"./Errors\");\r\nclass TextBox extends Control_1.Control {\r\n    constructor(params) {\r\n        if (params == null)\r\n            throw Errors_1.Errors.argumentNull(\"params\");\r\n        if (!params.element)\r\n            throw Errors_1.Errors.argumentFieldNull(\"params\", \"element\");\r\n        if (!params.dataField)\r\n            throw Errors_1.Errors.argumentFieldNull(\"params\", \"dataField\");\r\n        if (!params.dataItem)\r\n            throw Errors_1.Errors.argumentFieldNull(\"params\", \"dataItem\");\r\n        if (!params.valueType)\r\n            throw Errors_1.Errors.argumentFieldNull(\"params\", \"valuetype\");\r\n        super(params.element);\r\n        let { element, dataField, dataItem, valueType } = params;\r\n        let value = dataItem[dataField];\r\n        element.value = `${value}`;\r\n        element.onchange = () => {\r\n            if (valueType == 'int') {\r\n                dataItem[dataField] = Number.parseInt(element.value);\r\n            }\r\n            else if (valueType == 'float') {\r\n                dataItem[dataField] = Number.parseFloat(element.value);\r\n            }\r\n            else {\r\n                dataItem[dataField] = (element.value || \"\");\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.TextBox = TextBox;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nclass ElementHelper {\r\n    static showElement(element) {\r\n        if (!element)\r\n            throw maishu_toolkit_1.errors.argumentNull('element');\r\n        element.style.removeProperty('display');\r\n    }\r\n    static hideElement(element) {\r\n        if (!element)\r\n            throw maishu_toolkit_1.errors.argumentNull('element');\r\n        element.style.display = 'none';\r\n    }\r\n    static isVisible(element) {\r\n        let { display } = element.style;\r\n        return !display || display != 'none';\r\n    }\r\n    static data(e, name, value) {\r\n        let element = e;\r\n        element['data'] = element['data'] || {};\r\n        if (value == null)\r\n            return element['data'].name;\r\n        element['data'].name = value;\r\n    }\r\n    static findFirstParentByTagName(element, tagName) {\r\n        if (element == null)\r\n            throw maishu_toolkit_1.errors.argumentNull(\"element\");\r\n        if (!tagName)\r\n            throw maishu_toolkit_1.errors.argumentNull('tagName');\r\n        let parent = element.parentElement;\r\n        while (parent != null) {\r\n            if (parent.tagName.toLowerCase() == tagName.toLowerCase()) {\r\n                return parent;\r\n            }\r\n            parent = parent.parentElement;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexports.ElementHelper = ElementHelper;\r\nfunction applyStyle(element, value) {\r\n    if (typeof value == 'string') {\r\n        element.setAttribute('style', value);\r\n        return;\r\n    }\r\n    for (let key in value) {\r\n        element.style[key] = value[key];\r\n    }\r\n}\r\nexports.applyStyle = applyStyle;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Control_1 = require(\"../Control\");\r\nclass GridViewCell extends Control_1.Control {\r\n    constructor(element, type = \"GridViewCell\") {\r\n        super(element);\r\n        this.type = type;\r\n    }\r\n}\r\nexports.GridViewCell = GridViewCell;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GridViewCell_1 = require(\"./GridViewCell\");\r\nclass GridViewCommandCell extends GridViewCell_1.GridViewCell {\r\n    constructor(field, cellElement) {\r\n        super(cellElement, \"GridViewCommandCell\");\r\n    }\r\n}\r\nexports.GridViewCommandCell = GridViewCommandCell;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GridViewCell_1 = require(\"./GridViewCell\");\r\n/**\r\n * 表格视图数据单元格\r\n * 用于渲染数据\r\n */\r\nclass GridViewDataCell extends GridViewCell_1.GridViewCell {\r\n    constructor(params, cellElement) {\r\n        super(cellElement, \"GridViewDataCell\");\r\n        let p = params;\r\n        this.nullText = p.nullText != null ? p.nullText : '';\r\n        this.dataFormatString = p.dataFormatString;\r\n        this.dataField = p.dataField;\r\n        if (p.render) {\r\n            this.render = (dataItem) => p.render.apply(this, [dataItem, this.element]);\r\n        }\r\n    }\r\n    /** 渲染数据 */\r\n    render(dataItem) {\r\n        let value = dataItem[this.dataField];\r\n        var text;\r\n        if (value == null)\r\n            text = this.nullText;\r\n        else\r\n            text = this.formatValue(value, this.dataFormatString);\r\n        this.element.innerHTML = text;\r\n    }\r\n    /** 格式化数据 */\r\n    formatValue(value, format) {\r\n        if (!format)\r\n            return `${value}`;\r\n        var result = '';\r\n        for (var i = 0;;) {\r\n            var open = format.indexOf('{', i);\r\n            var close = format.indexOf('}', i);\r\n            if ((open < 0) && (close < 0)) {\r\n                result += format.slice(i);\r\n                break;\r\n            }\r\n            if ((close > 0) && ((close < open) || (open < 0))) {\r\n                if (format.charAt(close + 1) !== '}') {\r\n                    throw new Error('Sys.Res.stringFormatBraceMismatch');\r\n                }\r\n                result += format.slice(i, close + 1);\r\n                i = close + 2;\r\n                continue;\r\n            }\r\n            result += format.slice(i, open);\r\n            i = open + 1;\r\n            if (format.charAt(i) === '{') {\r\n                result += '{';\r\n                i++;\r\n                continue;\r\n            }\r\n            if (close < 0)\r\n                throw new Error('Sys.Res.stringFormatBraceMismatch');\r\n            var brace = format.substring(i, close);\r\n            var argFormat = brace;\r\n            if (typeof (value) === \"undefined\" || value === null) {\r\n                value = '';\r\n            }\r\n            if (value instanceof Date)\r\n                result = result + this.formatDate(value, argFormat);\r\n            else if (value instanceof Number || typeof value == 'number')\r\n                result = result + this.formatNumber(value, argFormat);\r\n            else\r\n                result = result + value.toString();\r\n            i = close + 1;\r\n        }\r\n        return result;\r\n    }\r\n    formatDate(value, format) {\r\n        let y = value.getFullYear();\r\n        let m = value.getMonth() + 1;\r\n        let d = value.getDate();\r\n        let h = value.getHours();\r\n        let M = value.getMinutes();\r\n        let s = value.getSeconds();\r\n        let twoDigit = function (value) {\r\n            const TEN = 10;\r\n            if (value < TEN)\r\n                return `0` + value;\r\n            return value.toString();\r\n        };\r\n        switch (format) {\r\n            case 'd':\r\n                return `${y}-${m}-${d}`;\r\n            case 'g':\r\n                return `${y}-${m}-${d} ${h}:${M}`;\r\n            case 'gg':\r\n                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}`;\r\n            case 'G':\r\n                return `${y}-${m}-${d} ${h}:${M}:${s}`;\r\n            case 'GG':\r\n                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}:${twoDigit(s)}`;\r\n            case 't':\r\n                return `${h}:${M}`;\r\n            case 'T':\r\n                return `${h}:${M}:${s}`;\r\n        }\r\n        return value.toString();\r\n    }\r\n    formatNumber(value, format) {\r\n        let reg = new RegExp('^C[0-9]+');\r\n        if (reg.test(format)) {\r\n            let num = format.substr(1);\r\n            return value.toFixed(num);\r\n        }\r\n        return value.toString();\r\n    }\r\n}\r\nexports.GridViewDataCell = GridViewDataCell;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Errors_1 = require(\"../Errors\");\r\nconst Utility_1 = require(\"../Utility\");\r\nconst index_1 = require(\"./index\");\r\nclass GridViewEditableCell extends index_1.GridViewDataCell {\r\n    constructor(field, dataItem, cellElement) {\r\n        if (field == null)\r\n            throw Errors_1.Errors.argumentNull('field');\r\n        if (dataItem == null)\r\n            throw Errors_1.Errors.argumentNull('dataItem');\r\n        super({\r\n            dataField: field.dataField,\r\n            nullText: field.nullText, dataFormatString: field.dataFormatString,\r\n        }, cellElement);\r\n        this._field = field;\r\n        this._dataItem = dataItem;\r\n        this._mode = 'read';\r\n        this.type = \"GridViewEditableCell\";\r\n    }\r\n    get dataItem() {\r\n        return this._dataItem;\r\n    }\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n    beginEdit() {\r\n        if (this._field.readOnly) {\r\n            return;\r\n        }\r\n        this._mode = 'edit';\r\n        this.render(this._dataItem, \"edit\");\r\n    }\r\n    endEdit() {\r\n        if (this._field.readOnly) {\r\n            return;\r\n        }\r\n        this._mode = 'read';\r\n        this.render(this._dataItem, \"read\");\r\n    }\r\n    cancelEdit() {\r\n        if (this._field.readOnly) {\r\n            return;\r\n        }\r\n        this._mode = 'read';\r\n        this.render(this._dataItem, \"read\");\r\n    }\r\n    render(dataItem, mode) {\r\n        if (mode == 'edit') {\r\n            this.element.innerHTML = \"\";\r\n            this.createControl();\r\n            console.assert(this.control != null);\r\n            let value = dataItem[this.field.dataField];\r\n            this.control.value = value;\r\n            Utility_1.applyStyle(this.control.element, this._field.controlStyle);\r\n            this.element.appendChild(this.control.element);\r\n            return;\r\n        }\r\n        // this.control = null;\r\n        super.render(dataItem);\r\n    }\r\n    createControl() {\r\n        this.control = this.field.createControl();\r\n        return this.control.element;\r\n    }\r\n    get controlValue() {\r\n        if (this.control == null)\r\n            return null;\r\n        return this.control.value;\r\n    }\r\n}\r\nexports.GridViewEditableCell = GridViewEditableCell;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nconst Errors_1 = require(\"../Errors\");\r\nconst GridViewCell_1 = require(\"./GridViewCell\");\r\nclass GridViewHeaderCell extends GridViewCell_1.GridViewCell {\r\n    constructor(field, cellElement) {\r\n        super(cellElement, \"GridViewHeaderCell\");\r\n        this.ascHTML = '↑';\r\n        this.descHTML = '↓';\r\n        this.sortingHTML = '...';\r\n        this.toSortHTML = '↕';\r\n        this.field = field;\r\n        this.sorting = new maishu_toolkit_1.Callback();\r\n        this.sorted = new maishu_toolkit_1.Callback();\r\n        if (field.sortExpression) {\r\n            let labelElement = document.createElement('a');\r\n            labelElement.href = 'javascript:';\r\n            labelElement.innerHTML = this.defaultHeaderText();\r\n            labelElement.onclick = () => this.handleSort();\r\n            this._iconElement = document.createElement('span');\r\n            this._iconElement.innerHTML = this.toSortHTML;\r\n            this.appendChild(labelElement);\r\n            this.appendChild(this._iconElement);\r\n            this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);\r\n            this.sorted.add(() => this.updateSortIcon());\r\n        }\r\n        else {\r\n            this.element.innerHTML = this.defaultHeaderText();\r\n        }\r\n        this.style(field.headerStyle);\r\n    }\r\n    handleSort() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let selectArguments = this.field.gridView.selectArguments;\r\n            if (this.field.gridView == null)\r\n                throw Errors_1.Errors.gridViewNull();\r\n            let sortType = this.sortType == 'asc' ? 'desc' : 'asc';\r\n            // fireCallback(this.sorting, this, { sortType });\r\n            this.sorting.fire({ sortType });\r\n            selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;\r\n            yield this.field.gridView.dataSource.select(selectArguments);\r\n            this.sortType = sortType;\r\n            // fireCallback(this.sorted, this, { sortType });\r\n            this.sorted.fire({ sortType });\r\n        });\r\n    }\r\n    defaultHeaderText() {\r\n        return this.field.headerText || this.field.dataField || '';\r\n    }\r\n    get sortType() {\r\n        return this._sortType;\r\n    }\r\n    set sortType(value) {\r\n        this._sortType = value;\r\n    }\r\n    clearSortIcon() {\r\n        this._iconElement.innerHTML = this.toSortHTML;\r\n    }\r\n    updateSortIcon() {\r\n        if (this.sortType == 'asc') {\r\n            this._iconElement.innerHTML = this.ascHTML;\r\n        }\r\n        else if (this.sortType == 'desc') {\r\n            this._iconElement.innerHTML = this.descHTML;\r\n        }\r\n        else {\r\n            this._iconElement.innerHTML = this.toSortHTML;\r\n        }\r\n    }\r\n}\r\nexports.GridViewHeaderCell = GridViewHeaderCell;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GridViewCell_1 = require(\"./GridViewCell\");\r\nexports.GridViewCell = GridViewCell_1.GridViewCell;\r\nvar GridViewDataCell_1 = require(\"./GridViewDataCell\");\r\nexports.GridViewDataCell = GridViewDataCell_1.GridViewDataCell;\r\nvar GridViewHeaderCell_1 = require(\"./GridViewHeaderCell\");\r\nexports.GridViewHeaderCell = GridViewHeaderCell_1.GridViewHeaderCell;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar _dataItems;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nclass ArrayDataSource extends maishu_toolkit_1.DataSource {\r\n    constructor(dataItems, primaryKeys) {\r\n        super({\r\n            primaryKeys,\r\n            select: (args) => __awaiter(this, void 0, void 0, function* () {\r\n                let arr = this.dataItems;\r\n                if (args.maximumRows == null || args.maximumRows <= arr.length)\r\n                    return { dataItems: arr, totalRowCount: arr.length };\r\n                args.startRowIndex = args.startRowIndex || 0;\r\n                let dataItems = arr.slice(args.startRowIndex, args.startRowIndex + args.maximumRows);\r\n                let result = { dataItems, totalRowCount: arr.length };\r\n                return result;\r\n            }),\r\n            update: (dataItem) => __awaiter(this, void 0, void 0, function* () {\r\n                let item = this.findDataItem(dataItem);\r\n                if (item != null) {\r\n                    Object.assign(item, dataItem);\r\n                }\r\n                return item;\r\n            }),\r\n            insert: (dataItem) => __awaiter(this, void 0, void 0, function* () {\r\n                let items = this.dataItems;\r\n                items.push(dataItem);\r\n            }),\r\n            delete: (dataItem) => __awaiter(this, void 0, void 0, function* () {\r\n                let item = this.findDataItem(dataItem);\r\n                if (item == null) {\r\n                    console.assert(__classPrivateFieldGet(this, _dataItems) != null);\r\n                    __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != item));\r\n                }\r\n                return item;\r\n            })\r\n        });\r\n        _dataItems.set(this, void 0);\r\n        __classPrivateFieldSet(this, _dataItems, dataItems);\r\n    }\r\n    get dataItems() {\r\n        return __classPrivateFieldGet(this, _dataItems);\r\n    }\r\n    set dataItems(value) {\r\n        __classPrivateFieldSet(this, _dataItems, value);\r\n    }\r\n    findDataItem(pks) {\r\n        let items = this.dataItems;\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (this.samePrimaryKeyValues(items[i], pks)) {\r\n                return items[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    samePrimaryKeyValues(item1, item2) {\r\n        for (let j = 0; j < this.primaryKeys.length; j++) {\r\n            if (item1[this.primaryKeys[j]] != item2[this.primaryKeys[j]]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.ArrayDataSource = ArrayDataSource;\r\n_dataItems = new WeakMap();\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ArrayDataSource_1 = require(\"./ArrayDataSource\");\r\nexports.ArrayDataSource = ArrayDataSource_1.ArrayDataSource;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DataControlField_1 = require(\"./DataControlField\");\r\nconst GridViewEditableCell_1 = require(\"../cells/GridViewEditableCell\");\r\nclass BoundField extends DataControlField_1.DataControlField {\r\n    /**\r\n     * Gets the caption displayed for a field when the field's value is null.\r\n     */\r\n    get nullText() {\r\n        return this.params.nullText || \"\";\r\n    }\r\n    createItemCell(dataItem, cellElement) {\r\n        cellElement = cellElement || this.elementProvider.createCellElement(\"body\");\r\n        let cell = new GridViewEditableCell_1.GridViewEditableCell(this, dataItem, cellElement);\r\n        cell.style(this.itemStyle);\r\n        return cell;\r\n    }\r\n    /**\r\n     * Gets the field for the value.\r\n     */\r\n    get dataField() {\r\n        return this.params.dataField;\r\n    }\r\n    /**\r\n     * Gets the string that specifies the display format for the value of the field.\r\n     */\r\n    get dataFormatString() {\r\n        return this.params.dataFormatString;\r\n    }\r\n    get controlStyle() {\r\n        return this.params.controlStyle;\r\n    }\r\n    get readOnly() {\r\n        return this.params.readOnly;\r\n    }\r\n    get validateRules() {\r\n        return this.params.validateRules;\r\n    }\r\n    //===============================================\r\n    // Virutal Methods\r\n    createControl() {\r\n        let element = document.createElement(\"input\");\r\n        let valueType = this.params.valueType;\r\n        let field = this;\r\n        let control = {\r\n            element,\r\n            get value() {\r\n                let it = this;\r\n                let input = it.element;\r\n                let text = input.value;\r\n                input.name = `${field.dataField}`;\r\n                if (field.params.emptyText) {\r\n                    input.placeholder = field.params.emptyText;\r\n                }\r\n                switch (valueType) {\r\n                    case 'number':\r\n                        return new Number(text).valueOf();\r\n                    case 'date':\r\n                        return new Date(text);\r\n                    default:\r\n                        return text;\r\n                }\r\n            },\r\n            set value(value) {\r\n                let it = this;\r\n                let input = it.element;\r\n                input.value = value == null ? \"\" : value;\r\n            }\r\n        };\r\n        return control;\r\n    }\r\n}\r\nexports.BoundField = BoundField;\r\n","\"use strict\";\r\n/// <reference path=\"DataControlField.ts\"/>\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DataControlField_1 = require(\"./DataControlField\");\r\nconst Control_1 = require(\"../Control\");\r\nconst Utility_1 = require(\"../Utility\");\r\nconst GridViewCommandCell_1 = require(\"../cells/GridViewCommandCell\");\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nclass CommandField extends DataControlField_1.DataControlField {\r\n    constructor(params) {\r\n        super(params);\r\n        if (!this.params.cancelButtonHTML)\r\n            this.params.cancelButtonHTML = '取消';\r\n        if (!this.params.deleteButtonHTML)\r\n            this.params.deleteButtonHTML = '删除';\r\n        if (!this.params.editButtonHTML)\r\n            this.params.editButtonHTML = '编辑';\r\n        if (!this.params.updateButtonHTML)\r\n            this.params.updateButtonHTML = '更新';\r\n        if (!this.params.newButtonHTML)\r\n            this.params.newButtonHTML = '新增';\r\n        if (!this.params.insertButtonHTML)\r\n            this.params.insertButtonHTML = '添加';\r\n    }\r\n    // private params(): CommandFieldParams {\r\n    //     return this.params;\r\n    // }\r\n    get cancelButtonHTML() {\r\n        return this.params.cancelButtonHTML;\r\n    }\r\n    get deleteButtonHTML() {\r\n        return this.params.deleteButtonHTML;\r\n    }\r\n    get editButtonHTML() {\r\n        return this.params.editButtonHTML;\r\n    }\r\n    get updateButtonHTML() {\r\n        return this.params.updateButtonHTML;\r\n    }\r\n    get newButtonHTML() {\r\n        return this.params.newButtonHTML;\r\n    }\r\n    get insertButtonHTML() {\r\n        return this.params.insertButtonHTML;\r\n    }\r\n    get cancelButtonClass() {\r\n        return this.params.cancelButtonClass;\r\n    }\r\n    get deleteButtonClass() {\r\n        return this.params.deleteButtonClass;\r\n    }\r\n    get editButtonClass() {\r\n        return this.params.editButtonClass;\r\n    }\r\n    get newButtonClass() {\r\n        return this.params.newButtonClass;\r\n    }\r\n    get updateButtonClass() {\r\n        return this.params.updateButtonClass;\r\n    }\r\n    get insertButtonClass() {\r\n        return this.params.insertButtonClass;\r\n    }\r\n    createItemCell(dataItem) {\r\n        let cell = new GridViewCommandCell_1.GridViewCommandCell(this, this.elementProvider.createCellElement(\"body\"));\r\n        cell.style(this.itemStyle);\r\n        if (this.params.showEditButton) {\r\n            let editButton = this.createEditButton();\r\n            editButton.style.marginRight = '4px';\r\n            if (this.editButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(editButton, this.editButtonClass); //editButton.className = this.editButtonClass;\r\n            cell.editButton = editButton;\r\n            editButton.addEventListener('click', (e) => this.on_editButtonClick(e));\r\n            cell.appendChild(editButton);\r\n            let updateButton = this.createUpdateButton();\r\n            updateButton.style.display = 'none';\r\n            updateButton.style.marginRight = '4px';\r\n            if (this.updateButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(updateButton, this.updateButtonClass); //updateButton.className = this.updateButtonClass;\r\n            cell.updateButton = updateButton;\r\n            updateButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));\r\n            cell.appendChild(updateButton);\r\n            let cancelButton = this.createCancelButton();\r\n            cancelButton.style.display = 'none';\r\n            cancelButton.style.marginRight = '4px';\r\n            if (this.cancelButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(cancelButton, this.cancelButtonClass); //cancelButton.className = this.cancelButtonClass;\r\n            cell.cacelButton = cancelButton;\r\n            cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));\r\n            cell.appendChild(cancelButton);\r\n        }\r\n        if (this.params.showDeleteButton) {\r\n            let deleteButton = this.createDeleteButton();\r\n            deleteButton.style.marginRight = '4px';\r\n            if (this.deleteButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(deleteButton, this.deleteButtonClass); //deleteButton.className = this.deleteButtonClass;\r\n            cell.deleteButton = deleteButton;\r\n            deleteButton.onclick = (e) => this.on_deleteButtonClick(e);\r\n            cell.appendChild(deleteButton);\r\n        }\r\n        if (this.params.showNewButton) {\r\n            let newButton = this.createNewButton();\r\n            newButton.style.marginRight = '4px';\r\n            if (this.newButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(newButton, this.newButtonClass); //newButton.className = this.newButtonClass;\r\n            newButton.onclick = (e) => this.on_newButtonClick(e);\r\n            cell.newButton = newButton;\r\n            cell.appendChild(newButton);\r\n            let insertButton = this.createInsertButton();\r\n            insertButton.style.display = 'none';\r\n            insertButton.style.marginRight = '4px';\r\n            insertButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));\r\n            if (this.insertButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(insertButton, this.insertButtonClass); // insertButton.className = this.updateButtonClass;\r\n            cell.insertButton = insertButton;\r\n            cell.appendChild(insertButton);\r\n            let cancelButton = this.createCancelButton();\r\n            cancelButton.style.display = 'none';\r\n            cancelButton.style.marginRight = '4px';\r\n            cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));\r\n            if (this.cancelButtonClass)\r\n                maishu_toolkit_1.HTML.addClassName(cancelButton, this.cancelButtonClass); // cancelButton.className = this.cancelButtonClass;\r\n            cell.cacelButton = cancelButton;\r\n            cell.appendChild(cancelButton);\r\n        }\r\n        return cell;\r\n    }\r\n    showReadStatusButtons(cell) {\r\n        if (cell.newButton) {\r\n            this.showButton(cell.newButton);\r\n            this.hideButton(cell.insertButton);\r\n        }\r\n        if (cell.editButton) {\r\n            this.showButton(cell.editButton);\r\n            this.hideButton(cell.updateButton);\r\n        }\r\n        if (cell.deleteButton)\r\n            this.showButton(cell.deleteButton);\r\n        this.hideButton(cell.cacelButton);\r\n    }\r\n    createEditButton() {\r\n        let button = document.createElement('a');\r\n        button.innerHTML = this.editButtonHTML;\r\n        button.href = 'javascript:';\r\n        return button;\r\n    }\r\n    createDeleteButton() {\r\n        let button = document.createElement('a');\r\n        button.innerHTML = this.deleteButtonHTML;\r\n        button.href = 'javascript:';\r\n        return button;\r\n    }\r\n    createInsertButton() {\r\n        let button = document.createElement('a');\r\n        button.innerHTML = this.insertButtonHTML;\r\n        button.href = 'javascript:';\r\n        return button;\r\n    }\r\n    createUpdateButton() {\r\n        let button = document.createElement('a');\r\n        button.innerHTML = this.updateButtonHTML;\r\n        button.href = 'javascript:';\r\n        return button;\r\n    }\r\n    createCancelButton() {\r\n        let button = document.createElement('a');\r\n        button.innerHTML = this.cancelButtonHTML;\r\n        button.href = 'javascript:';\r\n        return button;\r\n    }\r\n    createNewButton() {\r\n        let button = document.createElement('a');\r\n        button.innerHTML = this.newButtonHTML;\r\n        button.href = 'javascript:';\r\n        return button;\r\n    }\r\n    hideButton(button) {\r\n        button.style.display = 'none';\r\n    }\r\n    showButton(button) {\r\n        button.style.removeProperty('display');\r\n    }\r\n    findParentCell(element) {\r\n        let cellElement;\r\n        let p = element.parentElement;\r\n        while (p) {\r\n            if (p.tagName == 'TD') {\r\n                cellElement = p;\r\n                break;\r\n            }\r\n            p = p.parentElement;\r\n        }\r\n        return cellElement;\r\n    }\r\n    on_editButtonClick(e) {\r\n        let cellElement = this.findParentCell(e.target);\r\n        console.assert(cellElement != null);\r\n        let rowElement = cellElement.parentElement;\r\n        for (let i = 0; i < rowElement.cells.length; i++) {\r\n            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);\r\n            if (cell.type == \"GridViewEditableCell\") {\r\n                cell.beginEdit();\r\n            }\r\n        }\r\n        let cell = Control_1.Control.getControlByElement(cellElement);\r\n        this.showButton(cell.cacelButton);\r\n        this.showButton(cell.updateButton);\r\n        this.hideButton(cell.editButton);\r\n        if (cell.deleteButton)\r\n            this.hideButton(cell.deleteButton);\r\n        if (cell.newButton)\r\n            this.hideButton(cell.newButton);\r\n    }\r\n    on_cancelButtonClick(e) {\r\n        let cellElement = this.findParentCell(e.target);\r\n        console.assert(cellElement != null);\r\n        let rowElement = cellElement.parentElement;\r\n        var row = Control_1.Control.getControlByElement(rowElement);\r\n        if (row[\"isNew\"] == true) {\r\n            rowElement.remove();\r\n            return;\r\n        }\r\n        for (let i = 0; i < rowElement.cells.length; i++) {\r\n            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);\r\n            if (cell.type == \"GridViewEditableCell\") {\r\n                cell.cancelEdit();\r\n            }\r\n        }\r\n        let cell = Control_1.Control.getControlByElement(cellElement);\r\n        this.hideButton(cell.cacelButton);\r\n        this.hideButton(cell.updateButton);\r\n        this.showButton(cell.editButton);\r\n        if (cell.deleteButton)\r\n            this.showButton(cell.deleteButton);\r\n        if (cell.newButton)\r\n            this.showButton(cell.newButton);\r\n    }\r\n    on_insertOrUpdateButtonClick(e) {\r\n        if (e.target['_updating'])\r\n            e.target['_updating'] = true;\r\n        let cellElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, 'td');\r\n        let rowElement = cellElement.parentElement;\r\n        let cell = Control_1.Control.getControlByElement(cellElement);\r\n        let row = Control_1.Control.getControlByElement(rowElement);\r\n        //==========================================================\r\n        // 复制 dataItem 副本\r\n        let dataItem = Object.assign({}, row.dataItem || {});\r\n        //==========================================================\r\n        let dataSource = row.gridView.dataSource;\r\n        let editableCells = new Array();\r\n        for (let i = 0; i < rowElement.cells.length; i++) {\r\n            let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);\r\n            if (cell.type == \"GridViewEditableCell\" && cell.mode == 'edit') {\r\n                let field = cell.field;\r\n                dataItem[field.dataField] = cell.controlValue;\r\n                editableCells.push(cell);\r\n            }\r\n        }\r\n        let isInsert = e.target == cell.insertButton;\r\n        let p = isInsert ? dataSource.insert(dataItem, rowElement.rowIndex) : dataSource.update(dataItem);\r\n        return p.then(() => {\r\n            if (isInsert) {\r\n                rowElement.remove();\r\n                return;\r\n            }\r\n            editableCells.forEach((item) => item.endEdit());\r\n            let cell = Control_1.Control.getControlByElement(cellElement);\r\n            this.showReadStatusButtons(cell);\r\n            e.target['_updating'] = false;\r\n        }).catch(() => e.target['_updating'] = false);\r\n    }\r\n    on_deleteButtonClick(e) {\r\n        let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, \"tr\");\r\n        let row = Control_1.Control.getControlByElement(rowElement);\r\n        let dataSource = row.gridView.dataSource;\r\n        dataSource.delete(row.dataItem)\r\n            .then(() => {\r\n            rowElement.remove();\r\n        });\r\n    }\r\n    on_newButtonClick(e) {\r\n        let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, \"tr\"); //cellElement.parentElement as HTMLTableRowElement;\r\n        let row = Control_1.Control.getControlByElement(rowElement);\r\n        let gridView = row.gridView;\r\n        let newRow = gridView.appendDataRow({}, rowElement.rowIndex);\r\n        newRow[\"isNew\"] = true;\r\n        let commandCells = newRow.cells.filter(o => o.type == \"GridViewCommandCell\"); //GridViewCommandCell\r\n        newRow.cells.filter(o => o.type == \"GridViewEditableCell\") //GridViewEditableCell\r\n            .forEach(c => c.beginEdit());\r\n        commandCells.forEach(c => {\r\n            let cell = c;\r\n            if (cell.deleteButton)\r\n                this.hideButton(cell.deleteButton);\r\n            if (cell.editButton)\r\n                this.hideButton(cell.editButton);\r\n            this.hideButton(cell.newButton);\r\n            this.showButton(cell.insertButton);\r\n            this.showButton(cell.cacelButton);\r\n        });\r\n    }\r\n}\r\nexports.CommandField = CommandField;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BoundField_1 = require(\"./BoundField\");\r\nclass CustomBoundField extends BoundField_1.BoundField {\r\n    constructor(params) {\r\n        super(params);\r\n    }\r\n    createItemCell(dataItem, cellElement) {\r\n        let cell = super.createItemCell(dataItem, cellElement);\r\n        let cellRender = cell.render;\r\n        cell.render = function (dataItem) {\r\n            let it = this;\r\n            let params = it.field.params;\r\n            if (it.mode == \"read\" && params.cellRender != null) {\r\n                params.cellRender.apply(cell, [dataItem, it.element]);\r\n                return;\r\n            }\r\n            cellRender.apply(cell, [dataItem]);\r\n        };\r\n        return cell;\r\n    }\r\n}\r\nexports.CustomBoundField = CustomBoundField;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DataControlField_1 = require(\"./DataControlField\");\r\nclass CustomField extends DataControlField_1.DataControlField {\r\n    createHeaderCell(cellElement) {\r\n        if (this.params.createHeaderCell) {\r\n            let cell = this.params.createHeaderCell(cellElement);\r\n            cell.style(this.headerStyle);\r\n            return cell;\r\n        }\r\n        return super.createHeaderCell(cellElement);\r\n    }\r\n    createFooterCell(cellElement) {\r\n        if (this.params.createFooterCell) {\r\n            let cell = this.params.createFooterCell(cellElement);\r\n            if (this.params.footerStyle)\r\n                cell.style(this.params.footerStyle);\r\n            return cell;\r\n        }\r\n        return super.createFooterCell(cellElement);\r\n    }\r\n    createItemCell(dataItem, cellElement) {\r\n        if (this.params.createItemCell) {\r\n            let cell = this.params.createItemCell.apply(this, [dataItem, cellElement]);\r\n            cell.style(this.params.itemStyle);\r\n            return cell;\r\n        }\r\n        return super.createItemCell(dataItem, cellElement);\r\n    }\r\n}\r\nexports.CustomField = CustomField;\r\n","\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar _gridView, _elementProvider;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Errors_1 = require(\"../Errors\");\r\nconst index_1 = require(\"../cells/index\");\r\nclass DataControlField {\r\n    constructor(params, elementProvider) {\r\n        _gridView.set(this, void 0);\r\n        _elementProvider.set(this, void 0);\r\n        if (params.visible == null)\r\n            params.visible = true;\r\n        this.params = params;\r\n        __classPrivateFieldSet(this, _elementProvider, elementProvider);\r\n    }\r\n    /**\r\n     * Gets the text that is displayed in the footer item of a data control field.\r\n     */\r\n    get footerText() {\r\n        return this.params.footerText;\r\n    }\r\n    /**\r\n     * Sets the text that is displayed in the footer item of a data control field.\r\n     */\r\n    set footerText(value) {\r\n        this.params.footerText = value;\r\n    }\r\n    /**\r\n     * Gets the text that is displayed in the header item of a data control field.\r\n     */\r\n    get headerText() {\r\n        return this.params.headerText;\r\n    }\r\n    /**\r\n     * Sets the text that is displayed in the header item of a data control field.\r\n     */\r\n    set headerText(value) {\r\n        this.params.headerText = value;\r\n    }\r\n    get elementProvider() {\r\n        if (__classPrivateFieldGet(this, _elementProvider) != null)\r\n            return __classPrivateFieldGet(this, _elementProvider);\r\n        if (this.gridView != null)\r\n            return this.gridView.elementProvider;\r\n        return null;\r\n    }\r\n    get itemStyle() {\r\n        return this.params.itemStyle;\r\n    }\r\n    set itemStyle(value) {\r\n        this.params.itemStyle = value;\r\n    }\r\n    get footerStyle() {\r\n        return this.params.footerStyle;\r\n    }\r\n    set footerStyle(value) {\r\n        this.params.footerStyle = value;\r\n    }\r\n    get headerStyle() {\r\n        return this.params.headerStyle;\r\n    }\r\n    set headerStyle(value) {\r\n        this.params.headerStyle = value;\r\n    }\r\n    get visible() {\r\n        return this.params.visible;\r\n    }\r\n    get gridView() {\r\n        return __classPrivateFieldGet(this, _gridView);\r\n    }\r\n    set gridView(value) {\r\n        __classPrivateFieldSet(this, _gridView, value);\r\n    }\r\n    /**\r\n     * Gets a sort expression that is used by a data source control to sort data.\r\n     */\r\n    get sortExpression() {\r\n        return this.params.sortExpression;\r\n    }\r\n    /**\r\n     * Sets a sort expression that is used by a data source control to sort data.\r\n     */\r\n    set sortExpression(value) {\r\n        this.params.sortExpression = value;\r\n    }\r\n    createHeaderCell(cellElement) {\r\n        let cell = new index_1.GridViewHeaderCell(this, cellElement);\r\n        return cell;\r\n    }\r\n    createFooterCell(cellElement) {\r\n        let cell = new index_1.GridViewCell(cellElement);\r\n        cell.element.innerHTML = this.footerText || '';\r\n        cell.style(this.footerStyle);\r\n        return cell;\r\n    }\r\n    /**\r\n     * 创建数据项单元格对象\r\n     * @param dataItem 数据项\r\n     * @param cellElement 单元格元素\r\n     */\r\n    createItemCell(dataItem, cellElement) {\r\n        if (!dataItem)\r\n            throw Errors_1.Errors.argumentNull('dataItem');\r\n        let cell = new index_1.GridViewCell(cellElement);\r\n        cell.style(this.itemStyle);\r\n        return cell;\r\n    }\r\n}\r\nexports.DataControlField = DataControlField;\r\n_gridView = new WeakMap(), _elementProvider = new WeakMap();\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar _dataItems, _dataSource;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BoundField_1 = require(\"./BoundField\");\r\nconst maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nconst DropDown_1 = require(\"../DropDown\");\r\nconst emptyValue = \"\";\r\nclass DropdownField extends BoundField_1.BoundField {\r\n    constructor(params) {\r\n        super(params);\r\n        _dataItems.set(this, void 0);\r\n        _dataSource.set(this, void 0);\r\n        if (!params.dataSource)\r\n            throw maishu_toolkit_1.errors.argumentFieldNull(\"params\", \"dataSource\");\r\n        if (!params.nameField)\r\n            throw maishu_toolkit_1.errors.argumentFieldNull(\"params\", \"nameField\");\r\n        if (!params.valueField)\r\n            throw maishu_toolkit_1.errors.argumentFieldNull(\"params\", \"valueField\");\r\n        __classPrivateFieldSet(this, _dataSource, params.dataSource);\r\n        params.dataSource.deleted.add(args => {\r\n            let dataItem = this.findDataItem(args.dataItem);\r\n            if (dataItem != null) {\r\n                __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != dataItem));\r\n            }\r\n        });\r\n        params.dataSource.inserted.add(args => {\r\n            if (__classPrivateFieldGet(this, _dataItems)) {\r\n                __classPrivateFieldGet(this, _dataItems).push(args.dataItem);\r\n            }\r\n        });\r\n        params.dataSource.updated.add(args => {\r\n            let dataItem = this.findDataItem(args.dataItem);\r\n            if (dataItem != null) {\r\n                dataItem = Object.assign(dataItem, args.dataItem);\r\n            }\r\n        });\r\n    }\r\n    findDataItem(pks) {\r\n        let items = __classPrivateFieldGet(this, _dataItems) || [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (this.samePrimaryKeyValues(items[i], pks)) {\r\n                return items[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    samePrimaryKeyValues(item1, item2) {\r\n        let primaryKeys = __classPrivateFieldGet(this, _dataSource).primaryKeys;\r\n        for (let j = 0; j < __classPrivateFieldGet(this, _dataSource).primaryKeys.length; j++) {\r\n            if (item1[primaryKeys[j]] != item2[primaryKeys[j]]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    getDataItems() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!__classPrivateFieldGet(this, _dataItems)) {\r\n                let r = yield __classPrivateFieldGet(this, _dataSource).select({ startRowIndex: 0, maximumRows: 1000 });\r\n                __classPrivateFieldSet(this, _dataItems, r.dataItems);\r\n            }\r\n            return __classPrivateFieldGet(this, _dataItems);\r\n        });\r\n    }\r\n    createControl() {\r\n        let element = document.createElement(\"select\");\r\n        element.className = \"form-control\";\r\n        if (this.params.emptyText) {\r\n            let o = document.createElement(\"option\");\r\n            let emptyText = this.params.emptyText;\r\n            if (emptyText != null)\r\n                o.innerText = emptyText;\r\n            o.value = emptyValue;\r\n            element.append(o);\r\n        }\r\n        new DropDown_1.Dropdown({\r\n            element, dataSource: this.params.dataSource,\r\n            nameField: this.params.nameField,\r\n            valueField: this.params.valueField,\r\n        });\r\n        return {\r\n            element,\r\n            get value() {\r\n                return element.value;\r\n            },\r\n            set value(value) {\r\n                if (value == null) {\r\n                    element.value = emptyValue;\r\n                    return;\r\n                }\r\n                element.value = value;\r\n            }\r\n        };\r\n    }\r\n    createItemCell(dataItem, cellElement) {\r\n        let cell = super.createItemCell(dataItem, cellElement);\r\n        let cellRender = cell.render;\r\n        let field = this;\r\n        cell.render = function (dataItem, mode) {\r\n            mode = mode || \"read\";\r\n            let it = this;\r\n            let params = it.field.params;\r\n            if (mode == \"read\") {\r\n                field.getDataItems().then(dataItems => {\r\n                    let item = dataItems.filter(o => o[params.valueField] == dataItem[params.dataField])[0];\r\n                    let content = \"\";\r\n                    if (item != null && item[params.nameField] != null) {\r\n                        content = `${item[params.nameField]}`;\r\n                    }\r\n                    cellElement.innerHTML = content;\r\n                });\r\n                return;\r\n            }\r\n            cellRender.apply(cell, [dataItem, mode]);\r\n        };\r\n        return cell;\r\n    }\r\n}\r\nexports.DropdownField = DropdownField;\r\n_dataItems = new WeakMap(), _dataSource = new WeakMap();\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GridView_1 = require(\"./GridView\");\r\nexports.GridView = GridView_1.GridView;\r\nvar BoundField_1 = require(\"./fields/BoundField\");\r\nexports.BoundField = BoundField_1.BoundField;\r\nvar CommandField_1 = require(\"./fields/CommandField\");\r\nexports.CommandField = CommandField_1.CommandField;\r\nvar CustomField_1 = require(\"./fields/CustomField\");\r\nexports.CustomField = CustomField_1.CustomField;\r\nvar CustomBoundField_1 = require(\"./fields/CustomBoundField\");\r\nexports.CustomBoundField = CustomBoundField_1.CustomBoundField;\r\nvar DataControlField_1 = require(\"./fields/DataControlField\");\r\nexports.DataControlField = DataControlField_1.DataControlField;\r\nvar DropdownField_1 = require(\"./fields/DropdownField\");\r\nexports.DropdownField = DropdownField_1.DropdownField;\r\nvar GridViewEditableCell_1 = require(\"./cells/GridViewEditableCell\");\r\nexports.GridViewEditableCell = GridViewEditableCell_1.GridViewEditableCell;\r\nvar DropDown_1 = require(\"./DropDown\");\r\nexports.DropDown = DropDown_1.Dropdown;\r\nvar TextBox_1 = require(\"./TextBox\");\r\nexports.TextBox = TextBox_1.TextBox;\r\nvar index_1 = require(\"./data-source/index\");\r\nexports.ArrayDataSource = index_1.ArrayDataSource;\r\nvar NumberPagingBar_1 = require(\"./NumberPagingBar\");\r\nexports.DataSourcePagingBar = NumberPagingBar_1.DataSourcePagingBar;\r\nvar Control_1 = require(\"./Control\");\r\nexports.Control = Control_1.Control;\r\nvar maishu_toolkit_1 = require(\"maishu-toolkit\");\r\nexports.DataSource = maishu_toolkit_1.DataSource;\r\nexports.DataSourceSelectArguments = maishu_toolkit_1.DataSourceSelectArguments;\r\nvar index_2 = require(\"./cells/index\");\r\nexports.GridViewCell = index_2.GridViewCell;\r\nexports.GridViewDataCell = index_2.GridViewDataCell;\r\nvar index_3 = require(\"./rows/index\");\r\nexports.GridViewDataRow = index_3.GridViewDataRow;\r\nexports.GridViewRowType = index_3.GridViewRowType;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GridViewRow_1 = require(\"./GridViewRow\");\r\nconst GridViewRowType_1 = require(\"./GridViewRowType\");\r\nclass GridViewDataRow extends GridViewRow_1.GridViewRow {\r\n    constructor(gridView, dataItem, rowElement) {\r\n        super(GridViewRowType_1.GridViewRowType.Data, rowElement, gridView);\r\n        this._dataItem = dataItem;\r\n        for (var i = 0; i < gridView.columns.length; i++) {\r\n            var column = gridView.columns[i];\r\n            var cell = column.createItemCell(dataItem, this.gridView.elementProvider.createCellElement(\"body\"));\r\n            cell.visible = column.visible;\r\n            this.appendChild(cell);\r\n        }\r\n    }\r\n    get dataItem() {\r\n        return this._dataItem;\r\n    }\r\n}\r\nexports.GridViewDataRow = GridViewDataRow;\r\n","\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar _rowType, _gridView;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Control_1 = require(\"../Control\");\r\nconst Errors_1 = require(\"../Errors\");\r\nclass GridViewRow extends Control_1.Control {\r\n    constructor(rowType, rowElement, gridView) {\r\n        super(rowElement);\r\n        _rowType.set(this, void 0);\r\n        _gridView.set(this, void 0);\r\n        if (gridView == null)\r\n            throw Errors_1.Errors.argumentNull(\"gridView\");\r\n        __classPrivateFieldSet(this, _gridView, gridView);\r\n        __classPrivateFieldSet(this, _rowType, rowType);\r\n    }\r\n    get rowType() {\r\n        return __classPrivateFieldGet(this, _rowType);\r\n    }\r\n    get gridView() {\r\n        return __classPrivateFieldGet(this, _gridView);\r\n    }\r\n    get cells() {\r\n        let cells = new Array();\r\n        for (let i = 0; i < this.element.children.length; i++) {\r\n            let cell = Control_1.Control.getControlByElement(this.element.children[i]);\r\n            console.assert(cell != null);\r\n            cells[i] = cell;\r\n        }\r\n        return cells;\r\n    }\r\n}\r\nexports.GridViewRow = GridViewRow;\r\n_rowType = new WeakMap(), _gridView = new WeakMap();\r\n// function findParentElement(element: HTMLElement, parentTagName: string) {\r\n//     console.assert(element != null);\r\n//     console.assert(parentTagName != null);\r\n//     parentTagName = parentTagName.toUpperCase();\r\n//     let p = element.parentElement;\r\n//     while (p) {\r\n//         if (p.tagName == parentTagName)\r\n//             return p;\r\n//         p = p.parentElement;\r\n//     }\r\n// }\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GridViewRowType;\r\n(function (GridViewRowType) {\r\n    GridViewRowType[GridViewRowType[\"Header\"] = 0] = \"Header\";\r\n    GridViewRowType[GridViewRowType[\"Footer\"] = 1] = \"Footer\";\r\n    GridViewRowType[GridViewRowType[\"Data\"] = 2] = \"Data\";\r\n    GridViewRowType[GridViewRowType[\"Paging\"] = 3] = \"Paging\";\r\n    GridViewRowType[GridViewRowType[\"Empty\"] = 4] = \"Empty\";\r\n})(GridViewRowType = exports.GridViewRowType || (exports.GridViewRowType = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GridViewRow_1 = require(\"./GridViewRow\");\r\nexports.GridViewRow = GridViewRow_1.GridViewRow;\r\nvar GridViewRowType_1 = require(\"./GridViewRowType\");\r\nexports.GridViewRowType = GridViewRowType_1.GridViewRowType;\r\nvar GridViewDataRow_1 = require(\"./GridViewDataRow\");\r\nexports.GridViewDataRow = GridViewDataRow_1.GridViewDataRow;\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_toolkit__;"],"sourceRoot":""}