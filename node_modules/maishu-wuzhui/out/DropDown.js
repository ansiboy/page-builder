"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _dataSource, _options, _nameField, _valueField;
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = require("./Control");
const Errors_1 = require("./Errors");
class Dropdown extends Control_1.Control {
    constructor(params) {
        super(params.element);
        _dataSource.set(this, void 0);
        _options.set(this, {});
        _nameField.set(this, void 0);
        _valueField.set(this, void 0);
        if (params == null)
            throw Errors_1.Errors.argumentNull('params');
        if (params.dataSource == null)
            throw Errors_1.Errors.argumentFieldNull('params', 'dataSource');
        if (params.element == null)
            throw Errors_1.Errors.argumentFieldNull('params', 'element');
        if (params.nameField == null)
            throw Errors_1.Errors.argumentFieldNull("params", "nameField");
        if (params.valueField == null)
            throw Errors_1.Errors.argumentFieldNull("params", "valueField");
        __classPrivateFieldSet(this, _nameField, params.nameField);
        __classPrivateFieldSet(this, _valueField, params.valueField);
        this.init(params);
    }
    get dataSource() {
        return __classPrivateFieldGet(this, _dataSource);
    }
    init(params) {
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldSet(this, _dataSource, params.dataSource);
            let r = yield params.dataSource.select({});
            r.dataItems.forEach(dataItem => {
                this.addOptionElement(dataItem);
            });
            __classPrivateFieldGet(this, _dataSource).inserted.add(args => {
                this.addOptionElement(args.dataItem);
            });
            __classPrivateFieldGet(this, _dataSource).deleted.add(args => {
                let pk = this.primaryKeyValue(args.dataItem);
                let option = __classPrivateFieldGet(this, _options)[pk];
                if (option) {
                    this.element.removeChild(option);
                }
            });
            __classPrivateFieldGet(this, _dataSource).updated.add(args => {
                let pk = this.primaryKeyValue(args.dataItem);
                let option = __classPrivateFieldGet(this, _options)[pk];
                if (option && args.dataItem[__classPrivateFieldGet(this, _nameField)] != null) {
                    option.innerHTML = args.dataItem[__classPrivateFieldGet(this, _nameField)];
                }
            });
        });
    }
    addOptionElement(dataItem) {
        console.assert(__classPrivateFieldGet(this, _nameField) != null);
        console.assert(__classPrivateFieldGet(this, _valueField) != null);
        let name = dataItem[__classPrivateFieldGet(this, _nameField)];
        let value = dataItem[__classPrivateFieldGet(this, _valueField)];
        let option = document.createElement('option');
        option.innerHTML = name || "";
        option.value = value || "";
        this.element.appendChild(option);
        let pk = this.primaryKeyValue(dataItem);
        __classPrivateFieldGet(this, _options)[pk] = option;
        return option;
    }
    primaryKeyValue(dataItem) {
        let r = __classPrivateFieldGet(this, _dataSource).primaryKeys.map(pk => dataItem[pk]).join("-");
        return r;
    }
}
exports.Dropdown = Dropdown;
_dataSource = new WeakMap(), _options = new WeakMap(), _nameField = new WeakMap(), _valueField = new WeakMap();
