"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = require("./Control");
const maishu_toolkit_1 = require("maishu-toolkit");
const NumberPagingBar_1 = require("./NumberPagingBar");
const Utility_1 = require("./Utility");
const Errors_1 = require("./Errors");
const index_1 = require("./cells/index");
const index_2 = require("./rows/index");
const ElementProvider_1 = require("./ElementProvider");
const maishu_toolkit_2 = require("maishu-toolkit");
class GridView extends Control_1.Control {
    constructor(params, elementProvider = ElementProvider_1.defaultElementProvider) {
        super(params.element);
        this.emptyDataHTML = '暂无记录';
        this.initDataHTML = '数据正在加载中...';
        this.loadFailHTML = '加载数据失败，点击重新加载。';
        //========================================================
        // 样式
        // headerStyle: string;
        // footerStyle: string;
        // rowStyle: string;
        // alternatingRowStyle: string;
        //private emptyDataRowStyle: string;
        //========================================================
        this.rowCreated = new maishu_toolkit_1.Callback(); //callbacks<GridView<T>, { row: GridViewRow }>();
        this.elementProvider = elementProvider;
        params = Object.assign({
            showHeader: true, showFooter: false,
            showPagingBar: true
        }, params);
        this.selectArguments = new maishu_toolkit_1.DataSourceSelectArguments();
        if (params.pageSize)
            this.selectArguments.maximumRows = params.pageSize;
        this._params = params;
        this._columns = params.columns || [];
        if (this._columns.length == 0)
            throw Errors_1.Errors.columnsCanntEmpty();
        for (var i = 0; i < this._columns.length; i++) {
            var column = this._columns[i];
            column.gridView = this;
        }
        this._dataSource = params.dataSource;
        this._dataSource.selected.add(args => this.on_selectedExecuted(args.selectResult));
        this._dataSource.updated.add(args => this.on_updateExecuted(args.dataItem));
        this._dataSource.inserted.add(args => this.on_insertExecuted(args.dataItem, args.index));
        this._dataSource.deleted.add(args => this.on_deleteExecuted(args.dataItem));
        this._dataSource.selecting.add(args => {
            let display = this._emtpyRow.element.style.display;
            if (display != 'none') {
                this._emtpyRow.element.children[0].innerHTML = this.initDataHTML;
            }
        });
        this._dataSource.error.add(args => {
            if (args.error.method == 'select') {
                this.renderDataItems([]);
                var element = this._emtpyRow.cells[0].element;
                element.innerHTML = this.loadFailHTML;
                element.onclick = () => {
                    this._dataSource.select(this.selectArguments);
                };
                args.error.handled = true;
                console.error(args.error.message);
                console.log(args.error.stack);
            }
        });
        if (params.showHeader) {
            this._header = new Control_1.Control(this.elementProvider.createHeaderElement());
            this.appendChild(this._header);
            this.appendHeaderRow();
        }
        this.emptyDataHTML = params.emptyDataHTML || this.emptyDataHTML;
        this.initDataHTML = params.initDataHTML || this.initDataHTML;
        this._body = new Control_1.Control(this.elementProvider.createBodyElement());
        this.appendChild(this._body);
        this.appendEmptyRow();
        let showPagingBar = params.showPagingBar;
        if (params.showFooter || showPagingBar) {
            this._footer = new Control_1.Control(this.elementProvider.createFooterElement());
            this.appendChild(this._footer);
            if (params.showFooter)
                this.appendFooterRow();
            if (showPagingBar) {
                this.createPagingBar(params.pagerSettings);
                // this.pagingBar.selectArguments.maximumRows = params.pageSize;
            }
        }
        // this.selectArguments = this.pagingBar ? this.pagingBar.selectArguments : new DataSourceSelectArguments();
        // if (params.pageSize)
        //     this.selectArguments.maximumRows = params.pageSize;
        this.dataSource.select(this.selectArguments);
    }
    createPagingBar(pagerSettings) {
        var pagingBarContainer = this.elementProvider.createRowElement(); //document.createElement('tr');
        var pagingBarElement = this.elementProvider.createCellElement("footer"); //document.createElement('td');
        // pagingBarElement.className = GridView.pagingBarClassName;
        maishu_toolkit_2.HTML.addClassName(pagingBarElement, GridView.pagingBarClassName);
        if (pagingBarElement.tagName == "TD")
            pagingBarElement.setAttribute("colspan", `${this.columns.length}`); // pagingBarElement.colSpan = this.columns.length;
        pagingBarContainer.appendChild(pagingBarElement);
        console.assert(this._footer != null);
        this._footer.appendChild(pagingBarContainer);
        this.pagingBar = new NumberPagingBar_1.DataSourcePagingBar({ dataSource: this.dataSource, element: pagingBarElement, pagerSettings });
    }
    get columns() {
        return this._columns;
    }
    get dataSource() {
        return this._dataSource;
    }
    appendEmptyRow() {
        this._emtpyRow = new index_2.GridViewRow(index_2.GridViewRowType.Empty, this.elementProvider.createRowElement(), this);
        this._emtpyRow.element.className = GridView.emptyRowClassName;
        let cell = new index_1.GridViewCell(this.elementProvider.createCellElement("body"));
        cell.element.setAttribute("colspan", this.columns.length.toString());
        if (this._params.emptyDataRowStyle) {
            Utility_1.applyStyle(cell.element, this._params.emptyDataRowStyle);
        }
        this._emtpyRow.appendChild(cell);
        this._body.appendChild(this._emtpyRow);
        this.rowCreated.fire({ row: this._emtpyRow });
    }
    appendDataRow(dataItem, index) {
        var row = new index_2.GridViewDataRow(this, dataItem, this.elementProvider.createRowElement());
        maishu_toolkit_2.HTML.addClassName(row.element, GridView.dataRowClassName);
        this._body.appendChild(row, index);
        let cells = row.cells;
        for (let j = 0; j < cells.length; j++) {
            let cell = cells[j];
            if (cell.render != null) {
                cell.render(dataItem);
            }
        }
        this.rowCreated.fire({ row });
        if (this._emtpyRow.element.style.display != 'none')
            this.hideEmptyRow();
        return row;
    }
    on_sort(sender, args) {
        if (this._currentSortCell != null && this._currentSortCell != sender) {
            this._currentSortCell.clearSortIcon();
        }
        this._currentSortCell = sender;
    }
    appendHeaderRow() {
        var row = new index_2.GridViewRow(index_2.GridViewRowType.Header, this.elementProvider.createRowElement(), this);
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            let cell = column.createHeaderCell(this.elementProvider.createCellElement("header"));
            if (cell.type == "GridViewHeaderCell") {
                cell.sorting.add(a => this.on_sort(cell, a));
            }
            row.appendChild(cell);
            cell.visible = this.columns[i].visible;
        }
        this._header.appendChild(row);
    }
    appendFooterRow() {
        var row = new index_2.GridViewRow(index_2.GridViewRowType.Footer, this.elementProvider.createRowElement(), this);
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            let cell = column.createFooterCell(this.elementProvider.createCellElement("footer"));
            row.appendChild(cell);
            cell.visible = column.visible;
        }
        this._footer.appendChild(row);
    }
    renderDataItems(items) {
        var rows = this._body.element.querySelectorAll(`.${GridView.dataRowClassName}`);
        for (let i = 0; i < rows.length; i++)
            this._body.element.removeChild(rows[i]);
        if (items.length == 0) {
            this.showEmptyRow();
            return;
        }
        for (let i = 0; i < items.length; i++) {
            this.appendDataRow(items[i]);
        }
    }
    on_selectedExecuted(e) {
        let dataItems = e.dataItems;
        if (this._params.translate) {
            dataItems = this._params.translate(dataItems);
        }
        this.renderDataItems(dataItems);
    }
    on_updateExecuted(item) {
        console.assert(item != null);
        let dataItems = [];
        for (let i = 0; i < this._body.element.children.length; i++) {
            let row_element = this._body.element.children[i];
            let row = Control_1.Control.getControlByElement(row_element);
            ;
            if (row.rowType != index_2.GridViewRowType.Data)
                continue;
            let dataItem = row.dataItem;
            dataItems.push(dataItem);
            if (!this.dataSource.isSameItem(dataItem, item))
                continue;
            if (dataItem != item) {
                Object.assign(dataItem, item);
            }
            let cells = row.cells;
            for (let j = 0; j < cells.length; j++) {
                let cell = cells[j];
                if (cell.type == "GridViewDataCell") {
                    cell.render(dataItem);
                }
                else if (cell.type == "GridViewEditableCell") {
                    cell.render(dataItem);
                }
            }
        }
        if (this._params.translate) {
            dataItems = this._params.translate(dataItems);
            this.renderDataItems(dataItems);
        }
    }
    on_insertExecuted(item, index) {
        if (index == null)
            index = 0;
        if (!this._params.translate) {
            this.appendDataRow(item, index);
            return;
        }
        let dataItems = [item];
        for (let i = 0; i < this._body.element.children.length; i++) {
            let row_element = this._body.element.children[i];
            let row = Control_1.Control.getControlByElement(row_element);
            ;
            if (row.rowType != index_2.GridViewRowType.Data)
                continue;
            let dataItem = row.dataItem;
            dataItems.push(dataItem);
        }
        dataItems = this._params.translate(dataItems);
        this.renderDataItems(dataItems);
    }
    on_deleteExecuted(item) {
        let rows = this._body.element.children;
        let dataRows = new Array();
        for (let i = 0; i < rows.length; i++) {
            let row = Control_1.Control.getControlByElement(rows[i]);
            if ((row.rowType == index_2.GridViewRowType.Data))
                dataRows.push(row);
        }
        if (this._params.translate) {
            let dataItems = dataRows.map(o => o.dataItem)
                .filter(o => !this.dataSource.isSameItem(o, item));
            dataItems = this._params.translate(dataItems);
            this.renderDataItems(dataItems);
            return;
        }
        for (let i = 0; i < dataRows.length; i++) {
            let dataRow = dataRows[i];
            if (!this.dataSource.isSameItem(item, dataRow.dataItem))
                continue;
            dataRow.element.remove();
            if (dataRows.length == 1)
                this.showEmptyRow();
        }
    }
    showEmptyRow() {
        this._emtpyRow.element.children[0].innerHTML = this.emptyDataHTML;
        this._emtpyRow.element.style.removeProperty('display');
    }
    hideEmptyRow() {
        this._emtpyRow.element.style.display = 'none';
    }
}
exports.GridView = GridView;
GridView.emptyRowClassName = 'empty';
GridView.dataRowClassName = 'data';
GridView.pagingBarClassName = 'pagingBar';
// }
