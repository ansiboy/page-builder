"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = require("maishu-toolkit");
const Errors_1 = require("../Errors");
const GridViewCell_1 = require("./GridViewCell");
class GridViewHeaderCell extends GridViewCell_1.GridViewCell {
    constructor(field, cellElement) {
        super(cellElement, "GridViewHeaderCell");
        this.ascHTML = '↑';
        this.descHTML = '↓';
        this.sortingHTML = '...';
        this.toSortHTML = '↕';
        this.field = field;
        this.sorting = new maishu_toolkit_1.Callback();
        this.sorted = new maishu_toolkit_1.Callback();
        if (field.sortExpression) {
            let labelElement = document.createElement('a');
            labelElement.href = 'javascript:';
            labelElement.innerHTML = this.defaultHeaderText();
            labelElement.onclick = () => this.handleSort();
            this._iconElement = document.createElement('span');
            this._iconElement.innerHTML = this.toSortHTML;
            this.appendChild(labelElement);
            this.appendChild(this._iconElement);
            this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);
            this.sorted.add(() => this.updateSortIcon());
        }
        else {
            this.element.innerHTML = this.defaultHeaderText();
        }
        this.style(field.headerStyle);
    }
    handleSort() {
        return __awaiter(this, void 0, void 0, function* () {
            let selectArguments = this.field.gridView.selectArguments;
            if (this.field.gridView == null)
                throw Errors_1.Errors.gridViewNull();
            let sortType = this.sortType == 'asc' ? 'desc' : 'asc';
            // fireCallback(this.sorting, this, { sortType });
            this.sorting.fire({ sortType });
            selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;
            yield this.field.gridView.dataSource.select(selectArguments);
            this.sortType = sortType;
            // fireCallback(this.sorted, this, { sortType });
            this.sorted.fire({ sortType });
        });
    }
    defaultHeaderText() {
        return this.field.headerText || this.field.dataField || '';
    }
    get sortType() {
        return this._sortType;
    }
    set sortType(value) {
        this._sortType = value;
    }
    clearSortIcon() {
        this._iconElement.innerHTML = this.toSortHTML;
    }
    updateSortIcon() {
        if (this.sortType == 'asc') {
            this._iconElement.innerHTML = this.ascHTML;
        }
        else if (this.sortType == 'desc') {
            this._iconElement.innerHTML = this.descHTML;
        }
        else {
            this._iconElement.innerHTML = this.toSortHTML;
        }
    }
}
exports.GridViewHeaderCell = GridViewHeaderCell;
