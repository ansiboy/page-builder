"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var _dataItems;
Object.defineProperty(exports, "__esModule", { value: true });
const maishu_toolkit_1 = require("maishu-toolkit");
class ArrayDataSource extends maishu_toolkit_1.DataSource {
    constructor(dataItems, primaryKeys) {
        super({
            primaryKeys,
            select: (args) => __awaiter(this, void 0, void 0, function* () {
                let arr = this.dataItems;
                if (args.maximumRows == null || args.maximumRows <= arr.length)
                    return { dataItems: arr, totalRowCount: arr.length };
                args.startRowIndex = args.startRowIndex || 0;
                let dataItems = arr.slice(args.startRowIndex, args.startRowIndex + args.maximumRows);
                let result = { dataItems, totalRowCount: arr.length };
                return result;
            }),
            update: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let item = this.findDataItem(dataItem);
                if (item != null) {
                    Object.assign(item, dataItem);
                }
                return item;
            }),
            insert: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let items = this.dataItems;
                items.push(dataItem);
            }),
            delete: (dataItem) => __awaiter(this, void 0, void 0, function* () {
                let item = this.findDataItem(dataItem);
                if (item == null) {
                    console.assert(__classPrivateFieldGet(this, _dataItems) != null);
                    __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != item));
                }
                return item;
            })
        });
        _dataItems.set(this, void 0);
        __classPrivateFieldSet(this, _dataItems, dataItems);
    }
    get dataItems() {
        return __classPrivateFieldGet(this, _dataItems);
    }
    set dataItems(value) {
        __classPrivateFieldSet(this, _dataItems, value);
    }
    findDataItem(pks) {
        let items = this.dataItems;
        for (let i = 0; i < items.length; i++) {
            if (this.samePrimaryKeyValues(items[i], pks)) {
                return items[i];
            }
        }
        return null;
    }
    samePrimaryKeyValues(item1, item2) {
        for (let j = 0; j < this.primaryKeys.length; j++) {
            if (item1[this.primaryKeys[j]] != item2[this.primaryKeys[j]]) {
                return false;
            }
        }
        return true;
    }
}
exports.ArrayDataSource = ArrayDataSource;
_dataItems = new WeakMap();
