"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DataControlField_1 = require("./DataControlField");
const GridViewEditableCell_1 = require("../cells/GridViewEditableCell");
class BoundField extends DataControlField_1.DataControlField {
    /**
     * Gets the caption displayed for a field when the field's value is null.
     */
    get nullText() {
        return this.params.nullText || "";
    }
    createItemCell(dataItem, cellElement) {
        cellElement = cellElement || this.elementProvider.createCellElement("body");
        let cell = new GridViewEditableCell_1.GridViewEditableCell(this, dataItem, cellElement);
        cell.style(this.itemStyle);
        return cell;
    }
    /**
     * Gets the field for the value.
     */
    get dataField() {
        return this.params.dataField;
    }
    /**
     * Gets the string that specifies the display format for the value of the field.
     */
    get dataFormatString() {
        return this.params.dataFormatString;
    }
    get controlStyle() {
        return this.params.controlStyle;
    }
    get readOnly() {
        return this.params.readOnly;
    }
    get validateRules() {
        return this.params.validateRules;
    }
    //===============================================
    // Virutal Methods
    createControl() {
        let element = document.createElement("input");
        let valueType = this.params.valueType;
        let field = this;
        let control = {
            element,
            get value() {
                let it = this;
                let input = it.element;
                let text = input.value;
                input.name = `${field.dataField}`;
                if (field.params.emptyText) {
                    input.placeholder = field.params.emptyText;
                }
                switch (valueType) {
                    case 'number':
                        return new Number(text).valueOf();
                    case 'date':
                        return new Date(text);
                    default:
                        return text;
                }
            },
            set value(value) {
                let it = this;
                let input = it.element;
                input.value = value == null ? "" : value;
            }
        };
        return control;
    }
}
exports.BoundField = BoundField;
