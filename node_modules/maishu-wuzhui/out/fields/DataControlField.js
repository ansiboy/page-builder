"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _gridView, _elementProvider;
Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = require("../Errors");
const index_1 = require("../cells/index");
class DataControlField {
    constructor(params, elementProvider) {
        _gridView.set(this, void 0);
        _elementProvider.set(this, void 0);
        if (params.visible == null)
            params.visible = true;
        this.params = params;
        __classPrivateFieldSet(this, _elementProvider, elementProvider);
    }
    /**
     * Gets the text that is displayed in the footer item of a data control field.
     */
    get footerText() {
        return this.params.footerText;
    }
    /**
     * Sets the text that is displayed in the footer item of a data control field.
     */
    set footerText(value) {
        this.params.footerText = value;
    }
    /**
     * Gets the text that is displayed in the header item of a data control field.
     */
    get headerText() {
        return this.params.headerText;
    }
    /**
     * Sets the text that is displayed in the header item of a data control field.
     */
    set headerText(value) {
        this.params.headerText = value;
    }
    get elementProvider() {
        if (__classPrivateFieldGet(this, _elementProvider) != null)
            return __classPrivateFieldGet(this, _elementProvider);
        if (this.gridView != null)
            return this.gridView.elementProvider;
        return null;
    }
    get itemStyle() {
        return this.params.itemStyle;
    }
    set itemStyle(value) {
        this.params.itemStyle = value;
    }
    get footerStyle() {
        return this.params.footerStyle;
    }
    set footerStyle(value) {
        this.params.footerStyle = value;
    }
    get headerStyle() {
        return this.params.headerStyle;
    }
    set headerStyle(value) {
        this.params.headerStyle = value;
    }
    get visible() {
        return this.params.visible;
    }
    get gridView() {
        return __classPrivateFieldGet(this, _gridView);
    }
    set gridView(value) {
        __classPrivateFieldSet(this, _gridView, value);
    }
    /**
     * Gets a sort expression that is used by a data source control to sort data.
     */
    get sortExpression() {
        return this.params.sortExpression;
    }
    /**
     * Sets a sort expression that is used by a data source control to sort data.
     */
    set sortExpression(value) {
        this.params.sortExpression = value;
    }
    createHeaderCell(cellElement) {
        let cell = new index_1.GridViewHeaderCell(this, cellElement);
        return cell;
    }
    createFooterCell(cellElement) {
        let cell = new index_1.GridViewCell(cellElement);
        cell.element.innerHTML = this.footerText || '';
        cell.style(this.footerStyle);
        return cell;
    }
    /**
     * 创建数据项单元格对象
     * @param dataItem 数据项
     * @param cellElement 单元格元素
     */
    createItemCell(dataItem, cellElement) {
        if (!dataItem)
            throw Errors_1.Errors.argumentNull('dataItem');
        let cell = new index_1.GridViewCell(cellElement);
        cell.style(this.itemStyle);
        return cell;
    }
}
exports.DataControlField = DataControlField;
_gridView = new WeakMap(), _elementProvider = new WeakMap();
