"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _dataItems, _dataSource;
Object.defineProperty(exports, "__esModule", { value: true });
const BoundField_1 = require("./BoundField");
const maishu_toolkit_1 = require("maishu-toolkit");
const DropDown_1 = require("../DropDown");
const emptyValue = "";
class DropdownField extends BoundField_1.BoundField {
    constructor(params) {
        super(params);
        _dataItems.set(this, void 0);
        _dataSource.set(this, void 0);
        if (!params.dataSource)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "dataSource");
        if (!params.nameField)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "nameField");
        if (!params.valueField)
            throw maishu_toolkit_1.errors.argumentFieldNull("params", "valueField");
        __classPrivateFieldSet(this, _dataSource, params.dataSource);
        params.dataSource.deleted.add(args => {
            let dataItem = this.findDataItem(args.dataItem);
            if (dataItem != null) {
                __classPrivateFieldSet(this, _dataItems, __classPrivateFieldGet(this, _dataItems).filter(o => o != dataItem));
            }
        });
        params.dataSource.inserted.add(args => {
            if (__classPrivateFieldGet(this, _dataItems)) {
                __classPrivateFieldGet(this, _dataItems).push(args.dataItem);
            }
        });
        params.dataSource.updated.add(args => {
            let dataItem = this.findDataItem(args.dataItem);
            if (dataItem != null) {
                dataItem = Object.assign(dataItem, args.dataItem);
            }
        });
    }
    findDataItem(pks) {
        let items = __classPrivateFieldGet(this, _dataItems) || [];
        for (let i = 0; i < items.length; i++) {
            if (this.samePrimaryKeyValues(items[i], pks)) {
                return items[i];
            }
        }
        return null;
    }
    samePrimaryKeyValues(item1, item2) {
        let primaryKeys = __classPrivateFieldGet(this, _dataSource).primaryKeys;
        for (let j = 0; j < __classPrivateFieldGet(this, _dataSource).primaryKeys.length; j++) {
            if (item1[primaryKeys[j]] != item2[primaryKeys[j]]) {
                return false;
            }
        }
        return true;
    }
    getDataItems() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _dataItems)) {
                let r = yield __classPrivateFieldGet(this, _dataSource).select({ startRowIndex: 0, maximumRows: 1000 });
                __classPrivateFieldSet(this, _dataItems, r.dataItems);
            }
            return __classPrivateFieldGet(this, _dataItems);
        });
    }
    createControl() {
        let element = document.createElement("select");
        element.className = "form-control";
        if (this.params.emptyText) {
            let o = document.createElement("option");
            let emptyText = this.params.emptyText;
            if (emptyText != null)
                o.innerText = emptyText;
            o.value = emptyValue;
            element.append(o);
        }
        new DropDown_1.Dropdown({
            element, dataSource: this.params.dataSource,
            nameField: this.params.nameField,
            valueField: this.params.valueField,
        });
        return {
            element,
            get value() {
                return element.value;
            },
            set value(value) {
                if (value == null) {
                    element.value = emptyValue;
                    return;
                }
                element.value = value;
            }
        };
    }
    createItemCell(dataItem, cellElement) {
        let cell = super.createItemCell(dataItem, cellElement);
        let cellRender = cell.render;
        let field = this;
        cell.render = function (dataItem, mode) {
            mode = mode || "read";
            let it = this;
            let params = it.field.params;
            if (mode == "read") {
                field.getDataItems().then(dataItems => {
                    let item = dataItems.filter(o => o[params.valueField] == dataItem[params.dataField])[0];
                    let content = "";
                    if (item != null && item[params.nameField] != null) {
                        content = `${item[params.nameField]}`;
                    }
                    cellElement.innerHTML = content;
                });
                return;
            }
            cellRender.apply(cell, [dataItem, mode]);
        };
        return cell;
    }
}
exports.DropdownField = DropdownField;
_dataItems = new WeakMap(), _dataSource = new WeakMap();
