"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _rowType, _gridView;
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = require("../Control");
const Errors_1 = require("../Errors");
class GridViewRow extends Control_1.Control {
    constructor(rowType, rowElement, gridView) {
        super(rowElement);
        _rowType.set(this, void 0);
        _gridView.set(this, void 0);
        if (gridView == null)
            throw Errors_1.Errors.argumentNull("gridView");
        __classPrivateFieldSet(this, _gridView, gridView);
        __classPrivateFieldSet(this, _rowType, rowType);
    }
    get rowType() {
        return __classPrivateFieldGet(this, _rowType);
    }
    get gridView() {
        return __classPrivateFieldGet(this, _gridView);
    }
    get cells() {
        let cells = new Array();
        for (let i = 0; i < this.element.children.length; i++) {
            let cell = Control_1.Control.getControlByElement(this.element.children[i]);
            console.assert(cell != null);
            cells[i] = cell;
        }
        return cells;
    }
}
exports.GridViewRow = GridViewRow;
_rowType = new WeakMap(), _gridView = new WeakMap();
// function findParentElement(element: HTMLElement, parentTagName: string) {
//     console.assert(element != null);
//     console.assert(parentTagName != null);
//     parentTagName = parentTagName.toUpperCase();
//     let p = element.parentElement;
//     while (p) {
//         if (p.tagName == parentTagName)
//             return p;
//         p = p.parentElement;
//     }
// }
